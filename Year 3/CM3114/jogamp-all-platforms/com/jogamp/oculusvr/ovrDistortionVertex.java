/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Sat Oct 10 03:31:12 CEST 2015 ----! */


package com.jogamp.oculusvr;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.oculusvr.*;
import java.security.AccessController;
import java.security.PrivilegedAction;

public class ovrDistortionVertex {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] ovrDistortionVertex_size = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */  };
  private static final int[] ScreenPosNDC_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
  private static final int[] ScreenPosNDC_size = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };
  private static final int[] TimeWarpFactor_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */ };
//private static final int[] TimeWarpFactor_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] VignetteFactor_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */ };
//private static final int[] VignetteFactor_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] TanEyeAnglesR_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */ };
  private static final int[] TanEyeAnglesR_size = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };
  private static final int[] TanEyeAnglesG_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */ };
  private static final int[] TanEyeAnglesG_size = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };
  private static final int[] TanEyeAnglesB_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */ };
  private static final int[] TanEyeAnglesB_size = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };

  public static int size() {
    return ovrDistortionVertex_size[mdIdx];
  }

  public static ovrDistortionVertex create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static ovrDistortionVertex create(java.nio.ByteBuffer buf) {
      return new ovrDistortionVertex(buf);
  }

  ovrDistortionVertex(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Getter for native field <code>ScreenPosNDC</code>: CType[(StructType) typedef 'ovrVector2f', size [fixed false, lnx64 8], [const[false], struct{ovrVector2f_: 2, }]] */
  public ovrVector2f getScreenPosNDC() {
    return ovrVector2f.create( accessor.slice( ScreenPosNDC_offset[mdIdx], ScreenPosNDC_size[mdIdx] ) );
 }

  /** Setter for native field <code>TimeWarpFactor</code>: CType[(FloatType) 'float', size [fixed true, lnx64 4], [const[false], float]] */
  public ovrDistortionVertex setTimeWarpFactor(float val) {
    accessor.setFloatAt(TimeWarpFactor_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>TimeWarpFactor</code>: CType[(FloatType) 'float', size [fixed true, lnx64 4], [const[false], float]] */
  public float getTimeWarpFactor() {
    return accessor.getFloatAt(TimeWarpFactor_offset[mdIdx]);
  }

  /** Setter for native field <code>VignetteFactor</code>: CType[(FloatType) 'float', size [fixed true, lnx64 4], [const[false], float]] */
  public ovrDistortionVertex setVignetteFactor(float val) {
    accessor.setFloatAt(VignetteFactor_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>VignetteFactor</code>: CType[(FloatType) 'float', size [fixed true, lnx64 4], [const[false], float]] */
  public float getVignetteFactor() {
    return accessor.getFloatAt(VignetteFactor_offset[mdIdx]);
  }

  /** Getter for native field <code>TanEyeAnglesR</code>: CType[(StructType) typedef 'ovrVector2f', size [fixed false, lnx64 8], [const[false], struct{ovrVector2f_: 2, }]] */
  public ovrVector2f getTanEyeAnglesR() {
    return ovrVector2f.create( accessor.slice( TanEyeAnglesR_offset[mdIdx], TanEyeAnglesR_size[mdIdx] ) );
 }

  /** Getter for native field <code>TanEyeAnglesG</code>: CType[(StructType) typedef 'ovrVector2f', size [fixed false, lnx64 8], [const[false], struct{ovrVector2f_: 2, }]] */
  public ovrVector2f getTanEyeAnglesG() {
    return ovrVector2f.create( accessor.slice( TanEyeAnglesG_offset[mdIdx], TanEyeAnglesG_size[mdIdx] ) );
 }

  /** Getter for native field <code>TanEyeAnglesB</code>: CType[(StructType) typedef 'ovrVector2f', size [fixed false, lnx64 8], [const[false], struct{ovrVector2f_: 2, }]] */
  public ovrVector2f getTanEyeAnglesB() {
    return ovrVector2f.create( accessor.slice( TanEyeAnglesB_offset[mdIdx], TanEyeAnglesB_size[mdIdx] ) );
 }
}
