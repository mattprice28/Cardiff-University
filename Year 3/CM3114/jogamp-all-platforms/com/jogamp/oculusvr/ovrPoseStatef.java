/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Sat Oct 10 03:31:13 CEST 2015 ----! */


package com.jogamp.oculusvr;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.oculusvr.*;
import java.security.AccessController;
import java.security.PrivilegedAction;

public class ovrPoseStatef {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] ovrPoseStatef_size = new int[] { 88 /* ARM_MIPS_32 */, 88 /* X86_32_UNIX */, 88 /* X86_32_MACOS */, 88 /* PPC_32_UNIX */, 88 /* SPARC_32_SUNOS */, 88 /* X86_32_WINDOWS */, 88 /* LP64_UNIX */, 88 /* X86_64_WINDOWS */  };
  private static final int[] ThePose_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
  private static final int[] ThePose_size = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 28 /* LP64_UNIX */, 28 /* X86_64_WINDOWS */  };
  private static final int[] AngularVelocity_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 28 /* LP64_UNIX */, 28 /* X86_64_WINDOWS */ };
  private static final int[] AngularVelocity_size = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */  };
  private static final int[] LinearVelocity_offset = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */ };
  private static final int[] LinearVelocity_size = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */  };
  private static final int[] AngularAcceleration_offset = new int[] { 52 /* ARM_MIPS_32 */, 52 /* X86_32_UNIX */, 52 /* X86_32_MACOS */, 52 /* PPC_32_UNIX */, 52 /* SPARC_32_SUNOS */, 52 /* X86_32_WINDOWS */, 52 /* LP64_UNIX */, 52 /* X86_64_WINDOWS */ };
  private static final int[] AngularAcceleration_size = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */  };
  private static final int[] LinearAcceleration_offset = new int[] { 64 /* ARM_MIPS_32 */, 64 /* X86_32_UNIX */, 64 /* X86_32_MACOS */, 64 /* PPC_32_UNIX */, 64 /* SPARC_32_SUNOS */, 64 /* X86_32_WINDOWS */, 64 /* LP64_UNIX */, 64 /* X86_64_WINDOWS */ };
  private static final int[] LinearAcceleration_size = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */  };
  private static final int[] Pad_offset = new int[] { 76 /* ARM_MIPS_32 */, 76 /* X86_32_UNIX */, 76 /* X86_32_MACOS */, 76 /* PPC_32_UNIX */, 76 /* SPARC_32_SUNOS */, 76 /* X86_32_WINDOWS */, 76 /* LP64_UNIX */, 76 /* X86_64_WINDOWS */ };
//private static final int[] Pad_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] TimeInSeconds_offset = new int[] { 80 /* ARM_MIPS_32 */, 80 /* X86_32_UNIX */, 80 /* X86_32_MACOS */, 80 /* PPC_32_UNIX */, 80 /* SPARC_32_SUNOS */, 80 /* X86_32_WINDOWS */, 80 /* LP64_UNIX */, 80 /* X86_64_WINDOWS */ };
//private static final int[] TimeInSeconds_size = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };

  public static int size() {
    return ovrPoseStatef_size[mdIdx];
  }

  public static ovrPoseStatef create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static ovrPoseStatef create(java.nio.ByteBuffer buf) {
      return new ovrPoseStatef(buf);
  }

  ovrPoseStatef(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Getter for native field <code>ThePose</code>: CType[(StructType) typedef 'ovrPosef', size [fixed false, lnx64 28], [const[false], struct{ovrPosef_: 2, }]] */
  public ovrPosef getThePose() {
    return ovrPosef.create( accessor.slice( ThePose_offset[mdIdx], ThePose_size[mdIdx] ) );
 }

  /** Getter for native field <code>AngularVelocity</code>: CType[(StructType) typedef 'ovrVector3f', size [fixed false, lnx64 12], [const[false], struct{ovrVector3f_: 3, }]] */
  public ovrVector3f getAngularVelocity() {
    return ovrVector3f.create( accessor.slice( AngularVelocity_offset[mdIdx], AngularVelocity_size[mdIdx] ) );
 }

  /** Getter for native field <code>LinearVelocity</code>: CType[(StructType) typedef 'ovrVector3f', size [fixed false, lnx64 12], [const[false], struct{ovrVector3f_: 3, }]] */
  public ovrVector3f getLinearVelocity() {
    return ovrVector3f.create( accessor.slice( LinearVelocity_offset[mdIdx], LinearVelocity_size[mdIdx] ) );
 }

  /** Getter for native field <code>AngularAcceleration</code>: CType[(StructType) typedef 'ovrVector3f', size [fixed false, lnx64 12], [const[false], struct{ovrVector3f_: 3, }]] */
  public ovrVector3f getAngularAcceleration() {
    return ovrVector3f.create( accessor.slice( AngularAcceleration_offset[mdIdx], AngularAcceleration_size[mdIdx] ) );
 }

  /** Getter for native field <code>LinearAcceleration</code>: CType[(StructType) typedef 'ovrVector3f', size [fixed false, lnx64 12], [const[false], struct{ovrVector3f_: 3, }]] */
  public ovrVector3f getLinearAcceleration() {
    return ovrVector3f.create( accessor.slice( LinearAcceleration_offset[mdIdx], LinearAcceleration_size[mdIdx] ) );
 }

  /** Setter for native field <code>Pad</code>: CType[(FloatType) 'float', size [fixed true, lnx64 4], [const[false], float]] */
  public ovrPoseStatef setPad(float val) {
    accessor.setFloatAt(Pad_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>Pad</code>: CType[(FloatType) 'float', size [fixed true, lnx64 4], [const[false], float]] */
  public float getPad() {
    return accessor.getFloatAt(Pad_offset[mdIdx]);
  }

  /** Setter for native field <code>TimeInSeconds</code>: CType[(DoubleType) 'double', size [fixed true, lnx64 8], [const[false], double]] */
  public ovrPoseStatef setTimeInSeconds(double val) {
    accessor.setDoubleAt(TimeInSeconds_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>TimeInSeconds</code>: CType[(DoubleType) 'double', size [fixed true, lnx64 8], [const[false], double]] */
  public double getTimeInSeconds() {
    return accessor.getDoubleAt(TimeInSeconds_offset[mdIdx]);
  }
}
