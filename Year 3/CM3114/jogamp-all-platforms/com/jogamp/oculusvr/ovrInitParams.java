/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Sat Oct 10 03:31:12 CEST 2015 ----! */


package com.jogamp.oculusvr;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.oculusvr.*;
import java.security.AccessController;
import java.security.PrivilegedAction;

public class ovrInitParams {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] ovrInitParams_size = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */  };
  private static final int[] Flags_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
//private static final int[] Flags_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] RequestedMinorVersion_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */ };
//private static final int[] RequestedMinorVersion_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] ConnectionTimeoutMS_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */ };
//private static final int[] ConnectionTimeoutMS_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };

  public static int size() {
    return ovrInitParams_size[mdIdx];
  }

  public static ovrInitParams create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static ovrInitParams create(java.nio.ByteBuffer buf) {
      return new ovrInitParams(buf);
  }

  ovrInitParams(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Setter for native field <code>Flags</code>: CType[(IntType) typedef 'uint32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public ovrInitParams setFlags(int val) {
    accessor.setIntAt(Flags_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>Flags</code>: CType[(IntType) typedef 'uint32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public int getFlags() {
    return accessor.getIntAt(Flags_offset[mdIdx]);
  }

  /** Setter for native field <code>RequestedMinorVersion</code>: CType[(IntType) typedef 'uint32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public ovrInitParams setRequestedMinorVersion(int val) {
    accessor.setIntAt(RequestedMinorVersion_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>RequestedMinorVersion</code>: CType[(IntType) typedef 'uint32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public int getRequestedMinorVersion() {
    return accessor.getIntAt(RequestedMinorVersion_offset[mdIdx]);
  }

  /** Setter for native field <code>ConnectionTimeoutMS</code>: CType[(IntType) typedef 'uint32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public ovrInitParams setConnectionTimeoutMS(int val) {
    accessor.setIntAt(ConnectionTimeoutMS_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>ConnectionTimeoutMS</code>: CType[(IntType) typedef 'uint32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public int getConnectionTimeoutMS() {
    return accessor.getIntAt(ConnectionTimeoutMS_offset[mdIdx]);
  }
}
