/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Sat Oct 10 03:13:14 CEST 2015 ----! */

package com.jogamp.opengl;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import java.io.PrintStream;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <p> 
  * Interface containing the common subset of GL3, GL2 and GLES2.<br/>
  * This interface reflects only the programmable shader functionality of desktop and embedded OpenGL<br/>
  * This interface is almost GLES2 complete.<br/>
  * </p>
  */
public interface GL2ES2 extends GL{

  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_SHADER_KHR</code> - CType: int */
  public static final int GL_SHADER = 0x82e1;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>GL_CURRENT_VERTEX_ATTRIB_ARB</code> - CType: int */
  public static final int GL_CURRENT_VERTEX_ATTRIB = 0x8626;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_vertex_shader</code>, <code>GL_ARB_vertex_shader</code><br>Alias for: <code>GL_VERTEX_SHADER_EXT</code>, <code>GL_VERTEX_SHADER_ARB</code> - CType: int */
  public static final int GL_VERTEX_SHADER = 0x8b31;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code>, <code>GL_AMD_debug_output</code><br>Alias for: <code>GL_MAX_DEBUG_MESSAGE_LENGTH_KHR</code>, <code>GL_MAX_DEBUG_MESSAGE_LENGTH_ARB</code>, <code>GL_MAX_DEBUG_MESSAGE_LENGTH_AMD</code> - CType: int */
  public static final int GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER1_NV</code>, <code>GL_DRAW_BUFFER1_ATI</code>, <code>GL_DRAW_BUFFER1_EXT</code>, <code>GL_DRAW_BUFFER1_ARB</code> - CType: int */
  public static final int GL_DRAW_BUFFER1 = 0x8826;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8dfd;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_QUERY_KHR</code> - CType: int */
  public static final int GL_QUERY = 0x82e3;
  /** <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>GL_VERTEX_SHADER_BIT_EXT</code> - CType: int */
  public static final int GL_VERTEX_SHADER_BIT = 0x1;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910f;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_separate_stencil</code><br>Alias for: <code>GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI</code> - CType: int */
  public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
  /** <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>GL_ACTIVE_PROGRAM_EXT</code> - CType: int */
  public static final int GL_ACTIVE_PROGRAM = 0x8259;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT5_EXT</code>, <code>GL_COLOR_ATTACHMENT5_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT5 = 0x8ce5;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB</code>, <code>GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR</code> - CType: int */
  public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_separate_stencil</code><br>Alias for: <code>GL_STENCIL_BACK_FUNC_ATI</code> - CType: int */
  public static final int GL_STENCIL_BACK_FUNC = 0x8800;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_COMPILE_STATUS = 0x8b81;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_GROUP_STACK_DEPTH_KHR</code> - CType: int */
  public static final int GL_DEBUG_GROUP_STACK_DEPTH = 0x826d;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_FLOAT_VEC2_ARB</code> - CType: int */
  public static final int GL_FLOAT_VEC2 = 0x8b50;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_FLOAT_VEC4_ARB</code> - CType: int */
  public static final int GL_FLOAT_VEC4 = 0x8b52;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_FLOAT_VEC3_ARB</code> - CType: int */
  public static final int GL_FLOAT_VEC3 = 0x8b51;
  /** <code>GL_ARB_timer_query</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_disjoint_timer_query</code><br>Alias for: <code>GL_TIMESTAMP_EXT</code> - CType: int */
  public static final int GL_TIMESTAMP = 0x8e28;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_MAX_LABEL_LENGTH_KHR</code> - CType: int */
  public static final int GL_MAX_LABEL_LENGTH = 0x82e8;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_DEBUG_SOURCE_OTHER_KHR</code>, <code>GL_DEBUG_SOURCE_OTHER_ARB</code> - CType: int */
  public static final int GL_DEBUG_SOURCE_OTHER = 0x824b;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_CURRENT_PROGRAM = 0x8b8d;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER10_ATI</code>, <code>GL_DRAW_BUFFER10_NV</code>, <code>GL_DRAW_BUFFER10_EXT</code>, <code>GL_DRAW_BUFFER10_ARB</code> - CType: int */
  public static final int GL_DRAW_BUFFER10 = 0x882f;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_SHADER_SOURCE_LENGTH = 0x8b88;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_shadow_samplers</code><br>Alias for: <code>GL_COMPARE_REF_TO_TEXTURE_EXT</code> - CType: int */
  public static final int GL_COMPARE_REF_TO_TEXTURE = 0x884e;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_COLOR_ATTACHMENT12_NV</code>, <code>GL_COLOR_ATTACHMENT12_EXT</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT12 = 0x8cec;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER14_EXT</code>, <code>GL_DRAW_BUFFER14_ARB</code>, <code>GL_DRAW_BUFFER14_ATI</code>, <code>GL_DRAW_BUFFER14_NV</code> - CType: int */
  public static final int GL_DRAW_BUFFER14 = 0x8833;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_TYPE_PUSH_GROUP_KHR</code> - CType: int */
  public static final int GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_SHADER_BINARY_FORMATS = 0x8df8;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_OES_texture_3D</code><br>Alias for: <code>GL_TEXTURE_BINDING_3D_OES</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_3D = 0x806a;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_CONTEXT_FLAG_DEBUG_BIT_KHR</code> - CType: int */
  public static final int GL_CONTEXT_FLAG_DEBUG_BIT = 0x2;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_STENCIL_BACK_VALUE_MASK = 0x8ca4;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_ATI_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER8_NV</code>, <code>GL_DRAW_BUFFER8_EXT</code>, <code>GL_DRAW_BUFFER8_ARB</code>, <code>GL_DRAW_BUFFER8_ATI</code> - CType: int */
  public static final int GL_DRAW_BUFFER8 = 0x882d;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_VERSION_ES_1_0</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_STACK_UNDERFLOW_KHR</code> - CType: int */
  public static final int GL_STACK_UNDERFLOW = 0x504;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_NV_texture_border_clamp</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>GL_TEXTURE_BORDER_COLOR_OES</code>, <code>GL_TEXTURE_BORDER_COLOR_NV</code>, <code>GL_TEXTURE_BORDER_COLOR_EXT</code> - CType: int */
  public static final int GL_TEXTURE_BORDER_COLOR = 0x1004;
  /** <code>GL_EXT_disjoint_timer_query</code><br>Alias for: <code>GL_GPU_DISJOINT_EXT</code> - CType: int */
  public static final int GL_GPU_DISJOINT = 0x8fbb;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_MAX_VARYING_VECTORS = 0x8dfc;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_COLOR_ATTACHMENT9_NV</code>, <code>GL_COLOR_ATTACHMENT9_EXT</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT9 = 0x8ce9;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_EXT_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER4_ATI</code>, <code>GL_DRAW_BUFFER4_NV</code>, <code>GL_DRAW_BUFFER4_ARB</code>, <code>GL_DRAW_BUFFER4_EXT</code> - CType: int */
  public static final int GL_DRAW_BUFFER4 = 0x8829;
  /** <code>GL_OES_vertex_type_10_10_10_2</code><br>Alias for: <code>GL_INT_10_10_10_2_OES</code> - CType: int */
  public static final int GL_INT_10_10_10_2 = 0x8df7;
  /** <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_ARB_vertex_buffer_object</code><br>Alias for: <code>GL_STREAM_DRAW_ARB</code> - CType: int */
  public static final int GL_STREAM_DRAW = 0x88e0;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_internalformat_sample_query</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_OES_texture_storage_multisample_2d_array</code><br>Alias for: <code>GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES</code> - CType: int */
  public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_ATTACHED_SHADERS = 0x8b85;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_LOW_INT = 0x8df3;
  /** <code>GL_KHR_blend_equation_advanced_coherent</code> - CType: int */
  public static final int GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886a;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910e;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8b8a;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_STENCIL_BACK_WRITEMASK = 0x8ca5;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_OES_texture_storage_multisample_2d_array</code><br>Alias for: <code>GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES</code> - CType: int */
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910c;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_separate_stencil</code><br>Alias for: <code>GL_STENCIL_BACK_FAIL_ATI</code> - CType: int */
  public static final int GL_STENCIL_BACK_FAIL = 0x8801;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_MEDIUM_FLOAT = 0x8df1;
  /** <code>GL_DMP_shader_binary</code> - CType: int */
  public static final int GL_SHADER_BINARY_DMP = 0x9250;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR</code>, <code>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB</code> - CType: int */
  public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code>, <code>GL_AMD_debug_output</code><br>Alias for: <code>GL_DEBUG_SEVERITY_HIGH_ARB</code>, <code>GL_DEBUG_SEVERITY_HIGH_KHR</code>, <code>GL_DEBUG_SEVERITY_HIGH_AMD</code> - CType: int */
  public static final int GL_DEBUG_SEVERITY_HIGH = 0x9146;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_SOURCE_API_ARB</code>, <code>GL_DEBUG_SOURCE_API_KHR</code> - CType: int */
  public static final int GL_DEBUG_SOURCE_API = 0x8246;
  /** <code>GL_ARB_get_program_binary</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_4_1</code>, <code>GL_OES_get_program_binary</code><br>Alias for: <code>GL_NUM_PROGRAM_BINARY_FORMATS_OES</code> - CType: int */
  public static final int GL_NUM_PROGRAM_BINARY_FORMATS = 0x87fe;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_SAMPLER_2D_ARB</code> - CType: int */
  public static final int GL_SAMPLER_2D = 0x8b5e;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_STENCIL_BACK_REF = 0x8ca3;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_INT = 0x1404;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_MEDIUM_INT = 0x8df4;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_shadow_samplers</code>, <code>GL_ARB_shadow</code><br>Alias for: <code>GL_TEXTURE_COMPARE_MODE_EXT</code>, <code>GL_TEXTURE_COMPARE_MODE_ARB</code> - CType: int */
  public static final int GL_TEXTURE_COMPARE_MODE = 0x884c;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_VALIDATE_STATUS = 0x8b83;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_AMD_debug_output</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_MAX_DEBUG_LOGGED_MESSAGES_AMD</code>, <code>GL_MAX_DEBUG_LOGGED_MESSAGES_KHR</code>, <code>GL_MAX_DEBUG_LOGGED_MESSAGES_ARB</code> - CType: int */
  public static final int GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT4_EXT</code>, <code>GL_COLOR_ATTACHMENT4_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT4 = 0x8ce4;
  /** <code>GL_ARB_timer_query</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_EXT_timer_query</code><br>Alias for: <code>GL_TIME_ELAPSED_EXT</code> - CType: int */
  public static final int GL_TIME_ELAPSED = 0x88bf;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_COLOR_ATTACHMENT10_NV</code>, <code>GL_COLOR_ATTACHMENT10_EXT</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT10 = 0x8cea;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_SOURCE_SHADER_COMPILER_ARB</code>, <code>GL_DEBUG_SOURCE_SHADER_COMPILER_KHR</code> - CType: int */
  public static final int GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_SEVERITY_NOTIFICATION_KHR</code> - CType: int */
  public static final int GL_DEBUG_SEVERITY_NOTIFICATION = 0x826b;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_SGIS_multisample</code>, <code>GL_NV_explicit_multisample</code>, <code>GL_EXT_multisample</code><br>Alias for: <code>GL_SAMPLE_MASK_VALUE_SGIS</code>, <code>GL_SAMPLE_MASK_VALUE_NV</code>, <code>GL_SAMPLE_MASK_VALUE_EXT</code> - CType: int */
  public static final int GL_SAMPLE_MASK_VALUE = 0x8e52;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER0_EXT</code>, <code>GL_DRAW_BUFFER0_ARB</code>, <code>GL_DRAW_BUFFER0_ATI</code>, <code>GL_DRAW_BUFFER0_NV</code> - CType: int */
  public static final int GL_DRAW_BUFFER0 = 0x8825;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shading_language_100</code><br>Alias for: <code>GL_SHADING_LANGUAGE_VERSION_ARB</code> - CType: int */
  public static final int GL_SHADING_LANGUAGE_VERSION = 0x8b8c;
  /** <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>GL_CURRENT_QUERY_EXT</code>, <code>GL_CURRENT_QUERY_ARB</code> - CType: int */
  public static final int GL_CURRENT_QUERY = 0x8865;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_color_buffer_half_float</code>, <code>GL_ARB_texture_float</code><br>Alias for: <code>GL_UNSIGNED_NORMALIZED_EXT</code>, <code>GL_UNSIGNED_NORMALIZED_ARB</code> - CType: int */
  public static final int GL_UNSIGNED_NORMALIZED = 0x8c17;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_IMG_multisampled_render_to_texture</code><br>Alias for: <code>GL_TEXTURE_SAMPLES_IMG</code> - CType: int */
  public static final int GL_TEXTURE_SAMPLES = 0x9106;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_AMD_debug_output</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_DEBUG_LOGGED_MESSAGES_KHR</code>, <code>GL_DEBUG_LOGGED_MESSAGES_AMD</code>, <code>GL_DEBUG_LOGGED_MESSAGES_ARB</code> - CType: int */
  public static final int GL_DEBUG_LOGGED_MESSAGES = 0x9145;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_SAMPLER_CUBE_ARB</code> - CType: int */
  public static final int GL_SAMPLER_CUBE = 0x8b60;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_LOW_FLOAT = 0x8df0;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT1_EXT</code>, <code>GL_COLOR_ATTACHMENT1_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT1 = 0x8ce1;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_DELETE_STATUS = 0x8b80;
  /** <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>GL_QUERY_RESULT_EXT</code>, <code>GL_QUERY_RESULT_ARB</code> - CType: int */
  public static final int GL_QUERY_RESULT = 0x8866;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_TYPE_OTHER_ARB</code>, <code>GL_DEBUG_TYPE_OTHER_KHR</code> - CType: int */
  public static final int GL_DEBUG_TYPE_OTHER = 0x8251;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_COLOR_ATTACHMENT13_NV</code>, <code>GL_COLOR_ATTACHMENT13_EXT</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT13 = 0x8ced;
  /** <code>GL_ARB_imaging</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_EXT_blend_color</code><br>Alias for: <code>GL_BLEND_COLOR_EXT</code> - CType: int */
  public static final int GL_BLEND_COLOR = 0x8005;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_shader</code><br>Alias for: <code>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB</code> - CType: int */
  public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8b4c;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8b87;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER13_EXT</code>, <code>GL_DRAW_BUFFER13_ARB</code>, <code>GL_DRAW_BUFFER13_NV</code>, <code>GL_DRAW_BUFFER13_ATI</code> - CType: int */
  public static final int GL_DRAW_BUFFER13 = 0x8832;
  /** <code>GL_VERSION_3_3</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_occlusion_query2</code>, <code>GL_EXT_occlusion_query_boolean</code><br>Alias for: <code>GL_ANY_SAMPLES_PASSED_EXT</code> - CType: int */
  public static final int GL_ANY_SAMPLES_PASSED = 0x8c2f;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER7_NV</code>, <code>GL_DRAW_BUFFER7_ATI</code>, <code>GL_DRAW_BUFFER7_EXT</code>, <code>GL_DRAW_BUFFER7_ARB</code> - CType: int */
  public static final int GL_DRAW_BUFFER7 = 0x882c;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER3_ATI</code>, <code>GL_DRAW_BUFFER3_NV</code>, <code>GL_DRAW_BUFFER3_EXT</code>, <code>GL_DRAW_BUFFER3_ARB</code> - CType: int */
  public static final int GL_DRAW_BUFFER3 = 0x8828;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_OUTPUT_KHR</code> - CType: int */
  public static final int GL_DEBUG_OUTPUT = 0x92e0;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT8_EXT</code>, <code>GL_COLOR_ATTACHMENT8_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT8 = 0x8ce8;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_OES_texture_storage_multisample_2d_array</code><br>Alias for: <code>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910d;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_EXT_unpack_subimage</code><br>Alias for: <code>GL_UNPACK_SKIP_PIXELS_EXT</code> - CType: int */
  public static final int GL_UNPACK_SKIP_PIXELS = 0xcf4;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_EXT_texture_type_2_10_10_10_REV</code><br>Alias for: <code>GL_UNSIGNED_INT_2_10_10_10_REV_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_OES_texture_storage_multisample_2d_array</code><br>Alias for: <code>GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
  /** <code>GL_ARB_get_program_binary</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_4_1</code>, <code>GL_OES_get_program_binary</code><br>Alias for: <code>GL_PROGRAM_BINARY_LENGTH_OES</code> - CType: int */
  public static final int GL_PROGRAM_BINARY_LENGTH = 0x8741;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_SHADER_COMPILER = 0x8dfa;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code>, <code>GL_AMD_debug_output</code><br>Alias for: <code>GL_DEBUG_SEVERITY_LOW_KHR</code>, <code>GL_DEBUG_SEVERITY_LOW_ARB</code>, <code>GL_DEBUG_SEVERITY_LOW_AMD</code> - CType: int */
  public static final int GL_DEBUG_SEVERITY_LOW = 0x9148;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB</code>, <code>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR</code> - CType: int */
  public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824e;
  /** <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_TYPE_PORTABILITY_ARB</code>, <code>GL_DEBUG_TYPE_PORTABILITY_KHR</code> - CType: int */
  public static final int GL_DEBUG_TYPE_PORTABILITY = 0x824f;
  /** <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
  /** <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>GL_PROGRAM_SEPARABLE_EXT</code> - CType: int */
  public static final int GL_PROGRAM_SEPARABLE = 0x8258;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_BOOL_ARB</code> - CType: int */
  public static final int GL_BOOL = 0x8b56;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_TYPE_ERROR_ARB</code>, <code>GL_DEBUG_TYPE_ERROR_KHR</code> - CType: int */
  public static final int GL_DEBUG_TYPE_ERROR = 0x824c;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_EXT_unpack_subimage</code><br>Alias for: <code>GL_UNPACK_ROW_LENGTH_EXT</code> - CType: int */
  public static final int GL_UNPACK_ROW_LENGTH = 0xcf2;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_HIGH_INT = 0x8df5;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT3_EXT</code>, <code>GL_COLOR_ATTACHMENT3_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT3 = 0x8ce3;
  /** <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>GL_ALL_SHADER_BITS_EXT</code> - CType: long */
  public static final long GL_ALL_SHADER_BITS = 0xffffffffL;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>GL_MAX_VERTEX_ATTRIBS_ARB</code> - CType: int */
  public static final int GL_MAX_VERTEX_ATTRIBS = 0x8869;
  /** <code>GL_ARB_imaging</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_blend_color</code><br>Alias for: <code>GL_CONSTANT_ALPHA_EXT</code> - CType: int */
  public static final int GL_CONSTANT_ALPHA = 0x8003;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_EXT_multisample</code>, <code>GL_NV_explicit_multisample</code>, <code>GL_SGIS_multisample</code><br>Alias for: <code>GL_SAMPLE_MASK_EXT</code>, <code>GL_SAMPLE_MASK_NV</code>, <code>GL_SAMPLE_MASK_SGIS</code> - CType: int */
  public static final int GL_SAMPLE_MASK = 0x8e51;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_OES_texture_3D</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>GL_MAX_3D_TEXTURE_SIZE_OES</code>, <code>GL_MAX_3D_TEXTURE_SIZE_EXT</code> - CType: int */
  public static final int GL_MAX_3D_TEXTURE_SIZE = 0x8073;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_LINK_STATUS = 0x8b82;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_SAMPLER_KHR</code> - CType: int */
  public static final int GL_SAMPLER = 0x82e6;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_shader</code><br>Alias for: <code>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB</code> - CType: int */
  public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8b4d;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_EXT_unpack_subimage</code><br>Alias for: <code>GL_UNPACK_SKIP_ROWS_EXT</code> - CType: int */
  public static final int GL_UNPACK_SKIP_ROWS = 0xcf3;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_shadow_samplers</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_SAMPLER_2D_SHADOW_EXT</code>, <code>GL_SAMPLER_2D_SHADOW_ARB</code> - CType: int */
  public static final int GL_SAMPLER_2D_SHADOW = 0x8b62;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_ACTIVE_UNIFORMS = 0x8b86;
  /** <code>GL_NV_internalformat_sample_query</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_INFO_LOG_LENGTH = 0x8b84;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8dfb;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER6_EXT</code>, <code>GL_DRAW_BUFFER6_ARB</code>, <code>GL_DRAW_BUFFER6_NV</code>, <code>GL_DRAW_BUFFER6_ATI</code> - CType: int */
  public static final int GL_DRAW_BUFFER6 = 0x882b;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_DEPTH_COMPONENT = 0x1902;
  /** <code>GL_KHR_robustness</code>, <code>GL_KHR_robustness</code>, <code>GL_EXT_robustness</code><br>Alias for: <code>GL_CONTEXT_ROBUST_ACCESS_KHR</code>, <code>GL_CONTEXT_ROBUST_ACCESS_EXT</code> - CType: int */
  public static final int GL_CONTEXT_ROBUST_ACCESS = 0x90f3;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_shadow_samplers</code>, <code>GL_ARB_shadow</code><br>Alias for: <code>GL_TEXTURE_COMPARE_FUNC_EXT</code>, <code>GL_TEXTURE_COMPARE_FUNC_ARB</code> - CType: int */
  public static final int GL_TEXTURE_COMPARE_FUNC = 0x884d;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER12_ATI</code>, <code>GL_DRAW_BUFFER12_EXT</code>, <code>GL_DRAW_BUFFER12_ARB</code>, <code>GL_DRAW_BUFFER12_NV</code> - CType: int */
  public static final int GL_DRAW_BUFFER12 = 0x8831;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_texture_rg</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_rg</code><br>Alias for: <code>GL_RG_EXT</code> - CType: int */
  public static final int GL_RG = 0x8227;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_DEBUG_CALLBACK_USER_PARAM_KHR</code>, <code>GL_DEBUG_CALLBACK_USER_PARAM_ARB</code> - CType: int */
  public static final int GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_sparse_texture</code>, <code>GL_VERSION_1_2</code>, <code>GL_OES_texture_3D</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>GL_TEXTURE_3D_OES</code>, <code>GL_TEXTURE_3D_EXT</code> - CType: int */
  public static final int GL_TEXTURE_3D = 0x806f;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
  /** <code>GL_VERSION_1_5</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>GL_QUERY_COUNTER_BITS_EXT</code>, <code>GL_QUERY_COUNTER_BITS_ARB</code> - CType: int */
  public static final int GL_QUERY_COUNTER_BITS = 0x8864;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_PROGRAM_KHR</code> - CType: int */
  public static final int GL_PROGRAM = 0x82e2;
  /** <code>GL_VERSION_1_2</code>, <code>GL_EXT_packed_pixels</code>, <code>GL_OES_vertex_type_10_10_10_2</code><br>Alias for: <code>GL_UNSIGNED_INT_10_10_10_2_EXT</code>, <code>GL_UNSIGNED_INT_10_10_10_2_OES</code> - CType: int */
  public static final int GL_UNSIGNED_INT_10_10_10_2 = 0x8df6;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_BOOL_VEC4_ARB</code> - CType: int */
  public static final int GL_BOOL_VEC4 = 0x8b59;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_BOOL_VEC3_ARB</code> - CType: int */
  public static final int GL_BOOL_VEC3 = 0x8b58;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_BOOL_VEC2_ARB</code> - CType: int */
  public static final int GL_BOOL_VEC2 = 0x8b57;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_BUFFER_KHR</code> - CType: int */
  public static final int GL_BUFFER = 0x82e0;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_SHADER_TYPE = 0x8b4f;
  /** <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>GL_FRAGMENT_SHADER_BIT_EXT</code> - CType: int */
  public static final int GL_FRAGMENT_SHADER_BIT = 0x2;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_ACTIVE_ATTRIBUTES = 0x8b89;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_fragment_program</code>, <code>GL_ARB_fragment_program</code><br>Alias for: <code>GL_MAX_TEXTURE_IMAGE_UNITS_NV</code>, <code>GL_MAX_TEXTURE_IMAGE_UNITS_ARB</code> - CType: int */
  public static final int GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_INT_VEC4_ARB</code> - CType: int */
  public static final int GL_INT_VEC4 = 0x8b55;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_INT_VEC2_ARB</code> - CType: int */
  public static final int GL_INT_VEC2 = 0x8b53;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_INT_VEC3_ARB</code> - CType: int */
  public static final int GL_INT_VEC3 = 0x8b54;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_TYPE_MARKER_KHR</code> - CType: int */
  public static final int GL_DEBUG_TYPE_MARKER = 0x8268;
  /** <code>GL_ARB_imaging</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_blend_color</code><br>Alias for: <code>GL_CONSTANT_COLOR_EXT</code> - CType: int */
  public static final int GL_CONSTANT_COLOR = 0x8001;
  /** <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>GL_QUERY_RESULT_AVAILABLE_EXT</code>, <code>GL_QUERY_RESULT_AVAILABLE_ARB</code> - CType: int */
  public static final int GL_QUERY_RESULT_AVAILABLE = 0x8867;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_TYPE_POP_GROUP_KHR</code> - CType: int */
  public static final int GL_DEBUG_TYPE_POP_GROUP = 0x826a;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_COLOR_ATTACHMENT14_NV</code>, <code>GL_COLOR_ATTACHMENT14_EXT</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT14 = 0x8cee;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT7_EXT</code>, <code>GL_COLOR_ATTACHMENT7_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT7 = 0x8ce7;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_NUM_SHADER_BINARY_FORMATS = 0x8df9;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_VERSION_ES_1_0</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_STACK_OVERFLOW_KHR</code> - CType: int */
  public static final int GL_STACK_OVERFLOW = 0x503;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_SOURCE_THIRD_PARTY_ARB</code>, <code>GL_DEBUG_SOURCE_THIRD_PARTY_KHR</code> - CType: int */
  public static final int GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_1_3</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_ARB_texture_border_clamp</code>, <code>GL_NV_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_SGIS_texture_border_clamp</code><br>Alias for: <code>GL_CLAMP_TO_BORDER_EXT</code>, <code>GL_CLAMP_TO_BORDER_ARB</code>, <code>GL_CLAMP_TO_BORDER_NV</code>, <code>GL_CLAMP_TO_BORDER_OES</code>, <code>GL_CLAMP_TO_BORDER_SGIS</code> - CType: int */
  public static final int GL_CLAMP_TO_BORDER = 0x812d;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_EXT_texture3D</code>, <code>GL_OES_texture_3D</code><br>Alias for: <code>GL_TEXTURE_WRAP_R_EXT</code>, <code>GL_TEXTURE_WRAP_R_OES</code> - CType: int */
  public static final int GL_TEXTURE_WRAP_R = 0x8072;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT6_EXT</code>, <code>GL_COLOR_ATTACHMENT6_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT6 = 0x8ce6;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_NV_explicit_multisample</code><br>Alias for: <code>GL_SAMPLE_POSITION_NV</code> - CType: int */
  public static final int GL_SAMPLE_POSITION = 0x8e50;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER2_NV</code>, <code>GL_DRAW_BUFFER2_ATI</code>, <code>GL_DRAW_BUFFER2_EXT</code>, <code>GL_DRAW_BUFFER2_ARB</code> - CType: int */
  public static final int GL_DRAW_BUFFER2 = 0x8827;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_fbo_color_attachments</code><br>Alias for: <code>GL_MAX_COLOR_ATTACHMENTS_EXT</code>, <code>GL_MAX_COLOR_ATTACHMENTS_NV</code> - CType: int */
  public static final int GL_MAX_COLOR_ATTACHMENTS = 0x8cdf;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_DEBUG_CALLBACK_FUNCTION_ARB</code>, <code>GL_DEBUG_CALLBACK_FUNCTION_KHR</code> - CType: int */
  public static final int GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_ATI_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER9_NV</code>, <code>GL_DRAW_BUFFER9_EXT</code>, <code>GL_DRAW_BUFFER9_ARB</code>, <code>GL_DRAW_BUFFER9_ATI</code> - CType: int */
  public static final int GL_DRAW_BUFFER9 = 0x882e;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_sRGB</code><br>Alias for: <code>GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_color_buffer_half_float</code><br>Alias for: <code>GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
  /** <code>GL_ARB_ES3_compatibility</code>, <code>GL_VERSION_4_3</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_occlusion_query_boolean</code><br>Alias for: <code>GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT</code> - CType: int */
  public static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910a;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER11_ATI</code>, <code>GL_DRAW_BUFFER11_EXT</code>, <code>GL_DRAW_BUFFER11_ARB</code>, <code>GL_DRAW_BUFFER11_NV</code> - CType: int */
  public static final int GL_DRAW_BUFFER11 = 0x8830;
  /** <code>GL_ARB_imaging</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_blend_color</code><br>Alias for: <code>GL_ONE_MINUS_CONSTANT_ALPHA_EXT</code> - CType: int */
  public static final int GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_separate_stencil</code><br>Alias for: <code>GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI</code> - CType: int */
  public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_DEBUG_TYPE_PERFORMANCE_KHR</code>, <code>GL_DEBUG_TYPE_PERFORMANCE_ARB</code> - CType: int */
  public static final int GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_OES_standard_derivatives</code>, <code>GL_ARB_fragment_shader</code><br>Alias for: <code>GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES</code>, <code>GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB</code> - CType: int */
  public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT2_EXT</code>, <code>GL_COLOR_ATTACHMENT2_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT2 = 0x8ce2;
  /** <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>GL_PROGRAM_PIPELINE_BINDING_EXT</code> - CType: int */
  public static final int GL_PROGRAM_PIPELINE_BINDING = 0x825a;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_ATI_draw_buffers</code><br>Alias for: <code>GL_MAX_DRAW_BUFFERS_NV</code>, <code>GL_MAX_DRAW_BUFFERS_EXT</code>, <code>GL_MAX_DRAW_BUFFERS_ARB</code>, <code>GL_MAX_DRAW_BUFFERS_ATI</code> - CType: int */
  public static final int GL_MAX_DRAW_BUFFERS = 0x8824;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_fragment_shader</code>, <code>GL_ARB_fragment_shader</code><br>Alias for: <code>GL_FRAGMENT_SHADER_ATI</code>, <code>GL_FRAGMENT_SHADER_ARB</code> - CType: int */
  public static final int GL_FRAGMENT_SHADER = 0x8b30;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR</code>, <code>GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB</code> - CType: int */
  public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_PROGRAM_PIPELINE_KHR</code> - CType: int */
  public static final int GL_PROGRAM_PIPELINE = 0x82e4;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_DEBUG_SOURCE_APPLICATION_KHR</code>, <code>GL_DEBUG_SOURCE_APPLICATION_ARB</code> - CType: int */
  public static final int GL_DEBUG_SOURCE_APPLICATION = 0x824a;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_NV_explicit_multisample</code><br>Alias for: <code>GL_MAX_SAMPLE_MASK_WORDS_NV</code> - CType: int */
  public static final int GL_MAX_SAMPLE_MASK_WORDS = 0x8e59;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR</code>, <code>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB</code> - CType: int */
  public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824d;
  /** <code>GL_ARB_ES2_compatibility</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_4_1</code> - CType: int */
  public static final int GL_HIGH_FLOAT = 0x8df2;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_NV_draw_buffers</code><br>Alias for: <code>GL_COLOR_ATTACHMENT11_EXT</code>, <code>GL_COLOR_ATTACHMENT11_NV</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT11 = 0x8ceb;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_OES_texture_3D</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_SAMPLER_3D_OES</code>, <code>GL_SAMPLER_3D_ARB</code> - CType: int */
  public static final int GL_SAMPLER_3D = 0x8b5f;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR</code> - CType: int */
  public static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826c;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_OES_texture_storage_multisample_2d_array</code><br>Alias for: <code>GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES</code> - CType: int */
  public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910b;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_COLOR_ATTACHMENT15_NV</code>, <code>GL_COLOR_ATTACHMENT15_EXT</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT15 = 0x8cef;
  /** <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code>, <code>GL_AMD_debug_output</code><br>Alias for: <code>GL_DEBUG_SEVERITY_MEDIUM_KHR</code>, <code>GL_DEBUG_SEVERITY_MEDIUM_ARB</code>, <code>GL_DEBUG_SEVERITY_MEDIUM_AMD</code> - CType: int */
  public static final int GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
  /** <code>GL_ARB_get_program_binary</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_4_1</code>, <code>GL_OES_get_program_binary</code><br>Alias for: <code>GL_PROGRAM_BINARY_FORMATS_OES</code> - CType: int */
  public static final int GL_PROGRAM_BINARY_FORMATS = 0x87ff;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_FLOAT_MAT4_ARB</code> - CType: int */
  public static final int GL_FLOAT_MAT4 = 0x8b5c;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_FLOAT_MAT3_ARB</code> - CType: int */
  public static final int GL_FLOAT_MAT3 = 0x8b5b;
  /** <code>GL_ARB_imaging</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_blend_color</code><br>Alias for: <code>GL_ONE_MINUS_CONSTANT_COLOR_EXT</code> - CType: int */
  public static final int GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_FLOAT_MAT2_ARB</code> - CType: int */
  public static final int GL_FLOAT_MAT2 = 0x8b5a;
  /** <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_MAX_INTEGER_SAMPLES = 0x9110;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_EXT_texture_rg</code><br>Alias for: <code>GL_RED_NV</code>, <code>GL_RED_EXT</code> - CType: int */
  public static final int GL_RED = 0x1903;
  /** <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_2_0</code>, <code>GL_ARB_vertex_buffer_object</code><br>Alias for: <code>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889f;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER5_NV</code>, <code>GL_DRAW_BUFFER5_ATI</code>, <code>GL_DRAW_BUFFER5_EXT</code>, <code>GL_DRAW_BUFFER5_ARB</code> - CType: int */
  public static final int GL_DRAW_BUFFER5 = 0x882a;
  /** <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER15_EXT</code>, <code>GL_DRAW_BUFFER15_ARB</code>, <code>GL_DRAW_BUFFER15_NV</code>, <code>GL_DRAW_BUFFER15_ATI</code> - CType: int */
  public static final int GL_DRAW_BUFFER15 = 0x8834;

  /** Entry point to C language function: <code> void {@native glAttachShader}(GLuint program, GLuint shader) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glAttachShader(int program, int shader);

  /** Entry point to C language function: <code> void {@native glBindAttribLocation}(GLuint program, GLuint index, const GLchar *  name) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_shader</code><br>Alias for: <code>glBindAttribLocationARB</code>   */
  public void glBindAttribLocation(int program, int index, String name);

  /** Entry point to C language function: <code> void {@native glBlendColor}(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_VERSION_1_2</code>, <code>GL_EXT_blend_color</code><br>Alias for: <code>glBlendColorEXT</code>   */
  public void glBlendColor(float red, float green, float blue, float alpha);

  /** Entry point to C language function: <code> void {@native glCompileShader}(GLuint shader) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glCompileShaderARB</code>   */
  public void glCompileShader(int shader);

  /** Entry point to C language function: <code> GLuint {@native glCreateProgram}(void) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public int glCreateProgram();

  /** Entry point to C language function: <code> GLuint {@native glCreateShader}(GLenum type) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public int glCreateShader(int type);

  /** Entry point to C language function: <code> void {@native glDeleteProgram}(GLuint program) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glDeleteProgram(int program);

  /** Entry point to C language function: <code> void {@native glDeleteShader}(GLuint shader) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glDeleteShader(int shader);

  /** Entry point to C language function: <code> void {@native glDetachShader}(GLuint program, GLuint shader) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glDetachShader(int program, int shader);

  /** Entry point to C language function: <code> void {@native glDisableVertexAttribArray}(GLuint index) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glDisableVertexAttribArrayARB</code>   */
  public void glDisableVertexAttribArray(int index);

  /** Entry point to C language function: <code> void {@native glEnableVertexAttribArray}(GLuint index) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glEnableVertexAttribArrayARB</code>   */
  public void glEnableVertexAttribArray(int index);

  /** Entry point to C language function: <code> void {@native glGetActiveAttrib}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLchar *  name) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_shader</code><br>Alias for: <code>glGetActiveAttribARB</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param size a direct or array-backed {@link java.nio.IntBuffer}
      @param type a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveAttrib(int program, int index, int bufSize, IntBuffer length, IntBuffer size, IntBuffer type, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveAttrib}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLchar *  name) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_shader</code><br>Alias for: <code>glGetActiveAttribARB</code>   */
  public void glGetActiveAttrib(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveUniform}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLchar *  name) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetActiveUniformARB</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param size a direct or array-backed {@link java.nio.IntBuffer}
      @param type a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveUniform(int program, int index, int bufSize, IntBuffer length, IntBuffer size, IntBuffer type, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveUniform}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLchar *  name) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetActiveUniformARB</code>   */
  public void glGetActiveUniform(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetAttachedShaders}(GLuint program, GLsizei maxCount, GLsizei *  count, GLuint *  shaders) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>
      @param count a direct or array-backed {@link java.nio.IntBuffer}
      @param shaders a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetAttachedShaders(int program, int maxCount, IntBuffer count, IntBuffer shaders);

  /** Entry point to C language function: <code> void {@native glGetAttachedShaders}(GLuint program, GLsizei maxCount, GLsizei *  count, GLuint *  shaders) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glGetAttachedShaders(int program, int maxCount, int[] count, int count_offset, int[] shaders, int shaders_offset);

  /** Entry point to C language function: <code> GLint {@native glGetAttribLocation}(GLuint program, const GLchar *  name) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_shader</code><br>Alias for: <code>glGetAttribLocationARB</code>   */
  public int glGetAttribLocation(int program, String name);

  /** Entry point to C language function: <code> void {@native glGetProgramiv}(GLuint program, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_ARB_fragment_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glGetProgramivARB</code>, <code>glGetProgramivNV</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramiv(int program, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramiv}(GLuint program, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_ARB_fragment_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glGetProgramivARB</code>, <code>glGetProgramivNV</code>   */
  public void glGetProgramiv(int program, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramInfoLog}(GLuint program, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param infoLog a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetProgramInfoLog(int program, int bufSize, IntBuffer length, ByteBuffer infoLog);

  /** Entry point to C language function: <code> void {@native glGetProgramInfoLog}(GLuint program, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glGetProgramInfoLog(int program, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point to C language function: <code> void {@native glGetShaderiv}(GLuint shader, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetShaderiv(int shader, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetShaderiv}(GLuint shader, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glGetShaderiv(int shader, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetShaderInfoLog}(GLuint shader, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param infoLog a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetShaderInfoLog(int shader, int bufSize, IntBuffer length, ByteBuffer infoLog);

  /** Entry point to C language function: <code> void {@native glGetShaderInfoLog}(GLuint shader, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glGetShaderInfoLog(int shader, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point to C language function: <code> void {@native glGetShaderSource}(GLuint shader, GLsizei bufSize, GLsizei *  length, GLchar *  source) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetShaderSourceARB</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param source a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetShaderSource(int shader, int bufSize, IntBuffer length, ByteBuffer source);

  /** Entry point to C language function: <code> void {@native glGetShaderSource}(GLuint shader, GLsizei bufSize, GLsizei *  length, GLchar *  source) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetShaderSourceARB</code>   */
  public void glGetShaderSource(int shader, int bufSize, int[] length, int length_offset, byte[] source, int source_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformfv}(GLuint program, GLint location, GLfloat *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetUniformfvARB</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetUniformfv(int program, int location, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformfv}(GLuint program, GLint location, GLfloat *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetUniformfvARB</code>   */
  public void glGetUniformfv(int program, int location, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformiv}(GLuint program, GLint location, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetUniformivARB</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetUniformiv(int program, int location, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformiv}(GLuint program, GLint location, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetUniformivARB</code>   */
  public void glGetUniformiv(int program, int location, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLint {@native glGetUniformLocation}(GLuint program, const GLchar *  name) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glGetUniformLocationARB</code>   */
  public int glGetUniformLocation(int program, String name);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribfv}(GLuint index, GLenum pname, GLfloat *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glGetVertexAttribfvARB</code>, <code>glGetVertexAttribfvNV</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetVertexAttribfv(int index, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribfv}(GLuint index, GLenum pname, GLfloat *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glGetVertexAttribfvARB</code>, <code>glGetVertexAttribfvNV</code>   */
  public void glGetVertexAttribfv(int index, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribiv}(GLuint index, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glGetVertexAttribivNV</code>, <code>glGetVertexAttribivARB</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVertexAttribiv(int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribiv}(GLuint index, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glGetVertexAttribivNV</code>, <code>glGetVertexAttribivARB</code>   */
  public void glGetVertexAttribiv(int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsProgram}(GLuint program) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_ARB_fragment_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glIsProgramARB</code>, <code>glIsProgramNV</code>   */
  public boolean glIsProgram(int program);

  /** Entry point to C language function: <code> GLboolean {@native glIsShader}(GLuint shader) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public boolean glIsShader(int shader);

  /** Entry point to C language function: <code> void {@native glLinkProgram}(GLuint program) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glLinkProgramARB</code>   */
  public void glLinkProgram(int program);

  /** Entry point to C language function: <code> void {@native glShaderSource}(GLuint shader, GLsizei count, const GLchar * const  *  string, const GLint *  length) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glShaderSourceARB</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glShaderSource(int shader, int count, String[] string, IntBuffer length);

  /** Entry point to C language function: <code> void {@native glShaderSource}(GLuint shader, GLsizei count, const GLchar * const  *  string, const GLint *  length) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glShaderSourceARB</code>   */
  public void glShaderSource(int shader, int count, String[] string, int[] length, int length_offset);

  /** Entry point to C language function: <code> void {@native glStencilFuncSeparate}(GLenum face, GLenum func, GLint ref, GLuint mask) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_separate_stencil</code><br>Alias for: <code>glStencilFuncSeparateATI</code>   */
  public void glStencilFuncSeparate(int face, int func, int ref, int mask);

  /** Entry point to C language function: <code> void {@native glStencilMaskSeparate}(GLenum face, GLuint mask) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glStencilMaskSeparate(int face, int mask);

  /** Entry point to C language function: <code> void {@native glStencilOpSeparate}(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ATI_separate_stencil</code><br>Alias for: <code>glStencilOpSeparateATI</code>   */
  public void glStencilOpSeparate(int face, int sfail, int dpfail, int dppass);

  /** Entry point to C language function: <code> void {@native glUniform1f}(GLint location, GLfloat v0) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform1fARB</code>   */
  public void glUniform1f(int location, float v0);

  /** Entry point to C language function: <code> void {@native glUniform1fv}(GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform1fvARB</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniform1fv(int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1fv}(GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform1fvARB</code>   */
  public void glUniform1fv(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform1i}(GLint location, GLint v0) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform1iARB</code>   */
  public void glUniform1i(int location, int v0);

  /** Entry point to C language function: <code> void {@native glUniform1iv}(GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform1ivARB</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform1iv(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1iv}(GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform1ivARB</code>   */
  public void glUniform1iv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2f}(GLint location, GLfloat v0, GLfloat v1) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform2fARB</code>   */
  public void glUniform2f(int location, float v0, float v1);

  /** Entry point to C language function: <code> void {@native glUniform2fv}(GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform2fvARB</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniform2fv(int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2fv}(GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform2fvARB</code>   */
  public void glUniform2fv(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2i}(GLint location, GLint v0, GLint v1) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform2iARB</code>   */
  public void glUniform2i(int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glUniform2iv}(GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform2ivARB</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform2iv(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2iv}(GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform2ivARB</code>   */
  public void glUniform2iv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3f}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform3fARB</code>   */
  public void glUniform3f(int location, float v0, float v1, float v2);

  /** Entry point to C language function: <code> void {@native glUniform3fv}(GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform3fvARB</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniform3fv(int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3fv}(GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform3fvARB</code>   */
  public void glUniform3fv(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3i}(GLint location, GLint v0, GLint v1, GLint v2) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform3iARB</code>   */
  public void glUniform3i(int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glUniform3iv}(GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform3ivARB</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform3iv(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3iv}(GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform3ivARB</code>   */
  public void glUniform3iv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4f}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform4fARB</code>   */
  public void glUniform4f(int location, float v0, float v1, float v2, float v3);

  /** Entry point to C language function: <code> void {@native glUniform4fv}(GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform4fvARB</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniform4fv(int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4fv}(GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform4fvARB</code>   */
  public void glUniform4fv(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4i}(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform4iARB</code>   */
  public void glUniform4i(int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glUniform4iv}(GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform4ivARB</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform4iv(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4iv}(GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniform4ivARB</code>   */
  public void glUniform4iv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniformMatrix2fvARB</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix2fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniformMatrix2fvARB</code>   */
  public void glUniformMatrix2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniformMatrix3fvARB</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix3fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniformMatrix3fvARB</code>   */
  public void glUniformMatrix3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniformMatrix4fvARB</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix4fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glUniformMatrix4fvARB</code>   */
  public void glUniformMatrix4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUseProgram}(GLuint program) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code><br>   */
  public void glUseProgram(int program);

  /** Entry point to C language function: <code> void {@native glValidateProgram}(GLuint program) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>glValidateProgramARB</code>   */
  public void glValidateProgram(int program);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1f}(GLuint index, GLfloat x) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib1fARB</code>, <code>glVertexAttrib1fNV</code>   */
  public void glVertexAttrib1f(int index, float x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1fv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib1fvNV</code>, <code>glVertexAttrib1fvARB</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexAttrib1fv(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1fv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib1fvNV</code>, <code>glVertexAttrib1fvARB</code>   */
  public void glVertexAttrib1fv(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2f}(GLuint index, GLfloat x, GLfloat y) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib2fARB</code>, <code>glVertexAttrib2fNV</code>   */
  public void glVertexAttrib2f(int index, float x, float y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2fv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib2fvARB</code>, <code>glVertexAttrib2fvNV</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexAttrib2fv(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2fv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib2fvARB</code>, <code>glVertexAttrib2fvNV</code>   */
  public void glVertexAttrib2fv(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3f}(GLuint index, GLfloat x, GLfloat y, GLfloat z) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib3fARB</code>, <code>glVertexAttrib3fNV</code>   */
  public void glVertexAttrib3f(int index, float x, float y, float z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3fv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib3fvNV</code>, <code>glVertexAttrib3fvARB</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexAttrib3fv(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3fv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib3fvNV</code>, <code>glVertexAttrib3fvARB</code>   */
  public void glVertexAttrib3fv(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4f}(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4fNV</code>, <code>glVertexAttrib4fARB</code>   */
  public void glVertexAttrib4f(int index, float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4fv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4fvNV</code>, <code>glVertexAttrib4fvARB</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexAttrib4fv(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4fv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4fvNV</code>, <code>glVertexAttrib4fvARB</code>   */
  public void glVertexAttrib4fv(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribPointer}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *  pointer) </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttribPointerARB</code>, <code>glVertexAttribPointerNV</code>   */
  public void glVertexAttribPointer(int index, int size, int type, boolean normalized, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTexImage2DMultisample}(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) </code> <br>Part of <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code><br>   */
  public void glTexImage2DMultisample(int target, int samples, int internalformat, int width, int height, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTexImage3DMultisample}(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) </code> <br>Part of <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code><br>   */
  public void glTexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glGetMultisamplefv}(GLenum pname, GLuint index, GLfloat *  val) </code> <br>Part of <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_NV_explicit_multisample</code><br>Alias for: <code>glGetMultisamplefvNV</code>
      @param val a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMultisamplefv(int pname, int index, FloatBuffer val);

  /** Entry point to C language function: <code> void {@native glGetMultisamplefv}(GLenum pname, GLuint index, GLfloat *  val) </code> <br>Part of <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code>, <code>GL_NV_explicit_multisample</code><br>Alias for: <code>glGetMultisamplefvNV</code>   */
  public void glGetMultisamplefv(int pname, int index, float[] val, int val_offset);

  /** Entry point to C language function: <code> void {@native glSampleMaski}(GLuint index, GLbitfield mask) </code> <br>Part of <code>GL_ES_VERSION_3_1</code>, <code>GL_ARB_texture_multisample</code>, <code>GL_VERSION_3_2</code><br>   */
  public void glSampleMaski(int index, int mask);

  /** Entry point to C language function: <code> void {@native glDebugMessageControl}(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>glDebugMessageControlKHR</code>, <code>glDebugMessageControlARB</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDebugMessageControl(int source, int type, int severity, int count, IntBuffer ids, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageControl}(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code>, <code>GL_ARB_debug_output</code><br>Alias for: <code>glDebugMessageControlKHR</code>, <code>glDebugMessageControlARB</code>   */
  public void glDebugMessageControl(int source, int type, int severity, int count, int[] ids, int ids_offset, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageInsert}(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *  buf) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code>, <code>GL_AMD_debug_output</code><br>Alias for: <code>glDebugMessageInsertARB</code>, <code>glDebugMessageInsertKHR</code>, <code>glDebugMessageInsertAMD</code>   */
  public void glDebugMessageInsert(int source, int type, int id, int severity, int length, String buf);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLog}(GLuint count, GLsizei bufSize, GLenum *  sources, GLenum *  types, GLuint *  ids, GLenum *  severities, GLsizei *  lengths, GLchar *  messageLog) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_AMD_debug_output</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glGetDebugMessageLogAMD</code>, <code>glGetDebugMessageLogARB</code>, <code>glGetDebugMessageLogKHR</code>
      @param sources a direct or array-backed {@link java.nio.IntBuffer}
      @param types a direct or array-backed {@link java.nio.IntBuffer}
      @param ids a direct or array-backed {@link java.nio.IntBuffer}
      @param severities a direct or array-backed {@link java.nio.IntBuffer}
      @param lengths a direct or array-backed {@link java.nio.IntBuffer}
      @param messageLog a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetDebugMessageLog(int count, int bufSize, IntBuffer sources, IntBuffer types, IntBuffer ids, IntBuffer severities, IntBuffer lengths, ByteBuffer messageLog);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLog}(GLuint count, GLsizei bufSize, GLenum *  sources, GLenum *  types, GLuint *  ids, GLenum *  severities, GLsizei *  lengths, GLchar *  messageLog) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_AMD_debug_output</code>, <code>GL_ARB_debug_output</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glGetDebugMessageLogAMD</code>, <code>glGetDebugMessageLogARB</code>, <code>glGetDebugMessageLogKHR</code>   */
  public int glGetDebugMessageLog(int count, int bufSize, int[] sources, int sources_offset, int[] types, int types_offset, int[] ids, int ids_offset, int[] severities, int severities_offset, int[] lengths, int lengths_offset, byte[] messageLog, int messageLog_offset);

  /** Entry point to C language function: <code> void {@native glPushDebugGroup}(GLenum source, GLuint id, GLsizei length, const GLchar *  message) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glPushDebugGroupKHR</code>
      @param message a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glPushDebugGroup(int source, int id, int length, ByteBuffer message);

  /** Entry point to C language function: <code> void {@native glPushDebugGroup}(GLenum source, GLuint id, GLsizei length, const GLchar *  message) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glPushDebugGroupKHR</code>   */
  public void glPushDebugGroup(int source, int id, int length, byte[] message, int message_offset);

  /** Entry point to C language function: <code> void {@native glPopDebugGroup}(void) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glPopDebugGroupKHR</code>   */
  public void glPopDebugGroup();

  /** Entry point to C language function: <code> void {@native glObjectLabel}(GLenum identifier, GLuint name, GLsizei length, const GLchar *  label) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glObjectLabelKHR</code>
      @param label a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glObjectLabel(int identifier, int name, int length, ByteBuffer label);

  /** Entry point to C language function: <code> void {@native glObjectLabel}(GLenum identifier, GLuint name, GLsizei length, const GLchar *  label) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glObjectLabelKHR</code>   */
  public void glObjectLabel(int identifier, int name, int length, byte[] label, int label_offset);

  /** Entry point to C language function: <code> void {@native glGetObjectLabel}(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *  length, GLchar *  label) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_EXT_debug_label</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glGetObjectLabelEXT</code>, <code>glGetObjectLabelKHR</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param label a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetObjectLabel(int identifier, int name, int bufSize, IntBuffer length, ByteBuffer label);

  /** Entry point to C language function: <code> void {@native glGetObjectLabel}(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *  length, GLchar *  label) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_EXT_debug_label</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glGetObjectLabelEXT</code>, <code>glGetObjectLabelKHR</code>   */
  public void glGetObjectLabel(int identifier, int name, int bufSize, int[] length, int length_offset, byte[] label, int label_offset);

  /** Entry point to C language function: <code> void {@native glObjectPtrLabel}(const void *  ptr, GLsizei length, const GLchar *  label) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glObjectPtrLabelKHR</code>
      @param ptr a direct or array-backed {@link java.nio.Buffer}
      @param label a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glObjectPtrLabel(Buffer ptr, int length, ByteBuffer label);

  /** Entry point to C language function: <code> void {@native glObjectPtrLabel}(const void *  ptr, GLsizei length, const GLchar *  label) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glObjectPtrLabelKHR</code>
      @param ptr a direct or array-backed {@link java.nio.Buffer}   */
  public void glObjectPtrLabel(Buffer ptr, int length, byte[] label, int label_offset);

  /** Entry point to C language function: <code> void {@native glGetObjectPtrLabel}(const void *  ptr, GLsizei bufSize, GLsizei *  length, GLchar *  label) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glGetObjectPtrLabelKHR</code>
      @param ptr a direct or array-backed {@link java.nio.Buffer}
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param label a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetObjectPtrLabel(Buffer ptr, int bufSize, IntBuffer length, ByteBuffer label);

  /** Entry point to C language function: <code> void {@native glGetObjectPtrLabel}(const void *  ptr, GLsizei bufSize, GLsizei *  length, GLchar *  label) </code> <br>Part of <code>GL_KHR_debug</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code><br>Alias for: <code>glGetObjectPtrLabelKHR</code>
      @param ptr a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetObjectPtrLabel(Buffer ptr, int bufSize, int[] length, int length_offset, byte[] label, int label_offset);

  /** Entry point to C language function: <code> void {@native glCopyImageSubData}(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) </code> <br>Part of <code>GL_ARB_copy_image</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_4_3</code>, <code>GL_NV_copy_image</code>, <code>GL_EXT_copy_image</code>, <code>GL_OES_copy_image</code><br>Alias for: <code>glCopyImageSubDataNV</code>, <code>glCopyImageSubDataEXT</code>, <code>glCopyImageSubDataOES</code>   */
  public void glCopyImageSubData(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

  /** Entry point to C language function: <code> void {@native glGetProgramBinary}(GLuint program, GLsizei bufSize, GLsizei *  length, GLenum *  binaryFormat, void *  binary) </code> <br>Part of <code>GL_ARB_get_program_binary</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_4_1</code>, <code>GL_OES_get_program_binary</code><br>Alias for: <code>glGetProgramBinaryOES</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param binaryFormat a direct or array-backed {@link java.nio.IntBuffer}
      @param binary a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetProgramBinary(int program, int bufSize, IntBuffer length, IntBuffer binaryFormat, Buffer binary);

  /** Entry point to C language function: <code> void {@native glGetProgramBinary}(GLuint program, GLsizei bufSize, GLsizei *  length, GLenum *  binaryFormat, void *  binary) </code> <br>Part of <code>GL_ARB_get_program_binary</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_4_1</code>, <code>GL_OES_get_program_binary</code><br>Alias for: <code>glGetProgramBinaryOES</code>
      @param binary a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetProgramBinary(int program, int bufSize, int[] length, int length_offset, int[] binaryFormat, int binaryFormat_offset, Buffer binary);

  /** Entry point to C language function: <code> void {@native glProgramBinary}(GLuint program, GLenum binaryFormat, const void *  binary, GLint length) </code> <br>Part of <code>GL_ARB_get_program_binary</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_4_1</code>, <code>GL_OES_get_program_binary</code><br>Alias for: <code>glProgramBinaryOES</code>
      @param binary a direct or array-backed {@link java.nio.Buffer}   */
  public void glProgramBinary(int program, int binaryFormat, Buffer binary, int length);

  /** Entry point to C language function: <code> void {@native glTexImage3D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_OES_texture_3D</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>glTexImage3DOES</code>, <code>glTexImage3DEXT</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexImage3D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_OES_texture_3D</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>glTexImage3DOES</code>, <code>glTexImage3DEXT</code>   */
  public void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_OES_texture_3D</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>glTexSubImage3DOES</code>, <code>glTexSubImage3DEXT</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_OES_texture_3D</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>glTexSubImage3DOES</code>, <code>glTexSubImage3DEXT</code>   */
  public void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCopyTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_2</code>, <code>GL_EXT_copy_texture</code>, <code>GL_OES_texture_3D</code><br>Alias for: <code>glCopyTexSubImage3DEXT</code>, <code>glCopyTexSubImage3DOES</code>   */
  public void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage3D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code>, <code>GL_OES_texture_3D</code><br>Alias for: <code>glCompressedTexImage3DARB</code>, <code>glCompressedTexImage3DOES</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage3D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code>, <code>GL_OES_texture_3D</code><br>Alias for: <code>glCompressedTexImage3DARB</code>, <code>glCompressedTexImage3DOES</code>   */
  public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code>, <code>GL_OES_texture_3D</code><br>Alias for: <code>glCompressedTexSubImage3DARB</code>, <code>glCompressedTexSubImage3DOES</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code>, <code>GL_OES_texture_3D</code><br>Alias for: <code>glCompressedTexSubImage3DARB</code>, <code>glCompressedTexSubImage3DOES</code>   */
  public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture3D}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) </code> <br>Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_framebuffer_object</code>, <code>GL_OES_texture_3D</code><br>Alias for: <code>glFramebufferTexture3DEXT</code>, <code>glFramebufferTexture3DOES</code>   */
  public void glFramebufferTexture3D(int target, int attachment, int textarget, int texture, int level, int zoffset);

  /** Entry point to C language function: <code> void {@native glTexParameterIiv}(GLenum target, GLenum pname, const GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_0</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_EXT_texture_integer</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>glTexParameterIivOES</code>, <code>glTexParameterIivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexParameterIiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterIiv}(GLenum target, GLenum pname, const GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_0</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_EXT_texture_integer</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>glTexParameterIivOES</code>, <code>glTexParameterIivEXT</code>   */
  public void glTexParameterIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexParameterIuiv}(GLenum target, GLenum pname, const GLuint *  params) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_integer</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code><br>Alias for: <code>glTexParameterIuivEXT</code>, <code>glTexParameterIuivOES</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexParameterIuiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterIuiv}(GLenum target, GLenum pname, const GLuint *  params) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_integer</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code><br>Alias for: <code>glTexParameterIuivEXT</code>, <code>glTexParameterIuivOES</code>   */
  public void glTexParameterIuiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIiv}(GLenum target, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_0</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_EXT_texture_integer</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>glGetTexParameterIivOES</code>, <code>glGetTexParameterIivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexParameterIiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIiv}(GLenum target, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_0</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_EXT_texture_integer</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>glGetTexParameterIivOES</code>, <code>glGetTexParameterIivEXT</code>   */
  public void glGetTexParameterIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIuiv}(GLenum target, GLenum pname, GLuint *  params) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_0</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_EXT_texture_integer</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>glGetTexParameterIuivOES</code>, <code>glGetTexParameterIuivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexParameterIuiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIuiv}(GLenum target, GLenum pname, GLuint *  params) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_0</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_EXT_texture_integer</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>glGetTexParameterIuivOES</code>, <code>glGetTexParameterIuivEXT</code>   */
  public void glGetTexParameterIuiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glSamplerParameterIiv}(GLuint sampler, GLenum pname, const GLint *  param) </code> <br>Part of <code>GL_ARB_sampler_objects</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code><br>Alias for: <code>glSamplerParameterIivEXT</code>, <code>glSamplerParameterIivOES</code>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSamplerParameterIiv(int sampler, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glSamplerParameterIiv}(GLuint sampler, GLenum pname, const GLint *  param) </code> <br>Part of <code>GL_ARB_sampler_objects</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code><br>Alias for: <code>glSamplerParameterIivEXT</code>, <code>glSamplerParameterIivOES</code>   */
  public void glSamplerParameterIiv(int sampler, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glSamplerParameterIuiv}(GLuint sampler, GLenum pname, const GLuint *  param) </code> <br>Part of <code>GL_ARB_sampler_objects</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code><br>Alias for: <code>glSamplerParameterIuivEXT</code>, <code>glSamplerParameterIuivOES</code>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSamplerParameterIuiv(int sampler, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glSamplerParameterIuiv}(GLuint sampler, GLenum pname, const GLuint *  param) </code> <br>Part of <code>GL_ARB_sampler_objects</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code><br>Alias for: <code>glSamplerParameterIuivEXT</code>, <code>glSamplerParameterIuivOES</code>   */
  public void glSamplerParameterIuiv(int sampler, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterIiv}(GLuint sampler, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_sampler_objects</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code><br>Alias for: <code>glGetSamplerParameterIivEXT</code>, <code>glGetSamplerParameterIivOES</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetSamplerParameterIiv(int sampler, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterIiv}(GLuint sampler, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_sampler_objects</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_texture_border_clamp</code>, <code>GL_OES_texture_border_clamp</code><br>Alias for: <code>glGetSamplerParameterIivEXT</code>, <code>glGetSamplerParameterIivOES</code>   */
  public void glGetSamplerParameterIiv(int sampler, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterIuiv}(GLuint sampler, GLenum pname, GLuint *  params) </code> <br>Part of <code>GL_ARB_sampler_objects</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_3</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>glGetSamplerParameterIuivOES</code>, <code>glGetSamplerParameterIuivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetSamplerParameterIuiv(int sampler, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterIuiv}(GLuint sampler, GLenum pname, GLuint *  params) </code> <br>Part of <code>GL_ARB_sampler_objects</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_3_3</code>, <code>GL_OES_texture_border_clamp</code>, <code>GL_EXT_texture_border_clamp</code><br>Alias for: <code>glGetSamplerParameterIuivOES</code>, <code>glGetSamplerParameterIuivEXT</code>   */
  public void glGetSamplerParameterIuiv(int sampler, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glDrawArraysInstancedBaseInstance}(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) </code> <br>Part of <code>GL_ARB_base_instance</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_base_instance</code><br>Alias for: <code>glDrawArraysInstancedBaseInstanceEXT</code>   */
  public void glDrawArraysInstancedBaseInstance(int mode, int first, int count, int instancecount, int baseinstance);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseInstance}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei instancecount, GLuint baseinstance) </code> <br>Part of <code>GL_ARB_base_instance</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_base_instance</code><br>Alias for: <code>glDrawElementsInstancedBaseInstanceEXT</code>   */
  public void glDrawElementsInstancedBaseInstance(int mode, int count, int type, long indices_buffer_offset, int instancecount, int baseinstance);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseVertexBaseInstance}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) </code> <br>Part of <code>GL_ARB_base_instance</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_base_instance</code><br>Alias for: <code>glDrawElementsInstancedBaseVertexBaseInstanceEXT</code>   */
  public void glDrawElementsInstancedBaseVertexBaseInstance(int mode, int count, int type, long indices_buffer_offset, int instancecount, int basevertex, int baseinstance);

  /** Entry point to C language function: <code> void {@native glGenQueries}(GLsizei n, GLuint *  ids) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glGenQueriesEXT</code>, <code>glGenQueriesARB</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenQueries(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenQueries}(GLsizei n, GLuint *  ids) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glGenQueriesEXT</code>, <code>glGenQueriesARB</code>   */
  public void glGenQueries(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDeleteQueries}(GLsizei n, const GLuint *  ids) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glDeleteQueriesEXT</code>, <code>glDeleteQueriesARB</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteQueries(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteQueries}(GLsizei n, const GLuint *  ids) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glDeleteQueriesEXT</code>, <code>glDeleteQueriesARB</code>   */
  public void glDeleteQueries(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsQuery}(GLuint id) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glIsQueryEXT</code>, <code>glIsQueryARB</code>   */
  public boolean glIsQuery(int id);

  /** Entry point to C language function: <code> void {@native glBeginQuery}(GLenum target, GLuint id) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_occlusion_query</code>, <code>GL_EXT_disjoint_timer_query</code><br>Alias for: <code>glBeginQueryARB</code>, <code>glBeginQueryEXT</code>   */
  public void glBeginQuery(int target, int id);

  /** Entry point to C language function: <code> void {@native glEndQuery}(GLenum target) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glEndQueryEXT</code>, <code>glEndQueryARB</code>   */
  public void glEndQuery(int target);

  /** Entry point to C language function: <code> void {@native glQueryCounter}(GLuint id, GLenum target) </code> <br>Part of <code>GL_ARB_timer_query</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_disjoint_timer_query</code><br>Alias for: <code>glQueryCounterEXT</code>   */
  public void glQueryCounter(int id, int target);

  /** Entry point to C language function: <code> void {@native glGetQueryiv}(GLenum target, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glGetQueryivEXT</code>, <code>glGetQueryivARB</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetQueryiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryiv}(GLenum target, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glGetQueryivEXT</code>, <code>glGetQueryivARB</code>   */
  public void glGetQueryiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectiv}(GLuint id, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ARB_occlusion_query</code>, <code>GL_EXT_disjoint_timer_query</code><br>Alias for: <code>glGetQueryObjectivARB</code>, <code>glGetQueryObjectivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetQueryObjectiv(int id, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectiv}(GLuint id, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ARB_occlusion_query</code>, <code>GL_EXT_disjoint_timer_query</code><br>Alias for: <code>glGetQueryObjectivARB</code>, <code>glGetQueryObjectivEXT</code>   */
  public void glGetQueryObjectiv(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectuiv}(GLuint id, GLenum pname, GLuint *  params) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glGetQueryObjectuivEXT</code>, <code>glGetQueryObjectuivARB</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetQueryObjectuiv(int id, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectuiv}(GLuint id, GLenum pname, GLuint *  params) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>glGetQueryObjectuivEXT</code>, <code>glGetQueryObjectuivARB</code>   */
  public void glGetQueryObjectuiv(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjecti64v}(GLuint id, GLenum pname, GLint64 *  params) </code> <br>Part of <code>GL_ARB_timer_query</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_EXT_timer_query</code><br>Alias for: <code>glGetQueryObjecti64vEXT</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetQueryObjecti64v(int id, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjecti64v}(GLuint id, GLenum pname, GLint64 *  params) </code> <br>Part of <code>GL_ARB_timer_query</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_EXT_timer_query</code><br>Alias for: <code>glGetQueryObjecti64vEXT</code>   */
  public void glGetQueryObjecti64v(int id, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectui64v}(GLuint id, GLenum pname, GLuint64 *  params) </code> <br>Part of <code>GL_ARB_timer_query</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_EXT_timer_query</code><br>Alias for: <code>glGetQueryObjectui64vEXT</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetQueryObjectui64v(int id, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectui64v}(GLuint id, GLenum pname, GLuint64 *  params) </code> <br>Part of <code>GL_ARB_timer_query</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_disjoint_timer_query</code>, <code>GL_EXT_timer_query</code><br>Alias for: <code>glGetQueryObjectui64vEXT</code>   */
  public void glGetQueryObjectui64v(int id, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glActiveShaderProgram}(GLuint pipeline, GLuint program) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glActiveShaderProgramEXT</code>   */
  public void glActiveShaderProgram(int pipeline, int program);

  /** Entry point to C language function: <code> void {@native glBindProgramPipeline}(GLuint pipeline) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glBindProgramPipelineEXT</code>   */
  public void glBindProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> GLuint {@native glCreateShaderProgramv}(GLenum type, GLsizei count, const GLchar *  *  strings) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glCreateShaderProgramvEXT</code>   */
  public int glCreateShaderProgramv(int type, int count, String[] strings);

  /** Entry point to C language function: <code> void {@native glDeleteProgramPipelines}(GLsizei n, const GLuint *  pipelines) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glDeleteProgramPipelinesEXT</code>
      @param pipelines a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteProgramPipelines(int n, IntBuffer pipelines);

  /** Entry point to C language function: <code> void {@native glDeleteProgramPipelines}(GLsizei n, const GLuint *  pipelines) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glDeleteProgramPipelinesEXT</code>   */
  public void glDeleteProgramPipelines(int n, int[] pipelines, int pipelines_offset);

  /** Entry point to C language function: <code> void {@native glGenProgramPipelines}(GLsizei n, GLuint *  pipelines) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glGenProgramPipelinesEXT</code>
      @param pipelines a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenProgramPipelines(int n, IntBuffer pipelines);

  /** Entry point to C language function: <code> void {@native glGenProgramPipelines}(GLsizei n, GLuint *  pipelines) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glGenProgramPipelinesEXT</code>   */
  public void glGenProgramPipelines(int n, int[] pipelines, int pipelines_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineInfoLog}(GLuint pipeline, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glGetProgramPipelineInfoLogEXT</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param infoLog a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetProgramPipelineInfoLog(int pipeline, int bufSize, IntBuffer length, ByteBuffer infoLog);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineInfoLog}(GLuint pipeline, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glGetProgramPipelineInfoLogEXT</code>   */
  public void glGetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineiv}(GLuint pipeline, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glGetProgramPipelineivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramPipelineiv(int pipeline, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineiv}(GLuint pipeline, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glGetProgramPipelineivEXT</code>   */
  public void glGetProgramPipelineiv(int pipeline, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsProgramPipeline}(GLuint pipeline) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glIsProgramPipelineEXT</code>   */
  public boolean glIsProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> void {@native glProgramParameteri}(GLuint program, GLenum pname, GLint value) </code> <br>Part of <code>GL_ARB_get_program_binary</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_separate_shader_objects</code>, <code>GL_ARB_geometry_shader4</code><br>Alias for: <code>glProgramParameteriEXT</code>, <code>glProgramParameteriARB</code>   */
  public void glProgramParameteri(int program, int pname, int value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1f}(GLuint program, GLint location, GLfloat v0) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1fEXT</code>   */
  public void glProgramUniform1f(int program, int location, float v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform1fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1fvEXT</code>   */
  public void glProgramUniform1fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1i}(GLuint program, GLint location, GLint v0) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1iEXT</code>   */
  public void glProgramUniform1i(int program, int location, int v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1iv}(GLuint program, GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1ivEXT</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform1iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1iv}(GLuint program, GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1ivEXT</code>   */
  public void glProgramUniform1iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2f}(GLuint program, GLint location, GLfloat v0, GLfloat v1) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2fEXT</code>   */
  public void glProgramUniform2f(int program, int location, float v0, float v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform2fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2fvEXT</code>   */
  public void glProgramUniform2fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2i}(GLuint program, GLint location, GLint v0, GLint v1) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2iEXT</code>   */
  public void glProgramUniform2i(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2iv}(GLuint program, GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2ivEXT</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform2iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2iv}(GLuint program, GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2ivEXT</code>   */
  public void glProgramUniform2iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3f}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3fEXT</code>   */
  public void glProgramUniform3f(int program, int location, float v0, float v1, float v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform3fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3fvEXT</code>   */
  public void glProgramUniform3fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3i}(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3iEXT</code>   */
  public void glProgramUniform3i(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3iv}(GLuint program, GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3ivEXT</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform3iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3iv}(GLuint program, GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3ivEXT</code>   */
  public void glProgramUniform3iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4f}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4fEXT</code>   */
  public void glProgramUniform4f(int program, int location, float v0, float v1, float v2, float v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform4fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4fvEXT</code>   */
  public void glProgramUniform4fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4i}(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4iEXT</code>   */
  public void glProgramUniform4i(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4iv}(GLuint program, GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4ivEXT</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform4iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4iv}(GLuint program, GLint location, GLsizei count, const GLint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4ivEXT</code>   */
  public void glProgramUniform4iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix2fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix2fvEXT</code>   */
  public void glProgramUniformMatrix2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix3fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix3fvEXT</code>   */
  public void glProgramUniformMatrix3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix4fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix4fvEXT</code>   */
  public void glProgramUniformMatrix4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUseProgramStages}(GLuint pipeline, GLbitfield stages, GLuint program) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glUseProgramStagesEXT</code>   */
  public void glUseProgramStages(int pipeline, int stages, int program);

  /** Entry point to C language function: <code> void {@native glValidateProgramPipeline}(GLuint pipeline) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glValidateProgramPipelineEXT</code>   */
  public void glValidateProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> void {@native glProgramUniform1ui}(GLuint program, GLint location, GLuint v0) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1uiEXT</code>   */
  public void glProgramUniform1ui(int program, int location, int v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform2ui}(GLuint program, GLint location, GLuint v0, GLuint v1) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2uiEXT</code>   */
  public void glProgramUniform2ui(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform3ui}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3uiEXT</code>   */
  public void glProgramUniform3ui(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform4ui}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4uiEXT</code>   */
  public void glProgramUniform4ui(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1uivEXT</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform1uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform1uivEXT</code>   */
  public void glProgramUniform1uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2uivEXT</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform2uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform2uivEXT</code>   */
  public void glProgramUniform2uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3uivEXT</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform3uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform3uivEXT</code>   */
  public void glProgramUniform3uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4uivEXT</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform4uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniform4uivEXT</code>   */
  public void glProgramUniform4uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix2x3fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2x3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix2x3fvEXT</code>   */
  public void glProgramUniformMatrix2x3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix3x2fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3x2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix3x2fvEXT</code>   */
  public void glProgramUniformMatrix3x2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix2x4fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2x4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix2x4fvEXT</code>   */
  public void glProgramUniformMatrix2x4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix4x2fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4x2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix4x2fvEXT</code>   */
  public void glProgramUniformMatrix4x2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix3x4fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3x4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix3x4fvEXT</code>   */
  public void glProgramUniformMatrix3x4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix4x3fvEXT</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4x3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_ES_VERSION_3_1</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code><br>Alias for: <code>glProgramUniformMatrix4x3fvEXT</code>   */
  public void glProgramUniformMatrix4x3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glApplyFramebufferAttachmentCMAAINTEL}(void) </code> <br>Part of <code>GL_INTEL_framebuffer_CMAA</code><br>   */
  public void glApplyFramebufferAttachmentCMAAINTEL();

  /** Entry point to C language function: <code> void {@native glDrawBuffers}(GLsizei n, const GLenum *  bufs) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code><br>Alias for: <code>glDrawBuffersEXT</code>, <code>glDrawBuffersARB</code>, <code>glDrawBuffersNV</code>, <code>glDrawBuffersATI</code>
      @param bufs a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDrawBuffers(int n, IntBuffer bufs);

  /** Entry point to C language function: <code> void {@native glDrawBuffers}(GLsizei n, const GLenum *  bufs) </code> <br>Part of <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_2_0</code>, <code>GL_EXT_draw_buffers</code>, <code>GL_ARB_draw_buffers</code>, <code>GL_NV_draw_buffers</code>, <code>GL_ATI_draw_buffers</code><br>Alias for: <code>glDrawBuffersEXT</code>, <code>glDrawBuffersARB</code>, <code>glDrawBuffersNV</code>, <code>glDrawBuffersATI</code>   */
  public void glDrawBuffers(int n, int[] bufs, int bufs_offset);


  // --- Begin CustomJavaCode .cfg declarations
    /** Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
    public static final int GL_STENCIL_INDEX = 0x1901;
  
    /** Start: GL_ARB_ES2_compatibility functions, which are part of ES2 core as well */
  
    /** Entry point to C language function: 
     * <code> void {@native glReleaseShaderCompiler}(void); </code> 
     * <br>Part of <code>GL_ES_VERSION_2_0</code> and <code>GL_ARB_ES2_compatibility</code>. 
     * <br> Nop if no native implementation is available.   */
    public void glReleaseShaderCompiler();
  
    /** Entry point to C language function: 
     * <code> void {@native glShaderBinary}(GLint n, const GLuint *  shaders, GLenum binaryformat, const void *  binary, GLint length); </code> 
     * <br>Part of <code>GL_ES_VERSION_2_0</code> and <code>GL_ARB_ES2_compatibility</code>. 
     * <br> Throws GLException if no native implementation is available.   */
    public void glShaderBinary(int n, IntBuffer shaders, int binaryformat, Buffer binary, int length);
  
    /** Entry point to C language function: 
     * <code> void {@native glShaderBinary}(GLint n, const GLuint *  shaders, GLenum binaryformat, const void *  binary, GLint length); </code> 
     * <br>Part of <code>GL_ES_VERSION_2_0</code> and <code>GL_ARB_ES2_compatibility</code>. 
     * <br> Throws GLException if no native implementation is available.   */
    public void glShaderBinary(int n, int[] shaders, int shaders_offset, int binaryformat, Buffer binary, int length);
  
    /** Entry point to C language function: 
     * <code> void {@native glGetShaderPrecisionFormat}(GLenum shadertype, GLenum precisiontype, GLint *  range, GLint *  precision); </code> 
     * <br>Part of <code>GL_ES_VERSION_2_0</code> and <code>GL_ARB_ES2_compatibility</code>. 
     * <br> Throws GLException if no native implementation is available.   */
    public void glGetShaderPrecisionFormat(int shadertype, int precisiontype, IntBuffer range, IntBuffer precision);
  
    /** Entry point to C language function: 
     * <code> void {@native glGetShaderPrecisionFormat}(GLenum shadertype, GLenum precisiontype, GLint *  range, GLint *  precision); </code> 
     * <br>Part of <code>GL_ES_VERSION_2_0</code> and <code>GL_ARB_ES2_compatibility</code>. 
     * <br> Throws GLException if no native implementation is available.   */
    public void glGetShaderPrecisionFormat(int shadertype, int precisiontype, int[] range, int range_offset, int[] precision, int precision_offset);
  
    /** Entry point to C language function: 
     * <code> void {@native glDepthRangef}(GLclampf zNear, GLclampf zFar); </code> 
     * <br>Part of <code>GL_ES_VERSION_2_0</code> and <code>GL_ARB_ES2_compatibility</code>. 
     * <br> Calls <code> void {@native glDepthRange}(GLclampd zNear, GLclampd zFar); </code> if no native implementation is available.   */
    public void glDepthRangef(float zNear, float zFar);
  
    public void glDepthRange(double zNear, double zFar);
  
    /** Entry point to C language function: 
     * <code> void {@native glClearDepthf}(GLclampf depth); </code> 
     * <br>Part of <code>GL_ES_VERSION_2_0</code> and <code>GL_ARB_ES2_compatibility</code>. 
     * <br> Calls <code> void {@native glClearDepth}(GLclampd depth); </code> if no native implementation is available.   */
    public void glClearDepthf(float depth);
  
    public void glClearDepth( double depth );
  
    public void glVertexAttribPointer(GLArrayData array);
  
    public void glUniform(GLUniformData data);
  
    /** End: GL_ARB_ES2_compatibility functions, which are part of ES2 core as well */
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL2ES2
