/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Sat Oct 10 03:18:33 CEST 2015 ----! */

package com.jogamp.opengl;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <p>This interface contains all OpenGL [ 4.0 .. 4.5 ] <i>core</i> methods,
  * as well as most of it's extensions defined at the time of this specification.</p>
  * <p>Note: OpenGL [ 4.0 .. 4.5 ] core profile does not includes fixed point functionality.</p>
  */
public interface GL4 extends GL4ES3, GL3{

  /** <code>GL_VERSION_4_4</code>, <code>GL_EXT_buffer_storage</code><br>Alias for: <code>GL_MAP_PERSISTENT_BIT_EXT</code> - CType: int */
  public static final int GL_MAP_PERSISTENT_BIT = 0x40;
  /** <code>GL_ARB_bindless_texture</code> - CType: int */
  public static final int GL_UNSIGNED_INT64_ARB = 0x140f;
  /** <code>GL_ARB_compute_shader</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ed;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_QUERY_TARGET = 0x82ea;
  /** <code>GL_ARB_indirect_parameters</code> - CType: int */
  public static final int GL_PARAMETER_BUFFER_ARB = 0x80ee;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_texture_compression_bptc</code><br>Alias for: <code>GL_COMPRESSED_RGBA_BPTC_UNORM_ARB</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8e8c;
  /** <code>GL_VERSION_4_4</code>, <code>GL_AMD_query_buffer_object</code><br>Alias for: <code>GL_QUERY_BUFFER_AMD</code> - CType: int */
  public static final int GL_QUERY_BUFFER = 0x9192;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_VERTEX_SUBROUTINE_UNIFORM = 0x92ee;
  /** <code>GL_ARB_indirect_parameters</code> - CType: int */
  public static final int GL_PARAMETER_BUFFER_BINDING_ARB = 0x80ef;
  /** <code>GL_VERSION_4_5</code>, <code>GL_KHR_context_flush_control</code><br>Alias for: <code>GL_CONTEXT_RELEASE_BEHAVIOR_KHR</code> - CType: int */
  public static final int GL_CONTEXT_RELEASE_BEHAVIOR = 0x82fb;
  /** <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874e;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92ef;
  /** <code>GL_VERSION_4_5</code>, <code>GL_KHR_context_flush_control</code><br>Alias for: <code>GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR</code> - CType: int */
  public static final int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82fc;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_texture_compression_bptc</code><br>Alias for: <code>GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB</code> - CType: int */
  public static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8e8e;
  /** <code>GL_ARB_compute_shader</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90ec;
  /** <code>GL_VERSION_4_4</code>, <code>GL_EXT_buffer_storage</code><br>Alias for: <code>GL_DYNAMIC_STORAGE_BIT_EXT</code> - CType: int */
  public static final int GL_DYNAMIC_STORAGE_BIT = 0x100;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_CLIP_ORIGIN = 0x935c;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_CLIP_DEPTH_MODE = 0x935d;
  /** <code>GL_VERSION_4_4</code>, <code>GL_ATI_texture_mirror_once</code>, <code>GL_EXT_texture_mirror_clamp</code><br>Alias for: <code>GL_MIRROR_CLAMP_TO_EDGE_ATI</code>, <code>GL_MIRROR_CLAMP_TO_EDGE_EXT</code> - CType: int */
  public static final int GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
  /** <code>GL_VERSION_4_4</code> - CType: int */
  public static final int GL_CLEAR_TEXTURE = 0x9365;
  /** <code>GL_VERSION_4_4</code> - CType: int */
  public static final int GL_QUERY_BUFFER_BARRIER_BIT = 0x8000;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_MAX_CULL_DISTANCES = 0x82f9;
  /** <code>GL_ARB_compute_variable_group_size</code> - CType: int */
  public static final int GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91bf;
  /** <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82e9;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_EXT_texture_view</code>, <code>GL_OES_texture_view</code><br>Alias for: <code>GL_TEXTURE_VIEW_NUM_LEVELS_EXT</code>, <code>GL_TEXTURE_VIEW_NUM_LEVELS_OES</code> - CType: int */
  public static final int GL_TEXTURE_VIEW_NUM_LEVELS = 0x82dc;
  /** <code>GL_VERSION_4_4</code>, <code>GL_EXT_buffer_storage</code><br>Alias for: <code>GL_BUFFER_IMMUTABLE_STORAGE_EXT</code> - CType: int */
  public static final int GL_BUFFER_IMMUTABLE_STORAGE = 0x821f;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_OES_texture_view</code>, <code>GL_EXT_texture_view</code><br>Alias for: <code>GL_TEXTURE_VIEW_MIN_LAYER_OES</code>, <code>GL_TEXTURE_VIEW_MIN_LAYER_EXT</code> - CType: int */
  public static final int GL_TEXTURE_VIEW_MIN_LAYER = 0x82dd;
  /** <code>GL_ARB_compute_variable_group_size</code> - CType: int */
  public static final int GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_EXT_texture_view</code>, <code>GL_OES_texture_view</code><br>Alias for: <code>GL_TEXTURE_VIEW_NUM_LAYERS_EXT</code>, <code>GL_TEXTURE_VIEW_NUM_LAYERS_OES</code> - CType: int */
  public static final int GL_TEXTURE_VIEW_NUM_LAYERS = 0x82de;
  /** <code>GL_VERSION_4_4</code>, <code>GL_EXT_buffer_storage</code><br>Alias for: <code>GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT</code> - CType: int */
  public static final int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x4000;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_NEGATIVE_ONE_TO_ONE = 0x935e;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_FRAGMENT_SUBROUTINE = 0x92ec;
  /** <code>GL_VERSION_4_4</code>, <code>GL_AMD_query_buffer_object</code><br>Alias for: <code>GL_QUERY_RESULT_NO_WAIT_AMD</code> - CType: int */
  public static final int GL_QUERY_RESULT_NO_WAIT = 0x9194;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_COMPUTE_SUBROUTINE = 0x92ed;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_VERTEX_SUBROUTINE = 0x92e8;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_ZERO_TO_ONE = 0x935f;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_QUERY_WAIT_INVERTED = 0x8e17;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8e19;
  /** <code>GL_VERSION_4_4</code>, <code>GL_EXT_buffer_storage</code><br>Alias for: <code>GL_MAP_COHERENT_BIT_EXT</code> - CType: int */
  public static final int GL_MAP_COHERENT_BIT = 0x80;
  /** <code>GL_VERSION_4_4</code> - CType: int */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934b;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_TESS_CONTROL_SUBROUTINE = 0x92e9;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_OES_texture_view</code>, <code>GL_EXT_texture_view</code><br>Alias for: <code>GL_TEXTURE_VIEW_MIN_LEVEL_OES</code>, <code>GL_TEXTURE_VIEW_MIN_LEVEL_EXT</code> - CType: int */
  public static final int GL_TEXTURE_VIEW_MIN_LEVEL = 0x82db;
  /** <code>GL_ARB_compute_variable_group_size</code> - CType: int */
  public static final int GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92f2;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_texture_compression_bptc</code><br>Alias for: <code>GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB</code> - CType: int */
  public static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8e8f;
  /** <code>GL_VERSION_4_4</code>, <code>GL_AMD_query_buffer_object</code><br>Alias for: <code>GL_QUERY_BUFFER_BINDING_AMD</code> - CType: int */
  public static final int GL_QUERY_BUFFER_BINDING = 0x9193;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_GEOMETRY_SUBROUTINE = 0x92eb;
  /** <code>GL_ARB_compute_variable_group_size</code> - CType: int */
  public static final int GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90eb;
  /** <code>GL_VERSION_4_4</code>, <code>GL_EXT_buffer_storage</code><br>Alias for: <code>GL_BUFFER_STORAGE_FLAGS_EXT</code> - CType: int */
  public static final int GL_BUFFER_STORAGE_FLAGS = 0x8220;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_TESS_EVALUATION_SUBROUTINE = 0x92ea;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92f3;
  /** <code>GL_VERSION_4_5</code>, <code>GL_QCOM_extended_get</code><br>Alias for: <code>GL_TEXTURE_TARGET_QCOM</code> - CType: int */
  public static final int GL_TEXTURE_TARGET = 0x1006;
  /** <code>GL_VERSION_4_4</code>, <code>GL_EXT_buffer_storage</code><br>Alias for: <code>GL_CLIENT_STORAGE_BIT_EXT</code> - CType: int */
  public static final int GL_CLIENT_STORAGE_BIT = 0x200;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92f1;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>GL_LOCATION_INDEX_EXT</code> - CType: int */
  public static final int GL_LOCATION_INDEX = 0x930f;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_texture_compression_bptc</code><br>Alias for: <code>GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8e8d;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_QUERY_NO_WAIT_INVERTED = 0x8e18;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92f0;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8e1a;
  /** <code>GL_VERSION_4_4</code> - CType: int */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934c;
  /** <code>GL_VERSION_4_5</code> - CType: int */
  public static final int GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82fa;
  /** <code>GL_VERSION_4_4</code> - CType: int */
  public static final int GL_LOCATION_COMPONENT = 0x934a;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code> - CType: int */
  public static final int GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92f8;

  /** Entry point to C language function: <code> GLint {@native glGetProgramResourceLocationIndex}(GLuint program, GLenum programInterface, const GLchar *  name) </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>glGetProgramResourceLocationIndexEXT</code>
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetProgramResourceLocationIndex(int program, int programInterface, ByteBuffer name);

  /** Entry point to C language function: <code> GLint {@native glGetProgramResourceLocationIndex}(GLuint program, GLenum programInterface, const GLchar *  name) </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_program_interface_query</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>glGetProgramResourceLocationIndexEXT</code>   */
  public int glGetProgramResourceLocationIndex(int program, int programInterface, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glShaderStorageBlockBinding}(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code><br>   */
  public void glShaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding);

  /** Entry point to C language function: <code> void {@native glTextureView}(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_OES_texture_view</code>, <code>GL_EXT_texture_view</code><br>Alias for: <code>glTextureViewOES</code>, <code>glTextureViewEXT</code>   */
  public void glTextureView(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers);

  /** Entry point to C language function: <code> void {@native glVertexAttribLFormat}(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code>, <code>GL_NV_vertex_attrib_integer_64bit</code><br>Alias for: <code>glVertexAttribLFormatNV</code>   */
  public void glVertexAttribLFormat(int attribindex, int size, int type, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glBufferStorage}(GLenum target, GLsizeiptr size, const void *  data, GLbitfield flags) </code> <br>Part of <code>GL_VERSION_4_4</code>, <code>GL_EXT_buffer_storage</code><br>Alias for: <code>glBufferStorageEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glBufferStorage(int target, long size, Buffer data, int flags);

  /** Entry point to C language function: <code> void {@native glClearTexImage}(GLuint texture, GLint level, GLenum format, GLenum type, const void *  data) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearTexImage(int texture, int level, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glClearTexSubImage}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *  data) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glBindBuffersBase}(GLenum target, GLuint first, GLsizei count, const GLuint *  buffers) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glBindBuffersBase(int target, int first, int count, IntBuffer buffers);

  /** Entry point to C language function: <code> void {@native glBindBuffersBase}(GLenum target, GLuint first, GLsizei count, const GLuint *  buffers) </code> <br>Part of <code>GL_VERSION_4_4</code><br>   */
  public void glBindBuffersBase(int target, int first, int count, int[] buffers, int buffers_offset);

  /** Entry point to C language function: <code> void {@native glBindBuffersRange}(GLenum target, GLuint first, GLsizei count, const GLuint *  buffers, const GLintptr *  offsets, const GLsizeiptr *  sizes) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}
      @param offsets a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param sizes a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glBindBuffersRange(int target, int first, int count, IntBuffer buffers, PointerBuffer offsets, PointerBuffer sizes);

  /** Entry point to C language function: <code> void {@native glBindBuffersRange}(GLenum target, GLuint first, GLsizei count, const GLuint *  buffers, const GLintptr *  offsets, const GLsizeiptr *  sizes) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param offsets a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param sizes a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glBindBuffersRange(int target, int first, int count, int[] buffers, int buffers_offset, PointerBuffer offsets, PointerBuffer sizes);

  /** Entry point to C language function: <code> void {@native glBindTextures}(GLuint first, GLsizei count, const GLuint *  textures) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param textures a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glBindTextures(int first, int count, IntBuffer textures);

  /** Entry point to C language function: <code> void {@native glBindTextures}(GLuint first, GLsizei count, const GLuint *  textures) </code> <br>Part of <code>GL_VERSION_4_4</code><br>   */
  public void glBindTextures(int first, int count, int[] textures, int textures_offset);

  /** Entry point to C language function: <code> void {@native glBindSamplers}(GLuint first, GLsizei count, const GLuint *  samplers) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param samplers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glBindSamplers(int first, int count, IntBuffer samplers);

  /** Entry point to C language function: <code> void {@native glBindSamplers}(GLuint first, GLsizei count, const GLuint *  samplers) </code> <br>Part of <code>GL_VERSION_4_4</code><br>   */
  public void glBindSamplers(int first, int count, int[] samplers, int samplers_offset);

  /** Entry point to C language function: <code> void {@native glBindImageTextures}(GLuint first, GLsizei count, const GLuint *  textures) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param textures a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glBindImageTextures(int first, int count, IntBuffer textures);

  /** Entry point to C language function: <code> void {@native glBindImageTextures}(GLuint first, GLsizei count, const GLuint *  textures) </code> <br>Part of <code>GL_VERSION_4_4</code><br>   */
  public void glBindImageTextures(int first, int count, int[] textures, int textures_offset);

  /** Entry point to C language function: <code> void {@native glBindVertexBuffers}(GLuint first, GLsizei count, const GLuint *  buffers, const GLintptr *  offsets, const GLsizei *  strides) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}
      @param offsets a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param strides a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glBindVertexBuffers(int first, int count, IntBuffer buffers, PointerBuffer offsets, IntBuffer strides);

  /** Entry point to C language function: <code> void {@native glBindVertexBuffers}(GLuint first, GLsizei count, const GLuint *  buffers, const GLintptr *  offsets, const GLsizei *  strides) </code> <br>Part of <code>GL_VERSION_4_4</code><br>
      @param offsets a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glBindVertexBuffers(int first, int count, int[] buffers, int buffers_offset, PointerBuffer offsets, int[] strides, int strides_offset);

  /** Entry point to C language function: <code> void {@native glClipControl}(GLenum origin, GLenum depth) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glClipControl(int origin, int depth);

  /** Entry point to C language function: <code> void {@native glCreateTransformFeedbacks}(GLsizei n, GLuint *  ids) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateTransformFeedbacks(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glCreateTransformFeedbacks}(GLsizei n, GLuint *  ids) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateTransformFeedbacks(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glTransformFeedbackBufferBase}(GLuint xfb, GLuint index, GLuint buffer) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glTransformFeedbackBufferBase(int xfb, int index, int buffer);

  /** Entry point to C language function: <code> void {@native glTransformFeedbackBufferRange}(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glTransformFeedbackBufferRange(int xfb, int index, int buffer, long offset, long size);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbackiv}(GLuint xfb, GLenum pname, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTransformFeedbackiv(int xfb, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbackiv}(GLuint xfb, GLenum pname, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetTransformFeedbackiv(int xfb, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbacki_v}(GLuint xfb, GLenum pname, GLuint index, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTransformFeedbacki_v(int xfb, int pname, int index, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbacki_v}(GLuint xfb, GLenum pname, GLuint index, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetTransformFeedbacki_v(int xfb, int pname, int index, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbacki64_v}(GLuint xfb, GLenum pname, GLuint index, GLint64 *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param param a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetTransformFeedbacki64_v(int xfb, int pname, int index, LongBuffer param);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbacki64_v}(GLuint xfb, GLenum pname, GLuint index, GLint64 *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetTransformFeedbacki64_v(int xfb, int pname, int index, long[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glCreateBuffers}(GLsizei n, GLuint *  buffers) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateBuffers(int n, IntBuffer buffers);

  /** Entry point to C language function: <code> void {@native glCreateBuffers}(GLsizei n, GLuint *  buffers) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateBuffers(int n, int[] buffers, int buffers_offset);

  /** Entry point to C language function: <code> void {@native glNamedBufferStorage}(GLuint buffer, GLsizeiptr size, const void *  data, GLbitfield flags) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedBufferStorageEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glNamedBufferStorage(int buffer, long size, Buffer data, int flags);

  /** Entry point to C language function: <code> void {@native glNamedBufferData}(GLuint buffer, GLsizeiptr size, const void *  data, GLenum usage) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedBufferDataEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glNamedBufferData(int buffer, long size, Buffer data, int usage);

  /** Entry point to C language function: <code> void {@native glNamedBufferSubData}(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *  data) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedBufferSubDataEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glNamedBufferSubData(int buffer, long offset, long size, Buffer data);

  /** Entry point to C language function: <code> void {@native glCopyNamedBufferSubData}(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCopyNamedBufferSubData(int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size);

  /** Entry point to C language function: <code> void {@native glClearNamedBufferData}(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *  data) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_clear_buffer_object</code><br>Alias for: <code>glClearNamedBufferDataEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearNamedBufferData(int buffer, int internalformat, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glClearNamedBufferSubData}(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *  data) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_clear_buffer_object</code><br>Alias for: <code>glClearNamedBufferSubDataEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearNamedBufferSubData(int buffer, int internalformat, long offset, long size, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void *  {@native glMapNamedBuffer}(GLuint buffer, GLenum access) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glMapNamedBufferEXT</code>   */
  public ByteBuffer glMapNamedBuffer(int buffer, int access);

  /** Entry point to C language function: <code> void *  {@native glMapNamedBufferRange}(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glMapNamedBufferRangeEXT</code>   */
  public ByteBuffer glMapNamedBufferRange(int buffer, long offset, long length, int access);

  /** Entry point to C language function: <code> GLboolean {@native glUnmapNamedBuffer}(GLuint buffer) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glUnmapNamedBufferEXT</code>   */
  public boolean glUnmapNamedBuffer(int buffer);

  /** Entry point to C language function: <code> void {@native glFlushMappedNamedBufferRange}(GLuint buffer, GLintptr offset, GLsizeiptr length) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glFlushMappedNamedBufferRangeEXT</code>   */
  public void glFlushMappedNamedBufferRange(int buffer, long offset, long length);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameteriv}(GLuint buffer, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedBufferParameterivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedBufferParameteriv(int buffer, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameteriv}(GLuint buffer, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedBufferParameterivEXT</code>   */
  public void glGetNamedBufferParameteriv(int buffer, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameteri64v}(GLuint buffer, GLenum pname, GLint64 *  params) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetNamedBufferParameteri64v(int buffer, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameteri64v}(GLuint buffer, GLenum pname, GLint64 *  params) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetNamedBufferParameteri64v(int buffer, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferPointerv}(GLuint buffer, GLenum pname, void *  *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedBufferPointervEXT</code>
      @param params a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glGetNamedBufferPointerv(int buffer, int pname, PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferSubData}(GLuint buffer, GLintptr offset, GLsizeiptr size, void *  data) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedBufferSubDataEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetNamedBufferSubData(int buffer, long offset, long size, Buffer data);

  /** Entry point to C language function: <code> void {@native glCreateFramebuffers}(GLsizei n, GLuint *  framebuffers) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param framebuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateFramebuffers(int n, IntBuffer framebuffers);

  /** Entry point to C language function: <code> void {@native glCreateFramebuffers}(GLsizei n, GLuint *  framebuffers) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateFramebuffers(int n, int[] framebuffers, int framebuffers_offset);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferRenderbuffer}(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedFramebufferRenderbufferEXT</code>   */
  public void glNamedFramebufferRenderbuffer(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferParameteri}(GLuint framebuffer, GLenum pname, GLint param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedFramebufferParameteriEXT</code>   */
  public void glNamedFramebufferParameteri(int framebuffer, int pname, int param);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTexture}(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedFramebufferTextureEXT</code>   */
  public void glNamedFramebufferTexture(int framebuffer, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTextureLayer}(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedFramebufferTextureLayerEXT</code>   */
  public void glNamedFramebufferTextureLayer(int framebuffer, int attachment, int texture, int level, int layer);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferDrawBuffer}(GLuint framebuffer, GLenum buf) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glNamedFramebufferDrawBuffer(int framebuffer, int buf);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferDrawBuffers}(GLuint framebuffer, GLsizei n, const GLenum *  bufs) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param bufs a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glNamedFramebufferDrawBuffers(int framebuffer, int n, IntBuffer bufs);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferDrawBuffers}(GLuint framebuffer, GLsizei n, const GLenum *  bufs) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glNamedFramebufferDrawBuffers(int framebuffer, int n, int[] bufs, int bufs_offset);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferReadBuffer}(GLuint framebuffer, GLenum src) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glNamedFramebufferReadBuffer(int framebuffer, int src);

  /** Entry point to C language function: <code> void {@native glInvalidateNamedFramebufferData}(GLuint framebuffer, GLsizei numAttachments, const GLenum *  attachments) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param attachments a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glInvalidateNamedFramebufferData(int framebuffer, int numAttachments, IntBuffer attachments);

  /** Entry point to C language function: <code> void {@native glInvalidateNamedFramebufferData}(GLuint framebuffer, GLsizei numAttachments, const GLenum *  attachments) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glInvalidateNamedFramebufferData(int framebuffer, int numAttachments, int[] attachments, int attachments_offset);

  /** Entry point to C language function: <code> void {@native glInvalidateNamedFramebufferSubData}(GLuint framebuffer, GLsizei numAttachments, const GLenum *  attachments, GLint x, GLint y, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param attachments a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glInvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, IntBuffer attachments, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glInvalidateNamedFramebufferSubData}(GLuint framebuffer, GLsizei numAttachments, const GLenum *  attachments, GLint x, GLint y, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glInvalidateNamedFramebufferSubData(int framebuffer, int numAttachments, int[] attachments, int attachments_offset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glClearNamedFramebufferiv}(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *  value) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glClearNamedFramebufferiv(int framebuffer, int buffer, int drawbuffer, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glClearNamedFramebufferiv}(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *  value) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glClearNamedFramebufferiv(int framebuffer, int buffer, int drawbuffer, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glClearNamedFramebufferuiv}(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *  value) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glClearNamedFramebufferuiv(int framebuffer, int buffer, int drawbuffer, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glClearNamedFramebufferuiv}(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *  value) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glClearNamedFramebufferuiv(int framebuffer, int buffer, int drawbuffer, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glClearNamedFramebufferfv}(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *  value) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glClearNamedFramebufferfv(int framebuffer, int buffer, int drawbuffer, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glClearNamedFramebufferfv}(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *  value) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glClearNamedFramebufferfv(int framebuffer, int buffer, int drawbuffer, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glClearNamedFramebufferfi}(GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glClearNamedFramebufferfi(int framebuffer, int buffer, float depth, int stencil);

  /** Entry point to C language function: <code> void {@native glBlitNamedFramebuffer}(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glBlitNamedFramebuffer(int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);

  /** Entry point to C language function: <code> GLenum {@native glCheckNamedFramebufferStatus}(GLuint framebuffer, GLenum target) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glCheckNamedFramebufferStatusEXT</code>   */
  public int glCheckNamedFramebufferStatus(int framebuffer, int target);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferParameteriv}(GLuint framebuffer, GLenum pname, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedFramebufferParameterivEXT</code>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedFramebufferParameteriv(int framebuffer, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferParameteriv}(GLuint framebuffer, GLenum pname, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedFramebufferParameterivEXT</code>   */
  public void glGetNamedFramebufferParameteriv(int framebuffer, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferAttachmentParameteriv}(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedFramebufferAttachmentParameterivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedFramebufferAttachmentParameteriv(int framebuffer, int attachment, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferAttachmentParameteriv}(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedFramebufferAttachmentParameterivEXT</code>   */
  public void glGetNamedFramebufferAttachmentParameteriv(int framebuffer, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCreateRenderbuffers}(GLsizei n, GLuint *  renderbuffers) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param renderbuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateRenderbuffers(int n, IntBuffer renderbuffers);

  /** Entry point to C language function: <code> void {@native glCreateRenderbuffers}(GLsizei n, GLuint *  renderbuffers) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateRenderbuffers(int n, int[] renderbuffers, int renderbuffers_offset);

  /** Entry point to C language function: <code> void {@native glNamedRenderbufferStorage}(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedRenderbufferStorageEXT</code>   */
  public void glNamedRenderbufferStorage(int renderbuffer, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glNamedRenderbufferStorageMultisample}(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glNamedRenderbufferStorageMultisampleEXT</code>   */
  public void glNamedRenderbufferStorageMultisample(int renderbuffer, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glGetNamedRenderbufferParameteriv}(GLuint renderbuffer, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedRenderbufferParameterivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedRenderbufferParameteriv(int renderbuffer, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedRenderbufferParameteriv}(GLuint renderbuffer, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetNamedRenderbufferParameterivEXT</code>   */
  public void glGetNamedRenderbufferParameteriv(int renderbuffer, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCreateTextures}(GLenum target, GLsizei n, GLuint *  textures) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param textures a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateTextures(int target, int n, IntBuffer textures);

  /** Entry point to C language function: <code> void {@native glCreateTextures}(GLenum target, GLsizei n, GLuint *  textures) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateTextures(int target, int n, int[] textures, int textures_offset);

  /** Entry point to C language function: <code> void {@native glTextureBuffer}(GLuint texture, GLenum internalformat, GLuint buffer) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureBufferEXT</code>   */
  public void glTextureBuffer(int texture, int internalformat, int buffer);

  /** Entry point to C language function: <code> void {@native glTextureBufferRange}(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_texture_buffer_range</code><br>Alias for: <code>glTextureBufferRangeEXT</code>   */
  public void glTextureBufferRange(int texture, int internalformat, int buffer, long offset, long size);

  /** Entry point to C language function: <code> void {@native glTextureStorage1D}(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_texture_storage</code>, <code>GL_ARB_texture_storage</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureStorage1DEXT</code>   */
  public void glTextureStorage1D(int texture, int levels, int internalformat, int width);

  /** Entry point to C language function: <code> void {@native glTextureStorage2D}(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_texture_storage</code>, <code>GL_ARB_texture_storage</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureStorage2DEXT</code>   */
  public void glTextureStorage2D(int texture, int levels, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glTextureStorage3D}(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_texture_storage</code>, <code>GL_ARB_texture_storage</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureStorage3DEXT</code>   */
  public void glTextureStorage3D(int texture, int levels, int internalformat, int width, int height, int depth);

  /** Entry point to C language function: <code> void {@native glTextureStorage2DMultisample}(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_texture_storage_multisample</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureStorage2DMultisampleEXT</code>   */
  public void glTextureStorage2DMultisample(int texture, int samples, int internalformat, int width, int height, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTextureStorage3DMultisample}(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_texture_storage_multisample</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureStorage3DMultisampleEXT</code>   */
  public void glTextureStorage3DMultisample(int texture, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTextureSubImage1D}(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureSubImage1DEXT</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureSubImage1D(int texture, int level, int xoffset, int width, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureSubImage1D}(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureSubImage1DEXT</code>   */
  public void glTextureSubImage1D(int texture, int level, int xoffset, int width, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTextureSubImage2D}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureSubImage2DEXT</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureSubImage2D}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureSubImage2DEXT</code>   */
  public void glTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTextureSubImage3D}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureSubImage3DEXT</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureSubImage3D}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureSubImage3DEXT</code>   */
  public void glTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage1D}(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glCompressedTextureSubImage1DEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureSubImage1D(int texture, int level, int xoffset, int width, int format, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage2D}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glCompressedTextureSubImage2DEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage3D}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glCompressedTextureSubImage3DEXT</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage1D}(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glCopyTextureSubImage1DEXT</code>   */
  public void glCopyTextureSubImage1D(int texture, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage2D}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glCopyTextureSubImage2DEXT</code>   */
  public void glCopyTextureSubImage2D(int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage3D}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glCopyTextureSubImage3DEXT</code>   */
  public void glCopyTextureSubImage3D(int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glTextureParameterf}(GLuint texture, GLenum pname, GLfloat param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterfEXT</code>   */
  public void glTextureParameterf(int texture, int pname, float param);

  /** Entry point to C language function: <code> void {@native glTextureParameterfv}(GLuint texture, GLenum pname, const GLfloat *  param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterfvEXT</code>
      @param param a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glTextureParameterfv(int texture, int pname, FloatBuffer param);

  /** Entry point to C language function: <code> void {@native glTextureParameterfv}(GLuint texture, GLenum pname, const GLfloat *  param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterfvEXT</code>   */
  public void glTextureParameterfv(int texture, int pname, float[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameteri}(GLuint texture, GLenum pname, GLint param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameteriEXT</code>   */
  public void glTextureParameteri(int texture, int pname, int param);

  /** Entry point to C language function: <code> void {@native glTextureParameterIiv}(GLuint texture, GLenum pname, const GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterIivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTextureParameterIiv(int texture, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterIiv}(GLuint texture, GLenum pname, const GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterIivEXT</code>   */
  public void glTextureParameterIiv(int texture, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameterIuiv}(GLuint texture, GLenum pname, const GLuint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterIuivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTextureParameterIuiv(int texture, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterIuiv}(GLuint texture, GLenum pname, const GLuint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterIuivEXT</code>   */
  public void glTextureParameterIuiv(int texture, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameteriv}(GLuint texture, GLenum pname, const GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterivEXT</code>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTextureParameteriv(int texture, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glTextureParameteriv}(GLuint texture, GLenum pname, const GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glTextureParameterivEXT</code>   */
  public void glTextureParameteriv(int texture, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glGenerateTextureMipmap}(GLuint texture) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGenerateTextureMipmapEXT</code>   */
  public void glGenerateTextureMipmap(int texture);

  /** Entry point to C language function: <code> void {@native glBindTextureUnit}(GLuint unit, GLuint texture) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glBindTextureUnit(int unit, int texture);

  /** Entry point to C language function: <code> void {@native glGetTextureImage}(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureImageEXT</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetTextureImage(int texture, int level, int format, int type, int bufSize, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetCompressedTextureImage}(GLuint texture, GLint level, GLsizei bufSize, void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetCompressedTextureImageEXT</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetCompressedTextureImage(int texture, int level, int bufSize, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterfv}(GLuint texture, GLint level, GLenum pname, GLfloat *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureLevelParameterfvEXT</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetTextureLevelParameterfv(int texture, int level, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterfv}(GLuint texture, GLint level, GLenum pname, GLfloat *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureLevelParameterfvEXT</code>   */
  public void glGetTextureLevelParameterfv(int texture, int level, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameteriv}(GLuint texture, GLint level, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureLevelParameterivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTextureLevelParameteriv(int texture, int level, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameteriv}(GLuint texture, GLint level, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureLevelParameterivEXT</code>   */
  public void glGetTextureLevelParameteriv(int texture, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterfv}(GLuint texture, GLenum pname, GLfloat *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureParameterfvEXT</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetTextureParameterfv(int texture, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterfv}(GLuint texture, GLenum pname, GLfloat *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureParameterfvEXT</code>   */
  public void glGetTextureParameterfv(int texture, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIiv}(GLuint texture, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureParameterIivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTextureParameterIiv(int texture, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIiv}(GLuint texture, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureParameterIivEXT</code>   */
  public void glGetTextureParameterIiv(int texture, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIuiv}(GLuint texture, GLenum pname, GLuint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureParameterIuivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTextureParameterIuiv(int texture, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIuiv}(GLuint texture, GLenum pname, GLuint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureParameterIuivEXT</code>   */
  public void glGetTextureParameterIuiv(int texture, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameteriv}(GLuint texture, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureParameterivEXT</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTextureParameteriv(int texture, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameteriv}(GLuint texture, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetTextureParameterivEXT</code>   */
  public void glGetTextureParameteriv(int texture, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCreateVertexArrays}(GLsizei n, GLuint *  arrays) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateVertexArrays(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glCreateVertexArrays}(GLsizei n, GLuint *  arrays) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateVertexArrays(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glDisableVertexArrayAttrib}(GLuint vaobj, GLuint index) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glDisableVertexArrayAttribEXT</code>   */
  public void glDisableVertexArrayAttrib(int vaobj, int index);

  /** Entry point to C language function: <code> void {@native glEnableVertexArrayAttrib}(GLuint vaobj, GLuint index) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glEnableVertexArrayAttribEXT</code>   */
  public void glEnableVertexArrayAttrib(int vaobj, int index);

  /** Entry point to C language function: <code> void {@native glVertexArrayElementBuffer}(GLuint vaobj, GLuint buffer) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glVertexArrayElementBuffer(int vaobj, int buffer);

  /** Entry point to C language function: <code> void {@native glVertexArrayVertexBuffer}(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glVertexArrayVertexBuffer(int vaobj, int bindingindex, int buffer, long offset, int stride);

  /** Entry point to C language function: <code> void {@native glVertexArrayVertexBuffers}(GLuint vaobj, GLuint first, GLsizei count, const GLuint *  buffers, const GLintptr *  offsets, const GLsizei *  strides) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}
      @param offsets a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param strides a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexArrayVertexBuffers(int vaobj, int first, int count, IntBuffer buffers, PointerBuffer offsets, IntBuffer strides);

  /** Entry point to C language function: <code> void {@native glVertexArrayVertexBuffers}(GLuint vaobj, GLuint first, GLsizei count, const GLuint *  buffers, const GLintptr *  offsets, const GLsizei *  strides) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param offsets a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glVertexArrayVertexBuffers(int vaobj, int first, int count, int[] buffers, int buffers_offset, PointerBuffer offsets, int[] strides, int strides_offset);

  /** Entry point to C language function: <code> void {@native glVertexArrayAttribBinding}(GLuint vaobj, GLuint attribindex, GLuint bindingindex) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glVertexArrayAttribBinding(int vaobj, int attribindex, int bindingindex);

  /** Entry point to C language function: <code> void {@native glVertexArrayAttribFormat}(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glVertexArrayAttribFormat(int vaobj, int attribindex, int size, int type, boolean normalized, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexArrayAttribIFormat}(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glVertexArrayAttribIFormat(int vaobj, int attribindex, int size, int type, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexArrayAttribLFormat}(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glVertexArrayAttribLFormat(int vaobj, int attribindex, int size, int type, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexArrayBindingDivisor}(GLuint vaobj, GLuint bindingindex, GLuint divisor) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glVertexArrayBindingDivisor(int vaobj, int bindingindex, int divisor);

  /** Entry point to C language function: <code> void {@native glGetVertexArrayiv}(GLuint vaobj, GLenum pname, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVertexArrayiv(int vaobj, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glGetVertexArrayiv}(GLuint vaobj, GLenum pname, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetVertexArrayiv(int vaobj, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexArrayIndexediv}(GLuint vaobj, GLuint index, GLenum pname, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVertexArrayIndexediv(int vaobj, int index, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glGetVertexArrayIndexediv}(GLuint vaobj, GLuint index, GLenum pname, GLint *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetVertexArrayIndexediv(int vaobj, int index, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexArrayIndexed64iv}(GLuint vaobj, GLuint index, GLenum pname, GLint64 *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param param a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetVertexArrayIndexed64iv(int vaobj, int index, int pname, LongBuffer param);

  /** Entry point to C language function: <code> void {@native glGetVertexArrayIndexed64iv}(GLuint vaobj, GLuint index, GLenum pname, GLint64 *  param) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetVertexArrayIndexed64iv(int vaobj, int index, int pname, long[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glCreateSamplers}(GLsizei n, GLuint *  samplers) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param samplers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateSamplers(int n, IntBuffer samplers);

  /** Entry point to C language function: <code> void {@native glCreateSamplers}(GLsizei n, GLuint *  samplers) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateSamplers(int n, int[] samplers, int samplers_offset);

  /** Entry point to C language function: <code> void {@native glCreateProgramPipelines}(GLsizei n, GLuint *  pipelines) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param pipelines a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateProgramPipelines(int n, IntBuffer pipelines);

  /** Entry point to C language function: <code> void {@native glCreateProgramPipelines}(GLsizei n, GLuint *  pipelines) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateProgramPipelines(int n, int[] pipelines, int pipelines_offset);

  /** Entry point to C language function: <code> void {@native glCreateQueries}(GLenum target, GLsizei n, GLuint *  ids) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCreateQueries(int target, int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glCreateQueries}(GLenum target, GLsizei n, GLuint *  ids) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glCreateQueries(int target, int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryBufferObjecti64v}(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetQueryBufferObjecti64v(int id, int buffer, int pname, long offset);

  /** Entry point to C language function: <code> void {@native glGetQueryBufferObjectiv}(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetQueryBufferObjectiv(int id, int buffer, int pname, long offset);

  /** Entry point to C language function: <code> void {@native glGetQueryBufferObjectui64v}(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetQueryBufferObjectui64v(int id, int buffer, int pname, long offset);

  /** Entry point to C language function: <code> void {@native glGetQueryBufferObjectuiv}(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) </code> <br>Part of <code>GL_VERSION_4_5</code><br>   */
  public void glGetQueryBufferObjectuiv(int id, int buffer, int pname, long offset);

  /** Entry point to C language function: <code> void {@native glGetTextureSubImage}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int bufSize, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetCompressedTextureSubImage}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code><br>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetCompressedTextureSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureBarrier}(void) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_NV_texture_barrier</code><br>Alias for: <code>glTextureBarrierNV</code>   */
  public void glTextureBarrier();

  /** Entry point to C language function: <code> GLuint64 {@native glGetTextureHandleARB}(GLuint texture) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public long glGetTextureHandleARB(int texture);

  /** Entry point to C language function: <code> GLuint64 {@native glGetTextureSamplerHandleARB}(GLuint texture, GLuint sampler) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public long glGetTextureSamplerHandleARB(int texture, int sampler);

  /** Entry point to C language function: <code> void {@native glMakeTextureHandleResidentARB}(GLuint64 handle) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glMakeTextureHandleResidentARB(long handle);

  /** Entry point to C language function: <code> void {@native glMakeTextureHandleNonResidentARB}(GLuint64 handle) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glMakeTextureHandleNonResidentARB(long handle);

  /** Entry point to C language function: <code> GLuint64 {@native glGetImageHandleARB}(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public long glGetImageHandleARB(int texture, int level, boolean layered, int layer, int format);

  /** Entry point to C language function: <code> void {@native glMakeImageHandleResidentARB}(GLuint64 handle, GLenum access) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glMakeImageHandleResidentARB(long handle, int access);

  /** Entry point to C language function: <code> void {@native glMakeImageHandleNonResidentARB}(GLuint64 handle) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glMakeImageHandleNonResidentARB(long handle);

  /** Entry point to C language function: <code> void {@native glUniformHandleui64ARB}(GLint location, GLuint64 value) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glUniformHandleui64ARB(int location, long value);

  /** Entry point to C language function: <code> void {@native glUniformHandleui64vARB}(GLint location, GLsizei count, const GLuint64 *  value) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>
      @param value a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glUniformHandleui64vARB(int location, int count, LongBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformHandleui64vARB}(GLint location, GLsizei count, const GLuint64 *  value) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glUniformHandleui64vARB(int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformHandleui64ARB}(GLuint program, GLint location, GLuint64 value) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glProgramUniformHandleui64ARB(int program, int location, long value);

  /** Entry point to C language function: <code> void {@native glProgramUniformHandleui64vARB}(GLuint program, GLint location, GLsizei count, const GLuint64 *  values) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>
      @param values a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glProgramUniformHandleui64vARB(int program, int location, int count, LongBuffer values);

  /** Entry point to C language function: <code> void {@native glProgramUniformHandleui64vARB}(GLuint program, GLint location, GLsizei count, const GLuint64 *  values) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glProgramUniformHandleui64vARB(int program, int location, int count, long[] values, int values_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsTextureHandleResidentARB}(GLuint64 handle) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public boolean glIsTextureHandleResidentARB(long handle);

  /** Entry point to C language function: <code> GLboolean {@native glIsImageHandleResidentARB}(GLuint64 handle) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public boolean glIsImageHandleResidentARB(long handle);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1ui64ARB}(GLuint index, GLuint64EXT x) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glVertexAttribL1ui64ARB(int index, long x);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1ui64vARB}(GLuint index, const GLuint64EXT *  v) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL1ui64vARB(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1ui64vARB}(GLuint index, const GLuint64EXT *  v) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glVertexAttribL1ui64vARB(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLui64vARB}(GLuint index, GLenum pname, GLuint64EXT *  params) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetVertexAttribLui64vARB(int index, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLui64vARB}(GLuint index, GLenum pname, GLuint64EXT *  params) </code> <br>Part of <code>GL_ARB_bindless_texture</code><br>   */
  public void glGetVertexAttribLui64vARB(int index, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glDispatchComputeGroupSizeARB}(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) </code> <br>Part of <code>GL_ARB_compute_variable_group_size</code><br>   */
  public void glDispatchComputeGroupSizeARB(int num_groups_x, int num_groups_y, int num_groups_z, int group_size_x, int group_size_y, int group_size_z);

  /** Entry point to C language function: <code> void {@native glMultiDrawArraysIndirectCountARB}(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) </code> <br>Part of <code>GL_ARB_indirect_parameters</code><br>   */
  public void glMultiDrawArraysIndirectCountARB(int mode, long indirect, long drawcount, int maxdrawcount, int stride);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsIndirectCountARB}(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) </code> <br>Part of <code>GL_ARB_indirect_parameters</code><br>   */
  public void glMultiDrawElementsIndirectCountARB(int mode, int type, long indirect, long drawcount, int maxdrawcount, int stride);


  // --- Begin CustomJavaCode .cfg declarations
  
    //
    // GLBufferObjectTracker Redirects
    //
  
    /**
     * Returns the {@link GLBufferStorage} instance as mapped via OpenGL's native {@link GL4#glMapNamedBuffer(int, int) glMapNamedBuffer(..)} implementation.
     * <p>
     * Throws a {@link GLException} if GL-function constraints are not met.
     * </p>
     * <p>
     * Depends on <code>GL_VERSION_4_5</code>.
     * </p>
     * <p>
     * {@link GL4#glMapNamedBuffer(int, int)} wrapper calls this method and returns {@link GLBufferStorage#getMappedBuffer()}.
     * </p>
     * @param bufferName denotes the buffer
     * @param access the mapping access mode
     * @throws GLException if buffer is not tracked
     * @throws GLException if buffer is already mapped
     * @throws GLException if buffer has invalid store size, i.e. less-than zero
     */
    public GLBufferStorage mapNamedBuffer(int bufferName, int access) throws GLException;
  
    /**
     * Returns the {@link GLBufferStorage} instance as mapped via OpenGL's native {@link GL4#glMapNamedBufferRange(int, long, long, int) glMapNamedBufferRange(..)} implementation.
     * <p>
     * Throws a {@link GLException} if GL-function constraints are not met.
     * </p>
     * <p>
     * Depends on <code>GL_VERSION_4_5</code>.
     * </p>
     * <p>
     * {@link GL4#glMapNamedBufferRange(int, long, long, int)} wrapper calls this method and returns {@link GLBufferStorage#getMappedBuffer()}.
     * </p>
     * @param bufferName denotes the buffer
     * @param offset offset of the mapped buffer's storage
     * @param length length of the mapped buffer's storage
     * @param access the mapping access mode
     * @throws GLException if buffer is not tracked
     * @throws GLException if buffer is already mapped
     * @throws GLException if buffer has invalid store size, i.e. less-than zero
     * @throws GLException if buffer mapping range does not fit, incl. offset
     */
    public GLBufferStorage mapNamedBufferRange(final int bufferName, final long offset, final long length, final int access) throws GLException;
  
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL4
