/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Sat Oct 10 03:15:37 CEST 2015 ----! */

package com.jogamp.opengl;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import java.io.PrintStream;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <p> 
  * Interface containing the common subset of core GL3 (OpenGL 3.1+) and GL2,
  * also known as the OpenGL 3.0 forward compatible, non deprecated subset.<br/>
  * This interface reflects only the programmable shader functionality of desktop OpenGL<br/>
  * </p>
  */
public interface GL2GL3 extends GL2ES3{

  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8f26;
  /** <code>GL_VERSION_3_1</code>, <code>GL_EXT_gpu_shader4</code><br>Alias for: <code>GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8dd5;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8f28;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
  /** <code>GL_VERSION_1_2</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>GL_PACK_IMAGE_HEIGHT_EXT</code> - CType: int */
  public static final int GL_PACK_IMAGE_HEIGHT = 0x806c;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_integer</code><br>Alias for: <code>GL_GREEN_INTEGER_EXT</code> - CType: int */
  public static final int GL_GREEN_INTEGER = 0x8d95;
  /** <code>GL_VERSION_4_0</code>, <code>GL_ARB_texture_cube_map_array</code><br>Alias for: <code>GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900b;
  /** <code>GL_VERSION_2_1</code>, <code>GL_EXT_texture_sRGB</code><br>Alias for: <code>GL_COMPRESSED_SRGB_ALPHA_EXT</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA = 0x8c49;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82cc;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_GATHER = 0x82a2;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_10_10_10_2 = 0x82c3;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TESS_EVALUATION_TEXTURE = 0x829d;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_BACK_LEFT = 0x402;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_NV_polygon_mode</code><br>Alias for: <code>GL_POLYGON_OFFSET_POINT_NV</code> - CType: int */
  public static final int GL_POLYGON_OFFSET_POINT = 0x2a01;
  /** <code>GL_NV_shader_buffer_load</code> - CType: int */
  public static final int GL_GPU_ADDRESS_NV = 0x8f34;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_gpu_shader4</code><br>Alias for: <code>GL_SAMPLER_1D_ARRAY_SHADOW_EXT</code> - CType: int */
  public static final int GL_SAMPLER_1D_ARRAY_SHADOW = 0x8dc3;
  /** <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>GL_TEXTURE_COMPRESSION_HINT_ARB</code> - CType: int */
  public static final int GL_TEXTURE_COMPRESSION_HINT = 0x84ef;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_RGTC1_RED = 0x82d0;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919a;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_VIEW = 0x82b5;
  /** <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_STENCIL_INDEX16_EXT</code> - CType: int */
  public static final int GL_STENCIL_INDEX16 = 0x8d49;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_INT_IMAGE_2D_MULTISAMPLE_EXT</code> - CType: int */
  public static final int GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_DEPTH_COMPONENTS = 0x8284;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code><br>Alias for: <code>GL_RGB5_EXT</code> - CType: int */
  public static final int GL_RGB5 = 0x8050;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code><br>Alias for: <code>GL_RGB4_EXT</code> - CType: int */
  public static final int GL_RGB4 = 0x804f;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_FRAMEBUFFER_RENDERABLE = 0x8289;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8f2a;
  /** <code>GL_VERSION_3_1</code>, <code>GL_ARB_texture_rectangle</code>, <code>GL_NV_texture_rectangle</code><br>Alias for: <code>GL_TEXTURE_RECTANGLE_ARB</code>, <code>GL_TEXTURE_RECTANGLE_NV</code> - CType: int */
  public static final int GL_TEXTURE_RECTANGLE = 0x84f5;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_UNSIGNED_INT_IMAGE_1D_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TESS_CONTROL_TEXTURE = 0x829c;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_READ_PIXELS = 0x828c;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_POLYGON_SMOOTH_HINT = 0xc53;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_INT_IMAGE_1D_EXT</code> - CType: int */
  public static final int GL_INT_IMAGE_1D = 0x9057;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_NV_polygon_mode</code><br>Alias for: <code>GL_POINT_NV</code> - CType: int */
  public static final int GL_POINT = 0x1b00;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82f0;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_NORMAL_ARRAY_LENGTH_NV = 0x8f2c;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_IMAGE_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_IMAGE_1D_ARRAY = 0x9052;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82f5;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_NV_polygon_mode</code><br>Alias for: <code>GL_POLYGON_OFFSET_LINE_NV</code> - CType: int */
  public static final int GL_POLYGON_OFFSET_LINE = 0x2a02;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_STENCIL_TYPE = 0x827d;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_MAX_WIDTH = 0x827e;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82f1;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_PRIMITIVES_SUBMITTED_ARB = 0x82ef;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_24_BITS = 0x82c9;
  /** <code>GL_VERSION_1_4</code>, <code>GL_EXT_texture_lod_bias</code><br>Alias for: <code>GL_TEXTURE_LOD_BIAS_EXT</code> - CType: int */
  public static final int GL_TEXTURE_LOD_BIAS = 0x8501;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82f7;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
  /** <code>GL_AMD_stencil_operation_extended</code> - CType: int */
  public static final int GL_SET_AMD = 0x874a;
  /** <code>GL_AMD_sample_positions</code> - CType: int */
  public static final int GL_SUBSAMPLE_DISTANCE_AMD = 0x883f;
  /** <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_SAMPLER_1D_ARB</code> - CType: int */
  public static final int GL_SAMPLER_1D = 0x8b5d;
  /** <code>GL_VERSION_1_5</code>, <code>GL_ARB_occlusion_query</code><br>Alias for: <code>GL_SAMPLES_PASSED_ARB</code> - CType: int */
  public static final int GL_SAMPLES_PASSED = 0x8914;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_CLIP_DISTANCE1_APPLE</code> - CType: int */
  public static final int GL_CLIP_DISTANCE1 = 0x3001;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_CLIP_DISTANCE0_APPLE</code> - CType: int */
  public static final int GL_CLIP_DISTANCE0 = 0x3000;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_CLIP_DISTANCE3_APPLE</code> - CType: int */
  public static final int GL_CLIP_DISTANCE3 = 0x3003;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_CLIP_DISTANCE2_APPLE</code> - CType: int */
  public static final int GL_CLIP_DISTANCE2 = 0x3002;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_CLIP_DISTANCE5_APPLE</code> - CType: int */
  public static final int GL_CLIP_DISTANCE5 = 0x3005;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_CLIP_DISTANCE4_APPLE</code> - CType: int */
  public static final int GL_CLIP_DISTANCE4 = 0x3004;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_CLIP_DISTANCE7_APPLE</code> - CType: int */
  public static final int GL_CLIP_DISTANCE7 = 0x3007;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_CLIP_DISTANCE6_APPLE</code> - CType: int */
  public static final int GL_CLIP_DISTANCE6 = 0x3006;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_MAX_HEIGHT = 0x827f;
  /** <code>GL_ARB_texture_swizzle</code>, <code>GL_VERSION_3_3</code>, <code>GL_EXT_texture_swizzle</code><br>Alias for: <code>GL_TEXTURE_SWIZZLE_RGBA_EXT</code> - CType: int */
  public static final int GL_TEXTURE_SWIZZLE_RGBA = 0x8e46;
  /** <code>GL_VERSION_3_0</code>, <code>GL_ARB_color_buffer_float</code><br>Alias for: <code>GL_FIXED_ONLY_ARB</code> - CType: int */
  public static final int GL_FIXED_ONLY = 0x891d;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_array</code><br>Alias for: <code>GL_TEXTURE_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_TEXTURE_1D_ARRAY = 0x8c18;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_SHADOW = 0x82a1;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91a9;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_POINT_SIZE_GRANULARITY = 0xb13;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82b2;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92c4;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_VERTICES_SUBMITTED_ARB = 0x82ee;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_MIPMAP = 0x8293;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_gpu_shader4</code><br>Alias for: <code>GL_INT_SAMPLER_1D_EXT</code> - CType: int */
  public static final int GL_INT_SAMPLER_1D = 0x8dc9;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> - CType: int */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
  /** <code>GL_EXT_texture_sRGB_decode</code> - CType: int */
  public static final int GL_TEXTURE_SRGB_DECODE_EXT = 0x8a48;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82ce;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
  /** <code>GL_VERSION_1_1</code> - CType: int */
  public static final int GL_R3_G3_B2 = 0x2a10;
  /** <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_UPPER_LEFT = 0x8ca2;
  /** <code>GL_AMD_depth_clamp_separate</code> - CType: int */
  public static final int GL_DEPTH_CLAMP_FAR_AMD = 0x901f;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_gpu_shader4</code><br>Alias for: <code>GL_UNSIGNED_INT_SAMPLER_1D_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_1D = 0x8dd1;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_integer</code><br>Alias for: <code>GL_BGRA_INTEGER_EXT</code> - CType: int */
  public static final int GL_BGRA_INTEGER = 0x8d9b;
  /** <code>GL_ARB_sparse_buffer</code> - CType: int */
  public static final int GL_SPARSE_STORAGE_BIT_ARB = 0x400;
  /** <code>GL_VERSION_1_2</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>GL_PACK_SKIP_IMAGES_EXT</code> - CType: int */
  public static final int GL_PACK_SKIP_IMAGES = 0x806b;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_EXT_multiview_draw_buffers</code><br>Alias for: <code>GL_DRAW_BUFFER_EXT</code> - CType: int */
  public static final int GL_DRAW_BUFFER = 0xc01;
  /** <code>GL_ARB_texture_compression_rgtc</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_compression_rgtc</code><br>Alias for: <code>GL_COMPRESSED_RED_RGTC1_EXT</code> - CType: int */
  public static final int GL_COMPRESSED_RED_RGTC1 = 0x8dbb;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_integer</code><br>Alias for: <code>GL_BLUE_INTEGER_EXT</code> - CType: int */
  public static final int GL_BLUE_INTEGER = 0x8d96;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_GEOMETRY_TEXTURE = 0x829e;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_1_X_8 = 0x82c1;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_IMAGE_1D_EXT</code> - CType: int */
  public static final int GL_IMAGE_1D = 0x904c;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_DOUBLE = 0x140a;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92c5;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_array</code><br>Alias for: <code>GL_TEXTURE_BINDING_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_1D_ARRAY = 0x8c1c;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82f2;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914a;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_DRAW_INDIRECT_ADDRESS_NV = 0x8f41;
  /** <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8cdc;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT</code> - CType: int */
  public static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8f39;
  /** <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_shader</code><br>Alias for: <code>GL_MAX_VARYING_FLOATS_ARB</code> - CType: int */
  public static final int GL_MAX_VARYING_FLOATS = 0x8b4b;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_RED_SIZE = 0x8271;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> - CType: int */
  public static final int GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912c;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92cb;
  /** <code>GL_VERSION_3_1</code>, <code>GL_EXT_gpu_shader4</code><br>Alias for: <code>GL_INT_SAMPLER_2D_RECT_EXT</code> - CType: int */
  public static final int GL_INT_SAMPLER_2D_RECT = 0x8dcd;
  /** <code>GL_EXT_texture_sRGB_decode</code> - CType: int */
  public static final int GL_SKIP_DECODE_EXT = 0x8a4a;
  /** <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> - CType: int */
  public static final int GL_SAMPLER_BUFFER_AMD = 0x9001;
  /** <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_LOWER_LEFT = 0x8ca1;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_PIXEL_TYPE = 0x82aa;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_DEPTH_RENDERABLE = 0x8287;
  /** <code>GL_AMD_stencil_operation_extended</code> - CType: int */
  public static final int GL_STENCIL_BACK_OP_VALUE_AMD = 0x874d;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> - CType: int */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_BLUE_TYPE = 0x827a;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SRGB_WRITE = 0x8298;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
  /** <code>GL_AMD_depth_clamp_separate</code> - CType: int */
  public static final int GL_DEPTH_CLAMP_NEAR_AMD = 0x901e;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_BPTC_UNORM = 0x82d2;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82f6;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_DOUBLEBUFFER = 0xc32;
  /** <code>GL_ARB_texture_rg</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_norm16</code><br>Alias for: <code>GL_R16_EXT</code> - CType: int */
  public static final int GL_R16 = 0x822a;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SHADER_IMAGE_STORE = 0x82a5;
  /** <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_gpu_shader4</code><br>Alias for: <code>GL_SAMPLER_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_SAMPLER_1D_ARRAY = 0x8dc0;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82ac;
  /** <code>GL_VERSION_3_0</code> - CType: int */
  public static final int GL_COMPRESSED_RG = 0x8226;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_COLOR_ENCODING = 0x8296;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_CLEAR_BUFFER = 0x82b4;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_TEXTURE_1D = 0xde0;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_DRAW_INDIRECT_LENGTH_NV = 0x8f42;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_FILTER = 0x829a;
  /** <code>GL_ARB_uniform_buffer_object</code>, <code>GL_VERSION_3_1</code> - CType: int */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8a45;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8f25;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_COMPATIBILITY_CLASS = 0x82b6;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_2_X_16 = 0x82bd;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_gpu_shader4</code><br>Alias for: <code>GL_INT_SAMPLER_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_INT_SAMPLER_1D_ARRAY = 0x8dce;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_TEXTURE_SPARSE_ARB = 0x91a6;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_2_X_32 = 0x82ba;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
  /** <code>GL_VERSION_3_1</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_SAMPLER_2D_RECT_SHADOW_ARB</code> - CType: int */
  public static final int GL_SAMPLER_2D_RECT_SHADOW = 0x8b64;
  /** <code>GL_VERSION_1_2</code>, <code>GL_EXT_packed_pixels</code><br>Alias for: <code>GL_UNSIGNED_BYTE_3_3_2_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_11_11_10 = 0x82c2;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_DEPTH_TYPE = 0x827c;
  /** <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> - CType: int */
  public static final int GL_TESSELLATION_MODE_AMD = 0x9004;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82f4;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_INT_IMAGE_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_INT_IMAGE_1D_ARRAY = 0x905d;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_MAX_IMAGE_SAMPLES_EXT</code> - CType: int */
  public static final int GL_MAX_IMAGE_SAMPLES = 0x906d;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_32_BITS = 0x82c8;
  /** <code>GL_VERSION_3_0</code>, <code>GL_ARB_color_buffer_float</code><br>Alias for: <code>GL_CLAMP_READ_COLOR_ARB</code> - CType: int */
  public static final int GL_CLAMP_READ_COLOR = 0x891c;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914f;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92c9;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82cd;
  /** <code>GL_VERSION_1_2</code>, <code>GL_EXT_packed_pixels</code><br>Alias for: <code>GL_UNSIGNED_INT_8_8_8_8_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
  /** <code>GL_VERSION_1_2</code> - CType: int */
  public static final int GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82b3;
  /** <code>GL_VERSION_3_1</code>, <code>GL_NV_texture_rectangle</code>, <code>GL_ARB_texture_rectangle</code><br>Alias for: <code>GL_MAX_RECTANGLE_TEXTURE_SIZE_NV</code>, <code>GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB</code> - CType: int */
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84f8;
  /** <code>GL_ARB_texture_compression_rgtc</code>, <code>GL_VERSION_3_0</code> - CType: int */
  public static final int GL_COMPRESSED_RG_RGTC2 = 0x8dbd;
  /** <code>GL_ARB_transform_feedback3</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8e70;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_STEREO = 0xc33;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_UNPACK_SWAP_BYTES = 0xcf0;
  /** <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> - CType: int */
  public static final int GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914b;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_INDEX_ARRAY_LENGTH_NV = 0x8f2e;
  /** <code>GL_EXT_framebuffer_multisample_blit_scaled</code> - CType: int */
  public static final int GL_SCALED_RESOLVE_FASTEST_EXT = 0x90ba;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_RGTC2_RG = 0x82d1;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_NV_polygon_mode</code><br>Alias for: <code>GL_LINE_NV</code> - CType: int */
  public static final int GL_LINE = 0x1b01;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_COMPATIBILITY_CLASS = 0x82a8;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_MANUAL_GENERATE_MIPMAP = 0x8294;
  /** <code>GL_VERSION_1_2</code>, <code>GL_EXT_read_format_bgra</code>, <code>GL_IMG_read_format</code><br>Alias for: <code>GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT</code>, <code>GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG</code> - CType: int */
  public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
  /** <code>GL_NV_shader_buffer_load</code> - CType: int */
  public static final int GL_BUFFER_GPU_ADDRESS_NV = 0x8f1d;
  /** <code>GL_VERSION_3_1</code>, <code>GL_NV_texture_rectangle</code>, <code>GL_ARB_texture_rectangle</code><br>Alias for: <code>GL_PROXY_TEXTURE_RECTANGLE_NV</code>, <code>GL_PROXY_TEXTURE_RECTANGLE_ARB</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_RECTANGLE = 0x84f7;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_MAX_DEPTH = 0x8280;
  /** <code>GL_AMD_blend_minmax_factor</code> - CType: int */
  public static final int GL_FACTOR_MAX_AMD = 0x901d;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_IMAGE_TYPE = 0x8290;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82ae;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_DRAW_INDIRECT_UNIFIED_NV = 0x8f40;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_gpu_shader4</code><br>Alias for: <code>GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8dd6;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8f32;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_2_X_8 = 0x82c0;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_TEXEL_SIZE = 0x82a7;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_STENCIL_RENDERABLE = 0x8288;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906b;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_COLOR_COMPONENTS = 0x8283;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_integer</code><br>Alias for: <code>GL_BGR_INTEGER_EXT</code> - CType: int */
  public static final int GL_BGR_INTEGER = 0x8d9a;
  /** <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8cdb;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906c;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_MAX_LAYERS = 0x8281;
  /** <code>GL_ARB_transform_feedback3</code>, <code>GL_VERSION_4_0</code>, <code>GL_ATI_vertex_streams</code><br>Alias for: <code>GL_MAX_VERTEX_STREAMS_ATI</code> - CType: int */
  public static final int GL_MAX_VERTEX_STREAMS = 0x8e71;
  /** <code>GL_ARB_transform_feedback2</code>, <code>GL_VERSION_4_0</code>, <code>GL_NV_transform_feedback2</code><br>Alias for: <code>GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV</code> - CType: int */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8e24;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SRGB_READ = 0x8297;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT</code> - CType: int */
  public static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_MAX_COMBINED_DIMENSIONS = 0x8282;
  /** <code>GL_VERSION_1_2</code> - CType: int */
  public static final int GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828a;
  /** <code>GL_NV_shader_buffer_load</code> - CType: int */
  public static final int GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8f35;
  /** <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>GL_VERTEX_PROGRAM_POINT_SIZE_ARB</code>, <code>GL_VERTEX_PROGRAM_POINT_SIZE_NV</code> - CType: int */
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
  /** <code>GL_ARB_pipeline_statistics_query</code> - CType: int */
  public static final int GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82f3;
  /** <code>GL_VERSION_1_2</code>, <code>GL_EXT_read_format_bgra</code><br>Alias for: <code>GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
  /** <code>GL_AMD_stencil_operation_extended</code> - CType: int */
  public static final int GL_STENCIL_OP_VALUE_AMD = 0x874c;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_FRONT_RIGHT = 0x401;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_array</code><br>Alias for: <code>GL_PROXY_TEXTURE_2D_ARRAY_EXT</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_2D_ARRAY = 0x8c1b;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_GATHER_SHADOW = 0x82a3;
  /** <code>GL_ARB_internalformat_query2</code><br>Alias for: <code>GL_SRGB_DECODE_ARB</code> - CType: int */
  public static final int GL_SRGB_DECODE = 0x8299;
  /** <code>GL_ARB_transform_feedback_overflow_query</code> - CType: int */
  public static final int GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ed;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914e;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_STENCIL_COMPONENTS = 0x8285;
  /** <code>GL_VERSION_2_0</code> - CType: int */
  public static final int GL_POINT_SPRITE_COORD_ORIGIN = 0x8ca0;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_COLOR_RENDERABLE = 0x8286;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_NORMAL_ARRAY_ADDRESS_NV = 0x8f22;
  /** <code>GL_VERSION_3_1</code>, <code>GL_EXT_render_snorm</code><br>Alias for: <code>GL_RGBA16_SNORM_EXT</code> - CType: int */
  public static final int GL_RGBA16_SNORM = 0x8f9b;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_NV_polygon_mode</code><br>Alias for: <code>GL_POLYGON_MODE_NV</code> - CType: int */
  public static final int GL_POLYGON_MODE = 0xb40;
  /** <code>GL_VERSION_2_0</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_SAMPLER_1D_SHADOW_ARB</code> - CType: int */
  public static final int GL_SAMPLER_1D_SHADOW = 0x8b61;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914d;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> - CType: int */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912a;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914c;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_FULL_SUPPORT = 0x82b7;
  /** <code>GL_VERSION_3_1</code>, <code>GL_ARB_texture_rectangle</code>, <code>GL_NV_texture_rectangle</code><br>Alias for: <code>GL_TEXTURE_BINDING_RECTANGLE_ARB</code>, <code>GL_TEXTURE_BINDING_RECTANGLE_NV</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_RECTANGLE = 0x84f6;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_128_BITS = 0x82c4;
  /** <code>GL_EXT_texture_sRGB_decode</code> - CType: int */
  public static final int GL_DECODE_EXT = 0x8a49;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code><br>Alias for: <code>GL_RGBA2_EXT</code> - CType: int */
  public static final int GL_RGBA2 = 0x8055;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> - CType: int */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_IMAGE_FORMAT = 0x828f;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_COMPUTE_TEXTURE = 0x82a0;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8f29;
  /** <code>GL_VERSION_3_0</code>, <code>GL_APPLE_clip_distance</code><br>Alias for: <code>GL_MAX_CLIP_DISTANCES_APPLE</code> - CType: int */
  public static final int GL_MAX_CLIP_DISTANCES = 0xd32;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_ELEMENT_ARRAY_LENGTH_NV = 0x8f33;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_IMAGE_2D_MULTISAMPLE_EXT</code> - CType: int */
  public static final int GL_IMAGE_2D_MULTISAMPLE = 0x9055;
  /** <code>GL_EXT_x11_sync_object</code> - CType: int */
  public static final int GL_SYNC_X11_FENCE_EXT = 0x90e1;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_NUM_SPARSE_LEVELS_ARB = 0x91aa;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82cf;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91a8;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_8_BITS = 0x82cb;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_PACK_LSB_FIRST = 0xd01;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_INT_IMAGE_2D_RECT_EXT</code> - CType: int */
  public static final int GL_INT_IMAGE_2D_RECT = 0x905a;
  /** <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> - CType: int */
  public static final int GL_TESSELLATION_FACTOR_AMD = 0x9005;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT</code> - CType: int */
  public static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_POLYGON_SMOOTH = 0xb41;
  /** <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> - CType: int */
  public static final int GL_DISCRETE_AMD = 0x9006;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8f20;
  /** <code>GL_ARB_texture_compression_rgtc</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_compression_rgtc</code><br>Alias for: <code>GL_COMPRESSED_SIGNED_RED_RGTC1_EXT</code> - CType: int */
  public static final int GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8dbc;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8f2f;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_CAVEAT_SUPPORT = 0x82b8;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_64_BITS = 0x82c6;
  /** <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_array</code><br>Alias for: <code>GL_PROXY_TEXTURE_1D_ARRAY_EXT</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_1D_ARRAY = 0x8c19;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_map_buffer_alignment</code> - CType: int */
  public static final int GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90bc;
  /** <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>GL_COMPRESSED_RGBA_ARB</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA = 0x84ee;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code>, <code>GL_NV_polygon_mode</code><br>Alias for: <code>GL_FILL_NV</code> - CType: int */
  public static final int GL_FILL = 0x1b02;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_1_X_32 = 0x82bb;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_1_X_16 = 0x82be;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8f27;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code><br>Alias for: <code>GL_PROXY_TEXTURE_2D_EXT</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_2D = 0x8064;
  /** <code>GL_AMD_blend_minmax_factor</code> - CType: int */
  public static final int GL_FACTOR_MIN_AMD = 0x901c;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_4_X_16 = 0x82bc;
  /** <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>GL_COMPRESSED_RGB_ARB</code> - CType: int */
  public static final int GL_COMPRESSED_RGB = 0x84ed;
  /** <code>GL_KHR_no_error</code> - CType: int */
  public static final int GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x8;
  /** <code>GL_VERSION_1_2</code>, <code>GL_EXT_texture3D</code><br>Alias for: <code>GL_PROXY_TEXTURE_3D_EXT</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_3D = 0x8070;
  /** <code>GL_ARB_sparse_buffer</code> - CType: int */
  public static final int GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82f8;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_SUPPORTED = 0x826f;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8f31;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code><br>Alias for: <code>GL_PROXY_TEXTURE_1D_EXT</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_1D = 0x8063;
  /** <code>GL_ARB_provoking_vertex</code>, <code>GL_VERSION_3_2</code>, <code>GL_EXT_provoking_vertex</code><br>Alias for: <code>GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT</code> - CType: int */
  public static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8e4c;
  /** <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB</code> - CType: int */
  public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86a0;
  /** <code>GL_VERSION_2_1</code>, <code>GL_EXT_texture_sRGB</code><br>Alias for: <code>GL_COMPRESSED_SRGB_EXT</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB = 0x8c48;
  /** <code>GL_VERSION_3_0</code> - CType: int */
  public static final int GL_COMPRESSED_RED = 0x8225;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_4_X_32 = 0x82b9;
  /** <code>GL_ARB_texture_compression_rgtc</code>, <code>GL_VERSION_3_0</code> - CType: int */
  public static final int GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8dbe;
  /** <code>GL_VERSION_3_1</code>, <code>GL_ARB_shader_objects</code><br>Alias for: <code>GL_SAMPLER_2D_RECT_ARB</code> - CType: int */
  public static final int GL_SAMPLER_2D_RECT = 0x8b63;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8f1e;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_POINT_SIZE_RANGE = 0xb12;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8f1f;
  /** <code>GL_ARB_seamless_cube_map</code>, <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884f;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> - CType: int */
  public static final int GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912e;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92c6;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_VERTEX_ARRAY_LENGTH_NV = 0x8f2b;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92c8;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_AUTO_GENERATE_MIPMAP = 0x8295;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_IMAGE_2D_RECT_EXT</code> - CType: int */
  public static final int GL_IMAGE_2D_RECT = 0x904f;
  /** <code>GL_VERSION_3_1</code>, <code>GL_NV_primitive_restart</code><br>Alias for: <code>GL_PRIMITIVE_RESTART_INDEX_NV</code> - CType: int */
  public static final int GL_PRIMITIVE_RESTART_INDEX = 0x8f9e;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92da;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> - CType: int */
  public static final int GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912d;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_96_BITS = 0x82c5;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_INDEX_ARRAY_ADDRESS_NV = 0x8f24;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_PIXEL_FORMAT = 0x82a9;
  /** <code>GL_VERSION_1_2</code> - CType: int */
  public static final int GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
  /** <code>GL_AMD_debug_output</code> - CType: int */
  public static final int GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_COLOR_ARRAY_LENGTH_NV = 0x8f2d;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92ca;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82af;
  /** <code>GL_VERSION_1_2</code> - CType: int */
  public static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0xb13;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_BACK_RIGHT = 0x403;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_PREFERRED = 0x8270;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_READ_PIXELS_TYPE = 0x828e;
  /** <code>GL_ARB_transform_feedback2</code>, <code>GL_VERSION_4_0</code>, <code>GL_NV_transform_feedback2</code><br>Alias for: <code>GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV</code> - CType: int */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8e23;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VERTEX_TEXTURE = 0x829b;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_VERTEX_ARRAY_ADDRESS_NV = 0x8f21;
  /** <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_cube_map</code>, <code>GL_EXT_texture_cube_map</code><br>Alias for: <code>GL_PROXY_TEXTURE_CUBE_MAP_ARB</code>, <code>GL_PROXY_TEXTURE_CUBE_MAP_EXT</code> - CType: int */
  public static final int GL_PROXY_TEXTURE_CUBE_MAP = 0x851b;
  /** <code>GL_VERSION_3_1</code>, <code>GL_EXT_render_snorm</code><br>Alias for: <code>GL_R16_SNORM_EXT</code> - CType: int */
  public static final int GL_R16_SNORM = 0x8f98;
  /** <code>GL_VERSION_3_1</code>, <code>GL_NV_primitive_restart</code><br>Alias for: <code>GL_PRIMITIVE_RESTART_NV</code> - CType: int */
  public static final int GL_PRIMITIVE_RESTART = 0x8f9d;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_PACK_SWAP_BYTES = 0xd00;
  /** <code>GL_NV_texture_multisample</code> - CType: int */
  public static final int GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
  /** <code>GL_VERSION_3_1</code>, <code>GL_EXT_texture_norm16</code><br>Alias for: <code>GL_RGB16_SNORM_EXT</code> - CType: int */
  public static final int GL_RGB16_SNORM = 0x8f9a;
  /** <code>GL_ARB_sparse_texture</code> - CType: int */
  public static final int GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91a7;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_BPTC_FLOAT = 0x82d3;
  /** <code>GL_VERSION_1_2</code> - CType: int */
  public static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0xb23;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8f30;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_RIGHT = 0x407;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_LINE_WIDTH_GRANULARITY = 0xb23;
  /** <code>GL_VERSION_3_0</code> - CType: int */
  public static final int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x1;
  /** <code>GL_ARB_texture_rg</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_norm16</code><br>Alias for: <code>GL_RG16_EXT</code> - CType: int */
  public static final int GL_RG16 = 0x822c;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_16_BITS = 0x82ca;
  /** <code>GL_ARB_transform_feedback_overflow_query</code> - CType: int */
  public static final int GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82ec;
  /** <code>GL_NV_vertex_buffer_unified_memory</code> - CType: int */
  public static final int GL_COLOR_ARRAY_ADDRESS_NV = 0x8f23;
  /** <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>, <code>GL_EXT_shader_image_load_store</code><br>Alias for: <code>GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
  /** <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> - CType: int */
  public static final int GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912b;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code>, <code>GL_EXT_texture_norm16</code><br>Alias for: <code>GL_RGB16_EXT</code> - CType: int */
  public static final int GL_RGB16 = 0x8054;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SHADER_IMAGE_LOAD = 0x82a4;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code><br>Alias for: <code>GL_RGB12_EXT</code> - CType: int */
  public static final int GL_RGB12 = 0x8053;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_FRAMEBUFFER_BLEND = 0x828b;
  /** <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code> - CType: int */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92c7;
  /** <code>GL_AMD_pinned_memory</code> - CType: int */
  public static final int GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
  /** <code>GL_VERSION_1_1</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_1D = 0x8068;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_UNPACK_LSB_FIRST = 0xcf1;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_LEFT = 0x406;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code>, <code>GL_EXT_texture_norm16</code><br>Alias for: <code>GL_RGBA16_EXT</code> - CType: int */
  public static final int GL_RGBA16 = 0x805b;
  /** <code>GL_NV_texture_multisample</code> - CType: int */
  public static final int GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
  /** <code>GL_EXT_framebuffer_multisample_blit_scaled</code> - CType: int */
  public static final int GL_SCALED_RESOLVE_NICEST_EXT = 0x90bb;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_VIEW_CLASS_48_BITS = 0x82c7;
  /** <code>GL_VERSION_1_1</code>, <code>GL_EXT_texture</code><br>Alias for: <code>GL_RGBA12_EXT</code> - CType: int */
  public static final int GL_RGBA12 = 0x805a;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_FRAGMENT_TEXTURE = 0x829f;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SHADER_IMAGE_ATOMIC = 0x82a6;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_LINE_WIDTH_RANGE = 0xb22;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_IMAGE_CLASS_4_X_8 = 0x82bf;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82b1;
  /** <code>GL_VERSION_1_5</code>, <code>GL_VERSION_ES_1_0</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>GL_SRC1_ALPHA_EXT</code> - CType: int */
  public static final int GL_SRC1_ALPHA = 0x8589;
  /** <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> - CType: int */
  public static final int GL_CONTINUOUS_AMD = 0x9007;
  /** <code>GL_AMD_stencil_operation_extended</code> - CType: int */
  public static final int GL_REPLACE_VALUE_AMD = 0x874b;
  /** <code>GL_VERSION_3_1</code>, <code>GL_EXT_render_snorm</code><br>Alias for: <code>GL_RG16_SNORM_EXT</code> - CType: int */
  public static final int GL_RG16_SNORM = 0x8f99;
  /** <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> - CType: int */
  public static final int GL_FRONT_LEFT = 0x400;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82ad;
  /** <code>GL_ARB_provoking_vertex</code>, <code>GL_VERSION_3_2</code>, <code>GL_EXT_provoking_vertex</code><br>Alias for: <code>GL_PROVOKING_VERTEX_EXT</code> - CType: int */
  public static final int GL_PROVOKING_VERTEX = 0x8e4f;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_RED_TYPE = 0x8278;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_INTERNALFORMAT_ALPHA_TYPE = 0x827b;
  /** <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code> - CType: int */
  public static final int GL_READ_PIXELS_FORMAT = 0x828d;

  /** Entry point to C language function: <code> void {@native glLogicOp}(GLenum opcode) </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>, <code>GL_VERSION_1_0</code><br>   */
  public void glLogicOp(int opcode);

  /** Entry point to C language function: <code> void {@native glPointSize}(GLfloat size) </code> <br>Part of <code>GL_VERSION_ES_CM</code>, <code>GL_VERSION_1_0</code><br>   */
  public void glPointSize(float size);

  /** Entry point to C language function: <code> void {@native glPolygonMode}(GLenum face, GLenum mode) </code> <br>Part of <code>GL_VERSION_1_0</code>, <code>GL_NV_polygon_mode</code><br>Alias for: <code>glPolygonModeNV</code>   */
  public void glPolygonMode(int face, int mode);

  /** Entry point to C language function: <code> void {@native glDrawBuffer}(GLenum mode) </code> <br>Part of <code>GL_VERSION_1_0</code><br>   */
  public void glDrawBuffer(int mode);

  /** Entry point to C language function: <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params) </code> <br>Part of <code>GL_VERSION_1_0</code><br>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetDoublev(int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params) </code> <br>Part of <code>GL_VERSION_1_0</code><br>   */
  public void glGetDoublev(int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPixelStoref}(GLenum pname, GLfloat param) </code> <br>Part of <code>GL_VERSION_1_0</code><br>   */
  public void glPixelStoref(int pname, float param);

  /** Entry point to C language function: <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels) </code> <br>Part of <code>GL_VERSION_1_0</code><br>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels) </code> <br>Part of <code>GL_VERSION_1_0</code><br>   */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels) </code> <br>Part of <code>GL_VERSION_1_0</code><br>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetTexImage(int target, int level, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels) </code> <br>Part of <code>GL_VERSION_1_0</code><br>   */
  public void glGetTexImage(int target, int level, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glEnableClientState}(GLenum cap) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>, <code>GL_VERSION_ES_CL_CM</code>, <code>GL_VERSION_1_1</code><br>   */
  public void glEnableClientState(int cap);

  /** Entry point to C language function: <code> void {@native glDisableClientState}(GLenum cap) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>, <code>GL_VERSION_ES_CL_CM</code>, <code>GL_VERSION_1_1</code><br>   */
  public void glDisableClientState(int cap);

  /** Entry point to C language function: <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels) </code> <br>Part of <code>GL_VERSION_1_1</code>, <code>GL_EXT_subtexture</code><br>Alias for: <code>glTexSubImage1DEXT</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels) </code> <br>Part of <code>GL_VERSION_1_1</code>, <code>GL_EXT_subtexture</code><br>Alias for: <code>glTexSubImage1DEXT</code>   */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCopyTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) </code> <br>Part of <code>GL_VERSION_1_1</code>, <code>GL_EXT_copy_texture</code><br>Alias for: <code>glCopyTexImage1DEXT</code>   */
  public void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border);

  /** Entry point to C language function: <code> void {@native glCopyTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) </code> <br>Part of <code>GL_VERSION_1_1</code>, <code>GL_EXT_copy_texture</code><br>Alias for: <code>glCopyTexSubImage1DEXT</code>   */
  public void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>glCompressedTexImage1DARB</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>glCompressedTexImage1DARB</code>   */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>glCompressedTexSubImage1DARB</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *  data) </code> <br>Part of <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>glCompressedTexSubImage1DARB</code>   */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, void *  img) </code> <br>Part of <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>glGetCompressedTexImageARB</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetCompressedTexImage(int target, int level, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, void *  img) </code> <br>Part of <code>GL_VERSION_1_3</code>, <code>GL_ARB_texture_compression</code><br>Alias for: <code>glGetCompressedTexImageARB</code>   */
  public void glGetCompressedTexImage(int target, int level, long img_buffer_offset);

  /** Entry point to C language function: <code> void {@native glMultiDrawArrays}(GLenum mode, const GLint *  first, const GLsizei *  count, GLsizei drawcount) </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_EXT_multi_draw_arrays</code><br>Alias for: <code>glMultiDrawArraysEXT</code>
      @param first a direct or array-backed {@link java.nio.IntBuffer}
      @param count a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiDrawArrays(int mode, IntBuffer first, IntBuffer count, int drawcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawArrays}(GLenum mode, const GLint *  first, const GLsizei *  count, GLsizei drawcount) </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_EXT_multi_draw_arrays</code><br>Alias for: <code>glMultiDrawArraysEXT</code>   */
  public void glMultiDrawArrays(int mode, int[] first, int first_offset, int[] count, int count_offset, int drawcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawElements}(GLenum mode, const GLsizei *  count, GLenum type, const void * const  *  indices, GLsizei drawcount) </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_EXT_multi_draw_arrays</code><br>Alias for: <code>glMultiDrawElementsEXT</code>
      @param count a direct only {@link java.nio.IntBuffer}
      @param indices a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glMultiDrawElements(int mode, IntBuffer count, int type, PointerBuffer indices, int drawcount);

  /** Entry point to C language function: <code> void {@native glPointParameterf}(GLenum pname, GLfloat param) </code> <br>Part of <code>GL_VERSION_ES_CM</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_point_parameters</code>, <code>GL_ARB_point_parameters</code>, <code>GL_SGIS_point_parameters</code><br>Alias for: <code>glPointParameterfEXT</code>, <code>glPointParameterfARB</code>, <code>glPointParameterfSGIS</code>   */
  public void glPointParameterf(int pname, float param);

  /** Entry point to C language function: <code> void {@native glPointParameterfv}(GLenum pname, const GLfloat *  params) </code> <br>Part of <code>GL_VERSION_ES_CM</code>, <code>GL_VERSION_1_4</code>, <code>GL_SGIS_point_parameters</code>, <code>GL_EXT_point_parameters</code>, <code>GL_ARB_point_parameters</code><br>Alias for: <code>glPointParameterfvSGIS</code>, <code>glPointParameterfvEXT</code>, <code>glPointParameterfvARB</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPointParameterfv(int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glPointParameterfv}(GLenum pname, const GLfloat *  params) </code> <br>Part of <code>GL_VERSION_ES_CM</code>, <code>GL_VERSION_1_4</code>, <code>GL_SGIS_point_parameters</code>, <code>GL_EXT_point_parameters</code>, <code>GL_ARB_point_parameters</code><br>Alias for: <code>glPointParameterfvSGIS</code>, <code>glPointParameterfvEXT</code>, <code>glPointParameterfvARB</code>   */
  public void glPointParameterfv(int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPointParameteri}(GLenum pname, GLint param) </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_NV_point_sprite</code><br>Alias for: <code>glPointParameteriNV</code>   */
  public void glPointParameteri(int pname, int param);

  /** Entry point to C language function: <code> void {@native glPointParameteriv}(GLenum pname, const GLint *  params) </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_NV_point_sprite</code><br>Alias for: <code>glPointParameterivNV</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glPointParameteriv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glPointParameteriv}(GLenum pname, const GLint *  params) </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_NV_point_sprite</code><br>Alias for: <code>glPointParameterivNV</code>   */
  public void glPointParameteriv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetBufferSubData}(GLenum target, GLintptr offset, GLsizeiptr size, void *  data) </code> <br>Part of <code>GL_VERSION_1_5</code>, <code>GL_ARB_vertex_buffer_object</code><br>Alias for: <code>glGetBufferSubDataARB</code>
      @param data a direct only {@link java.nio.Buffer}   */
  public void glGetBufferSubData(int target, long offset, long size, Buffer data);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glGetVertexAttribdvARB</code>, <code>glGetVertexAttribdvNV</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetVertexAttribdv(int index, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glGetVertexAttribdvARB</code>, <code>glGetVertexAttribdvNV</code>   */
  public void glGetVertexAttribdv(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1d}(GLuint index, GLdouble x) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib1dNV</code>, <code>glVertexAttrib1dARB</code>   */
  public void glVertexAttrib1d(int index, double x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib1dvARB</code>, <code>glVertexAttrib1dvNV</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib1dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib1dvARB</code>, <code>glVertexAttrib1dvNV</code>   */
  public void glVertexAttrib1dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1s}(GLuint index, GLshort x) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib1sNV</code>, <code>glVertexAttrib1sARB</code>   */
  public void glVertexAttrib1s(int index, short x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib1svARB</code>, <code>glVertexAttrib1svNV</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib1sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib1svARB</code>, <code>glVertexAttrib1svNV</code>   */
  public void glVertexAttrib1sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2d}(GLuint index, GLdouble x, GLdouble y) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib2dARB</code>, <code>glVertexAttrib2dNV</code>   */
  public void glVertexAttrib2d(int index, double x, double y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib2dvNV</code>, <code>glVertexAttrib2dvARB</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib2dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib2dvNV</code>, <code>glVertexAttrib2dvARB</code>   */
  public void glVertexAttrib2dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2s}(GLuint index, GLshort x, GLshort y) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib2sNV</code>, <code>glVertexAttrib2sARB</code>   */
  public void glVertexAttrib2s(int index, short x, short y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib2svARB</code>, <code>glVertexAttrib2svNV</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib2sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib2svARB</code>, <code>glVertexAttrib2svNV</code>   */
  public void glVertexAttrib2sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3d}(GLuint index, GLdouble x, GLdouble y, GLdouble z) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib3dARB</code>, <code>glVertexAttrib3dNV</code>   */
  public void glVertexAttrib3d(int index, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib3dvNV</code>, <code>glVertexAttrib3dvARB</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib3dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib3dvNV</code>, <code>glVertexAttrib3dvARB</code>   */
  public void glVertexAttrib3dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3s}(GLuint index, GLshort x, GLshort y, GLshort z) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib3sNV</code>, <code>glVertexAttrib3sARB</code>   */
  public void glVertexAttrib3s(int index, short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib3svARB</code>, <code>glVertexAttrib3svNV</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib3sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code>, <code>GL_NV_vertex_program</code><br>Alias for: <code>glVertexAttrib3svARB</code>, <code>glVertexAttrib3svNV</code>   */
  public void glVertexAttrib3sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NbvARB</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4Nbv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NbvARB</code>   */
  public void glVertexAttrib4Nbv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Niv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NivARB</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4Niv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Niv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NivARB</code>   */
  public void glVertexAttrib4Niv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nsv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NsvARB</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4Nsv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nsv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NsvARB</code>   */
  public void glVertexAttrib4Nsv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nub}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NubARB</code>   */
  public void glVertexAttrib4Nub(int index, byte x, byte y, byte z, byte w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NubvARB</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4Nubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NubvARB</code>   */
  public void glVertexAttrib4Nubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NuivARB</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4Nuiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NuivARB</code>   */
  public void glVertexAttrib4Nuiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NusvARB</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4Nusv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4NusvARB</code>   */
  public void glVertexAttrib4Nusv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4bvARB</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4bv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4bvARB</code>   */
  public void glVertexAttrib4bv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4d}(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4dNV</code>, <code>glVertexAttrib4dARB</code>   */
  public void glVertexAttrib4d(int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4dvNV</code>, <code>glVertexAttrib4dvARB</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib4dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4dvNV</code>, <code>glVertexAttrib4dvARB</code>   */
  public void glVertexAttrib4dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4iv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4ivARB</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4iv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4ivARB</code>   */
  public void glVertexAttrib4iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4s}(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4sNV</code>, <code>glVertexAttrib4sARB</code>   */
  public void glVertexAttrib4s(int index, short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4svNV</code>, <code>glVertexAttrib4svARB</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4svNV</code>, <code>glVertexAttrib4svARB</code>   */
  public void glVertexAttrib4sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4ubvNV</code>, <code>glVertexAttrib4ubvARB</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4ubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_NV_vertex_program</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4ubvNV</code>, <code>glVertexAttrib4ubvARB</code>   */
  public void glVertexAttrib4ubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4uivARB</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4uivARB</code>   */
  public void glVertexAttrib4uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4usvARB</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4usv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v) </code> <br>Part of <code>GL_VERSION_2_0</code>, <code>GL_ARB_vertex_program</code><br>Alias for: <code>glVertexAttrib4usvARB</code>   */
  public void glVertexAttrib4usv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glClampColor}(GLenum target, GLenum clamp) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_ARB_color_buffer_float</code><br>Alias for: <code>glClampColorARB</code>   */
  public void glClampColor(int target, int clamp);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1i}(GLuint index, GLint x) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI1iEXT</code>   */
  public void glVertexAttribI1i(int index, int x);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2i}(GLuint index, GLint x, GLint y) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI2iEXT</code>   */
  public void glVertexAttribI2i(int index, int x, int y);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3i}(GLuint index, GLint x, GLint y, GLint z) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI3iEXT</code>   */
  public void glVertexAttribI3i(int index, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1ui}(GLuint index, GLuint x) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI1uiEXT</code>   */
  public void glVertexAttribI1ui(int index, int x);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2ui}(GLuint index, GLuint x, GLuint y) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI2uiEXT</code>   */
  public void glVertexAttribI2ui(int index, int x, int y);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3ui}(GLuint index, GLuint x, GLuint y, GLuint z) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI3uiEXT</code>   */
  public void glVertexAttribI3ui(int index, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI1ivEXT</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI1iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI1ivEXT</code>   */
  public void glVertexAttribI1iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI2ivEXT</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI2iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI2ivEXT</code>   */
  public void glVertexAttribI2iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI3ivEXT</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI3iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI3ivEXT</code>   */
  public void glVertexAttribI3iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI1uivEXT</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI1uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI1uivEXT</code>   */
  public void glVertexAttribI1uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI2uivEXT</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI2uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI2uivEXT</code>   */
  public void glVertexAttribI2uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI3uivEXT</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI3uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiv}(GLuint index, const GLuint *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI3uivEXT</code>   */
  public void glVertexAttribI3uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bv}(GLuint index, const GLbyte *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI4bvEXT</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttribI4bv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bv}(GLuint index, const GLbyte *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI4bvEXT</code>   */
  public void glVertexAttribI4bv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI4svEXT</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribI4sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4sv}(GLuint index, const GLshort *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI4svEXT</code>   */
  public void glVertexAttribI4sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubv}(GLuint index, const GLubyte *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI4ubvEXT</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttribI4ubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubv}(GLuint index, const GLubyte *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI4ubvEXT</code>   */
  public void glVertexAttribI4ubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usv}(GLuint index, const GLushort *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI4usvEXT</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribI4usv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usv}(GLuint index, const GLushort *  v) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_vertex_program4</code><br>Alias for: <code>glVertexAttribI4usvEXT</code>   */
  public void glVertexAttribI4usv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocation}(GLuint program, GLuint color, const GLchar *  name) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_EXT_gpu_shader4</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>glBindFragDataLocationEXT</code>   */
  public void glBindFragDataLocation(int program, int color, String name);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture1D}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) </code> <br>Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>glFramebufferTexture1DEXT</code>   */
  public void glFramebufferTexture1D(int target, int attachment, int textarget, int texture, int level);

  /** Entry point to C language function: <code> void {@native glPrimitiveRestartIndex}(GLuint index) </code> <br>Part of <code>GL_VERSION_3_1</code>, <code>GL_NV_primitive_restart</code><br>Alias for: <code>glPrimitiveRestartIndexNV</code>   */
  public void glPrimitiveRestartIndex(int index);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformName}(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *  length, GLchar *  uniformName) </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>, <code>GL_VERSION_3_1</code><br>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param uniformName a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveUniformName(int program, int uniformIndex, int bufSize, IntBuffer length, ByteBuffer uniformName);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformName}(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *  length, GLchar *  uniformName) </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>, <code>GL_VERSION_3_1</code><br>   */
  public void glGetActiveUniformName(int program, int uniformIndex, int bufSize, int[] length, int length_offset, byte[] uniformName, int uniformName_offset);

  /** Entry point to C language function: <code> void {@native glProvokingVertex}(GLenum mode) </code> <br>Part of <code>GL_ARB_provoking_vertex</code>, <code>GL_VERSION_3_2</code>, <code>GL_EXT_provoking_vertex</code><br>Alias for: <code>glProvokingVertexEXT</code>   */
  public void glProvokingVertex(int mode);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedback}(GLenum mode, GLuint id) </code> <br>Part of <code>GL_ARB_transform_feedback2</code>, <code>GL_VERSION_4_0</code>, <code>GL_NV_transform_feedback2</code><br>Alias for: <code>glDrawTransformFeedbackNV</code>   */
  public void glDrawTransformFeedback(int mode, int id);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackStream}(GLenum mode, GLuint id, GLuint stream) </code> <br>Part of <code>GL_ARB_transform_feedback3</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glDrawTransformFeedbackStream(int mode, int id, int stream);

  /** Entry point to C language function: <code> void {@native glBeginQueryIndexed}(GLenum target, GLuint index, GLuint id) </code> <br>Part of <code>GL_ARB_transform_feedback3</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glBeginQueryIndexed(int target, int index, int id);

  /** Entry point to C language function: <code> void {@native glEndQueryIndexed}(GLenum target, GLuint index) </code> <br>Part of <code>GL_ARB_transform_feedback3</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glEndQueryIndexed(int target, int index);

  /** Entry point to C language function: <code> void {@native glGetQueryIndexediv}(GLenum target, GLuint index, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_transform_feedback3</code>, <code>GL_VERSION_4_0</code><br>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetQueryIndexediv(int target, int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryIndexediv}(GLenum target, GLuint index, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_transform_feedback3</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glGetQueryIndexediv(int target, int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1d}(GLuint program, GLint location, GLdouble v0) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform1dEXT</code>   */
  public void glProgramUniform1d(int program, int location, double v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform1dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform1dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform1dvEXT</code>   */
  public void glProgramUniform1dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2d}(GLuint program, GLint location, GLdouble v0, GLdouble v1) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform2dEXT</code>   */
  public void glProgramUniform2d(int program, int location, double v0, double v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform2dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform2dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform2dvEXT</code>   */
  public void glProgramUniform2dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3d}(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform3dEXT</code>   */
  public void glProgramUniform3d(int program, int location, double v0, double v1, double v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform3dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform3dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform3dvEXT</code>   */
  public void glProgramUniform3dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4d}(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform4dEXT</code>   */
  public void glProgramUniform4d(int program, int location, double v0, double v1, double v2, double v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform4dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform4dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniform4dvEXT</code>   */
  public void glProgramUniform4dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix2dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix2dvEXT</code>   */
  public void glProgramUniformMatrix2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix3dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix3dvEXT</code>   */
  public void glProgramUniformMatrix3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix4dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix4dvEXT</code>   */
  public void glProgramUniformMatrix4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix2x3dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2x3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix2x3dvEXT</code>   */
  public void glProgramUniformMatrix2x3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix3x2dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3x2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix3x2dvEXT</code>   */
  public void glProgramUniformMatrix3x2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix2x4dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2x4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix2x4dvEXT</code>   */
  public void glProgramUniformMatrix2x4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix4x2dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4x2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix4x2dvEXT</code>   */
  public void glProgramUniformMatrix4x2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix3x4dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3x4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix3x4dvEXT</code>   */
  public void glProgramUniformMatrix3x4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix4x3dvEXT</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4x3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glProgramUniformMatrix4x3dvEXT</code>   */
  public void glProgramUniformMatrix4x3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1d}(GLuint index, GLdouble x) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL1dEXT</code>   */
  public void glVertexAttribL1d(int index, double x);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2d}(GLuint index, GLdouble x, GLdouble y) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL2dEXT</code>   */
  public void glVertexAttribL2d(int index, double x, double y);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3d}(GLuint index, GLdouble x, GLdouble y, GLdouble z) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL3dEXT</code>   */
  public void glVertexAttribL3d(int index, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4d}(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL4dEXT</code>   */
  public void glVertexAttribL4d(int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL1dvEXT</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL1dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL1dvEXT</code>   */
  public void glVertexAttribL1dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL2dvEXT</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL2dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL2dvEXT</code>   */
  public void glVertexAttribL2dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL3dvEXT</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL3dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL3dvEXT</code>   */
  public void glVertexAttribL3dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL4dvEXT</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL4dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4dv}(GLuint index, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribL4dvEXT</code>   */
  public void glVertexAttribL4dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribLPointer}(GLuint index, GLint size, GLenum type, GLsizei stride, const void *  pointer) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glVertexAttribLPointerEXT</code>   */
  public void glVertexAttribLPointer(int index, int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLdv}(GLuint index, GLenum pname, GLdouble *  params) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glGetVertexAttribLdvEXT</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetVertexAttribLdv(int index, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLdv}(GLuint index, GLenum pname, GLdouble *  params) </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>glGetVertexAttribLdvEXT</code>   */
  public void glGetVertexAttribLdv(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveAtomicCounterBufferiv}(GLuint program, GLuint bufferIndex, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code><br>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetActiveAtomicCounterBufferiv(int program, int bufferIndex, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetActiveAtomicCounterBufferiv}(GLuint program, GLuint bufferIndex, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_shader_atomic_counters</code>, <code>GL_VERSION_4_2</code><br>   */
  public void glGetActiveAtomicCounterBufferiv(int program, int bufferIndex, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glClearBufferData}(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *  data) </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_clear_buffer_object</code><br>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearBufferData(int target, int internalformat, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glClearBufferSubData}(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *  data) </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_clear_buffer_object</code><br>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glGetInternalformati64v}(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *  params) </code> <br>Part of <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code><br>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetInternalformati64v}(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *  params) </code> <br>Part of <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_3</code><br>   */
  public void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glInvalidateTexSubImage}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) </code> <br>Part of <code>GL_ARB_invalidate_subdata</code>, <code>GL_VERSION_4_3</code><br>   */
  public void glInvalidateTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);

  /** Entry point to C language function: <code> void {@native glInvalidateTexImage}(GLuint texture, GLint level) </code> <br>Part of <code>GL_ARB_invalidate_subdata</code>, <code>GL_VERSION_4_3</code><br>   */
  public void glInvalidateTexImage(int texture, int level);

  /** Entry point to C language function: <code> void {@native glInvalidateBufferSubData}(GLuint buffer, GLintptr offset, GLsizeiptr length) </code> <br>Part of <code>GL_ARB_invalidate_subdata</code>, <code>GL_VERSION_4_3</code><br>   */
  public void glInvalidateBufferSubData(int buffer, long offset, long length);

  /** Entry point to C language function: <code> void {@native glInvalidateBufferData}(GLuint buffer) </code> <br>Part of <code>GL_ARB_invalidate_subdata</code>, <code>GL_VERSION_4_3</code><br>   */
  public void glInvalidateBufferData(int buffer);

  /** Entry point to C language function: <code> void {@native glGetnCompressedTexImage}(GLenum target, GLint lod, GLsizei bufSize, void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_robustness</code><br>Alias for: <code>glGetnCompressedTexImageARB</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnCompressedTexImage(int target, int lod, int bufSize, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetnTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *  pixels) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_robustness</code><br>Alias for: <code>glGetnTexImageARB</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnTexImage(int target, int level, int format, int type, int bufSize, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetnUniformdv}(GLuint program, GLint location, GLsizei bufSize, GLdouble *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_robustness</code><br>Alias for: <code>glGetnUniformdvARB</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetnUniformdv(int program, int location, int bufSize, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetnUniformdv}(GLuint program, GLint location, GLsizei bufSize, GLdouble *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ARB_robustness</code><br>Alias for: <code>glGetnUniformdvARB</code>   */
  public void glGetnUniformdv(int program, int location, int bufSize, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glBufferPageCommitmentARB}(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) </code> <br>Part of <code>GL_ARB_sparse_buffer</code><br>   */
  public void glBufferPageCommitmentARB(int target, long offset, long size, boolean commit);

  /** Entry point to C language function: <code> void {@native glNamedBufferPageCommitmentEXT}(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) </code> <br>Part of <code>GL_ARB_sparse_buffer</code><br>   */
  public void glNamedBufferPageCommitmentEXT(int buffer, long offset, long size, boolean commit);

  /** Entry point to C language function: <code> void {@native glNamedBufferPageCommitmentARB}(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) </code> <br>Part of <code>GL_ARB_sparse_buffer</code><br>   */
  public void glNamedBufferPageCommitmentARB(int buffer, long offset, long size, boolean commit);

  /** Entry point to C language function: <code> void {@native glTexPageCommitmentARB}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) </code> <br>Part of <code>GL_ARB_sparse_texture</code><br>   */
  public void glTexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, boolean commit);

  /** Entry point to C language function: <code> void {@native glDebugMessageEnableAMD}(GLenum category, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled) </code> <br>Part of <code>GL_AMD_debug_output</code><br>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDebugMessageEnableAMD(int category, int severity, int count, IntBuffer ids, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageEnableAMD}(GLenum category, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled) </code> <br>Part of <code>GL_AMD_debug_output</code><br>   */
  public void glDebugMessageEnableAMD(int category, int severity, int count, int[] ids, int ids_offset, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageInsertAMD}(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *  buf) </code> <br>Part of <code>GL_AMD_debug_output</code><br>   */
  public void glDebugMessageInsertAMD(int category, int severity, int id, int length, String buf);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLogAMD}(GLuint count, GLsizei bufsize, GLenum *  categories, GLuint *  severities, GLuint *  ids, GLsizei *  lengths, GLchar *  message) </code> <br>Part of <code>GL_AMD_debug_output</code><br>
      @param categories a direct or array-backed {@link java.nio.IntBuffer}
      @param severities a direct or array-backed {@link java.nio.IntBuffer}
      @param ids a direct or array-backed {@link java.nio.IntBuffer}
      @param lengths a direct or array-backed {@link java.nio.IntBuffer}
      @param message a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetDebugMessageLogAMD(int count, int bufsize, IntBuffer categories, IntBuffer severities, IntBuffer ids, IntBuffer lengths, ByteBuffer message);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLogAMD}(GLuint count, GLsizei bufsize, GLenum *  categories, GLuint *  severities, GLuint *  ids, GLsizei *  lengths, GLchar *  message) </code> <br>Part of <code>GL_AMD_debug_output</code><br>   */
  public int glGetDebugMessageLogAMD(int count, int bufsize, int[] categories, int categories_offset, int[] severities, int severities_offset, int[] ids, int ids_offset, int[] lengths, int lengths_offset, byte[] message, int message_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformui64vNV}(GLuint program, GLint location, GLuint64EXT *  params) </code> <br>Part of <code>GL_NV_shader_buffer_load</code>, <code>GL_AMD_gpu_shader_int64</code><br>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetUniformui64vNV(int program, int location, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformui64vNV}(GLuint program, GLint location, GLuint64EXT *  params) </code> <br>Part of <code>GL_NV_shader_buffer_load</code>, <code>GL_AMD_gpu_shader_int64</code><br>   */
  public void glGetUniformui64vNV(int program, int location, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiDrawArraysIndirectAMD}(GLenum mode, const void *  indirect, GLsizei primcount, GLsizei stride) </code> <br>Part of <code>GL_AMD_multi_draw_indirect</code><br>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawArraysIndirectAMD(int mode, Buffer indirect, int primcount, int stride);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsIndirectAMD}(GLenum mode, GLenum type, const void *  indirect, GLsizei primcount, GLsizei stride) </code> <br>Part of <code>GL_AMD_multi_draw_indirect</code><br>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawElementsIndirectAMD(int mode, int type, Buffer indirect, int primcount, int stride);

  /** Entry point to C language function: <code> void {@native glSetMultisamplefvAMD}(GLenum pname, GLuint index, const GLfloat *  val) </code> <br>Part of <code>GL_AMD_sample_positions</code><br>
      @param val a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glSetMultisamplefvAMD(int pname, int index, FloatBuffer val);

  /** Entry point to C language function: <code> void {@native glSetMultisamplefvAMD}(GLenum pname, GLuint index, const GLfloat *  val) </code> <br>Part of <code>GL_AMD_sample_positions</code><br>   */
  public void glSetMultisamplefvAMD(int pname, int index, float[] val, int val_offset);

  /** Entry point to C language function: <code> void {@native glStencilOpValueAMD}(GLenum face, GLuint value) </code> <br>Part of <code>GL_AMD_stencil_operation_extended</code><br>   */
  public void glStencilOpValueAMD(int face, int value);

  /** Entry point to C language function: <code> void {@native glTessellationFactorAMD}(GLfloat factor) </code> <br>Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code><br>   */
  public void glTessellationFactorAMD(float factor);

  /** Entry point to C language function: <code> void {@native glTessellationModeAMD}(GLenum mode) </code> <br>Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code><br>   */
  public void glTessellationModeAMD(int mode);

  /** Entry point to C language function: <code> GLsync {@native glImportSyncEXT}(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) </code> <br>Part of <code>GL_EXT_x11_sync_object</code><br>   */
  public long glImportSyncEXT(int external_sync_type, long external_sync, int flags);

  /** Entry point to C language function: <code> void {@native glMakeBufferResidentNV}(GLenum target, GLenum access) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glMakeBufferResidentNV(int target, int access);

  /** Entry point to C language function: <code> void {@native glMakeBufferNonResidentNV}(GLenum target) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glMakeBufferNonResidentNV(int target);

  /** Entry point to C language function: <code> GLboolean {@native glIsBufferResidentNV}(GLenum target) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public boolean glIsBufferResidentNV(int target);

  /** Entry point to C language function: <code> void {@native glMakeNamedBufferResidentNV}(GLuint buffer, GLenum access) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glMakeNamedBufferResidentNV(int buffer, int access);

  /** Entry point to C language function: <code> void {@native glMakeNamedBufferNonResidentNV}(GLuint buffer) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glMakeNamedBufferNonResidentNV(int buffer);

  /** Entry point to C language function: <code> GLboolean {@native glIsNamedBufferResidentNV}(GLuint buffer) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public boolean glIsNamedBufferResidentNV(int buffer);

  /** Entry point to C language function: <code> void {@native glGetBufferParameterui64vNV}(GLenum target, GLenum pname, GLuint64EXT *  params) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetBufferParameterui64vNV(int target, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetBufferParameterui64vNV}(GLenum target, GLenum pname, GLuint64EXT *  params) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glGetBufferParameterui64vNV(int target, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterui64vNV}(GLuint buffer, GLenum pname, GLuint64EXT *  params) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetNamedBufferParameterui64vNV(int buffer, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterui64vNV}(GLuint buffer, GLenum pname, GLuint64EXT *  params) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glGetNamedBufferParameterui64vNV(int buffer, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64vNV}(GLenum value, GLuint64EXT *  result) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>
      @param result a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetIntegerui64vNV(int value, LongBuffer result);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64vNV}(GLenum value, GLuint64EXT *  result) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glGetIntegerui64vNV(int value, long[] result, int result_offset);

  /** Entry point to C language function: <code> void {@native glUniformui64NV}(GLint location, GLuint64EXT value) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glUniformui64NV(int location, long value);

  /** Entry point to C language function: <code> void {@native glUniformui64vNV}(GLint location, GLsizei count, const GLuint64EXT *  value) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>
      @param value a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glUniformui64vNV(int location, int count, LongBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformui64vNV}(GLint location, GLsizei count, const GLuint64EXT *  value) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glUniformui64vNV(int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64NV}(GLuint program, GLint location, GLuint64EXT value) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glProgramUniformui64NV(int program, int location, long value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64vNV}(GLuint program, GLint location, GLsizei count, const GLuint64EXT *  value) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>
      @param value a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glProgramUniformui64vNV(int program, int location, int count, LongBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64vNV}(GLuint program, GLint location, GLsizei count, const GLuint64EXT *  value) </code> <br>Part of <code>GL_NV_shader_buffer_load</code><br>   */
  public void glProgramUniformui64vNV(int program, int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glTexImage2DMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) </code> <br>Part of <code>GL_NV_texture_multisample</code><br>   */
  public void glTexImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTexImage3DMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) </code> <br>Part of <code>GL_NV_texture_multisample</code><br>   */
  public void glTexImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage2DMultisampleNV}(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) </code> <br>Part of <code>GL_NV_texture_multisample</code><br>   */
  public void glTextureImage2DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage3DMultisampleNV}(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) </code> <br>Part of <code>GL_NV_texture_multisample</code><br>   */
  public void glTextureImage3DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage2DMultisampleCoverageNV}(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) </code> <br>Part of <code>GL_NV_texture_multisample</code><br>   */
  public void glTextureImage2DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage3DMultisampleCoverageNV}(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) </code> <br>Part of <code>GL_NV_texture_multisample</code><br>   */
  public void glTextureImage3DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glBufferAddressRangeNV}(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glBufferAddressRangeNV(int pname, int index, long address, long length);

  /** Entry point to C language function: <code> void {@native glVertexFormatNV}(GLint size, GLenum type, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glVertexFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glNormalFormatNV}(GLenum type, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glNormalFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glColorFormatNV}(GLint size, GLenum type, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glColorFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glIndexFormatNV}(GLenum type, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glIndexFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glTexCoordFormatNV}(GLint size, GLenum type, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glTexCoordFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glEdgeFlagFormatNV}(GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glEdgeFlagFormatNV(int stride);

  /** Entry point to C language function: <code> void {@native glSecondaryColorFormatNV}(GLint size, GLenum type, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glSecondaryColorFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glFogCoordFormatNV}(GLenum type, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glFogCoordFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glVertexAttribFormatNV}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glVertexAttribFormatNV(int index, int size, int type, boolean normalized, int stride);

  /** Entry point to C language function: <code> void {@native glVertexAttribIFormatNV}(GLuint index, GLint size, GLenum type, GLsizei stride) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glVertexAttribIFormatNV(int index, int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64i_vNV}(GLenum value, GLuint index, GLuint64EXT *  result) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>
      @param result a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetIntegerui64i_vNV(int value, int index, LongBuffer result);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64i_vNV}(GLenum value, GLuint index, GLuint64EXT *  result) </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code><br>   */
  public void glGetIntegerui64i_vNV(int value, int index, long[] result, int result_offset);


} // end of class GL2GL3
