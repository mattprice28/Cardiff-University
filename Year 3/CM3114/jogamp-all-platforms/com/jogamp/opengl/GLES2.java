/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Sat Oct 10 03:13:31 CEST 2015 ----! */

package com.jogamp.opengl;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <p>This interface contains all OpenGL ES 2.0 methods,
  * as well as most of it's extensions defined at the time of this specification.</p>
  */
public interface GLES2 extends GL2ES2{

  /** <code>GL_ANGLE_program_binary</code> - CType: int */
  public static final int GL_PROGRAM_BINARY_ANGLE = 0x93a6;
  /** <code>GL_EXT_raster_multisample</code> - CType: int */
  public static final int GL_RASTER_MULTISAMPLE_EXT = 0x9327;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93d2;
  /** <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0xd;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 0x919a;
  /** <code>GL_NV_framebuffer_blit</code> - CType: int */
  public static final int GL_READ_FRAMEBUFFER_NV = 0x8ca8;
  /** <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_LINE_STRIP_ADJACENCY_EXT = 0xb;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_FIRST_VERTEX_CONVENTION_OES = 0x8e4d;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 0x92ce;
  /** <code>GL_VERSION_3_0</code>, <code>GL_NV_conditional_render</code><br>Alias for: <code>GL_QUERY_WAIT_NV</code> - CType: int */
  public static final int GL_QUERY_WAIT = 0x8e13;
  /** <code>GL_NV_fill_rectangle</code> - CType: int */
  public static final int GL_FILL_RECTANGLE_NV = 0x933c;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90d8;
  /** <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_AUTOMATIC_NV = 0x8ed7;
  /** <code>GL_OES_EGL_image_external</code> - CType: int */
  public static final int GL_TEXTURE_EXTERNAL_OES = 0x8d65;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916;
  /** <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8ddf;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 0x8e81;
  /** <code>GL_EXT_blend_func_extended</code> - CType: int */
  public static final int GL_SRC_ALPHA_SATURATE_EXT = 0x308;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93e5;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_PATCH_VERTICES_EXT = 0x8e7d;
  /** <code>GL_OES_stencil8</code>, <code>GL_OES_texture_stencil8</code> - CType: int */
  public static final int GL_STENCIL_INDEX8_OES = 0x8d48;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_STENCIL_BUFFER_BIT2_QCOM = 0x40000;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_VIRTUAL_PAGE_SIZE_Y_EXT = 0x9196;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: long */
  public static final long GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000L;
  /** <code>GL_AMD_program_binary_Z400</code> - CType: int */
  public static final int GL_Z400_BINARY_AMD = 0x8740;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_COLOR_BUFFER_BIT7_QCOM = 0x80;
  /** <code>GL_EXT_blend_func_extended</code> - CType: int */
  public static final int GL_SRC1_COLOR_EXT = 0x88f9;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_ISOLINES_OES = 0x8e7a;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x905f;
  /** <code>GL_NV_path_rendering_shared_edge</code> - CType: int */
  public static final int GL_SHARED_EDGE_NV = 0xc0;
  /** <code>GL_NV_framebuffer_multisample</code> - CType: int */
  public static final int GL_RENDERBUFFER_SAMPLES_NV = 0x8cab;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_SLUMINANCE8_NV = 0x8c47;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 0x8e83;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_COLOR_BUFFER_BIT0_QCOM = 0x1;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_blend_equation_advanced</code>, <code>GL_NV_blend_equation_advanced</code><br>Alias for: <code>GL_HSL_SATURATION_KHR</code>, <code>GL_HSL_SATURATION_NV</code> - CType: int */
  public static final int GL_HSL_SATURATION = 0x92ae;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8e1f;
  /** <code>GL_EXT_YUV_target</code> - CType: int */
  public static final int GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 0x8be7;
  /** <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_LINES_ADJACENCY_EXT = 0xa;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 0x919f;
  /** <code>GL_VIV_shader_binary</code> - CType: int */
  public static final int GL_SHADER_BINARY_VIV = 0x8fc4;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_PATCH_COMPONENTS_OES = 0x8e84;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x8da7;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 0x92d5;
  /** <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_SIZE_EXT = 0x919e;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93e3;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_IMAGE_CUBE_MAP_ARRAY_OES = 0x9054;
  /** <code>GL_NV_framebuffer_mixed_samples</code> - CType: int */
  public static final int GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 0x9309;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900c;
  /** <code>GL_NV_conservative_raster</code> - CType: int */
  public static final int GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
  /** <code>GL_APPLE_texture_max_level</code> - CType: int */
  public static final int GL_TEXTURE_MAX_LEVEL_APPLE = 0x813d;
  /** <code>GL_NV_polygon_mode</code> - CType: int */
  public static final int GL_FILL_NV = 0x1b02;
  /** <code>GL_NV_framebuffer_blit</code> - CType: int */
  public static final int GL_DRAW_FRAMEBUFFER_NV = 0x8ca9;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_INT_SAMPLER_BUFFER_OES = 0x8dd0;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8a32;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93b5;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93c3;
  /** <code>GL_NV_non_square_matrices</code> - CType: int */
  public static final int GL_FLOAT_MAT2x4_NV = 0x8b66;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_OES_texture_view</code>, <code>GL_EXT_texture_view</code><br>Alias for: <code>GL_TEXTURE_VIEW_MIN_LAYER_OES</code>, <code>GL_TEXTURE_VIEW_MIN_LAYER_EXT</code> - CType: int */
  public static final int GL_TEXTURE_VIEW_MIN_LAYER = 0x82dd;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_ETC1_SRGB8_NV = 0x88ee;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8e7f;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_KHR_blend_equation_advanced</code><br>Alias for: <code>GL_COLORBURN_NV</code>, <code>GL_COLORBURN_KHR</code> - CType: int */
  public static final int GL_COLORBURN = 0x929a;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93b0;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93db;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93e1;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_GEN_LEVEL_OES = 0x8e7e;
  /** <code>GL_OES_EGL_image_external</code> - CType: int */
  public static final int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8d68;
  /** <code>GL_NV_non_square_matrices</code> - CType: int */
  public static final int GL_FLOAT_MAT3x2_NV = 0x8b67;
  /** <code>GL_VERSION_3_0</code>, <code>GL_NV_conditional_render</code><br>Alias for: <code>GL_QUERY_BY_REGION_NO_WAIT_NV</code> - CType: int */
  public static final int GL_QUERY_BY_REGION_NO_WAIT = 0x8e16;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x906a;
  /** <code>GL_NV_conservative_raster</code> - CType: int */
  public static final int GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
  /** <code>GL_EXT_pvrtc_sRGB</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8a56;
  /** <code>GL_EXT_texture_sRGB_R8</code> - CType: int */
  public static final int GL_SR8_EXT = 0x8fbd;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8e75;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x8e84;
  /** <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8da7;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_DEPTH_BUFFER_BIT0_QCOM = 0x100;
  /** <code>GL_EXT_discard_framebuffer</code> - CType: int */
  public static final int GL_STENCIL_EXT = 0x1802;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_DEPTH_BUFFER_BIT4_QCOM = 0x1000;
  /** <code>GL_IMG_texture_compression_pvrtc</code> - CType: int */
  public static final int GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8c00;
  /** <code>GL_ANGLE_texture_compression_dxt3</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83f2;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8c4c;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_CONTROL_SHADER_BIT_EXT = 0x8;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93d4;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92d3;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_STENCIL_BUFFER_BIT4_QCOM = 0x100000;
  /** <code>GL_EXT_texture_buffer</code>, <code>GL_EXT_texture_buffer_object</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_BUFFER_EXT = 0x8c2c;
  /** <code>GL_NV_viewport_array</code> - CType: int */
  public static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 0x825f;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_GEN_LEVEL_EXT = 0x8e7e;
  /** <code>GL_AMD_compressed_3DC_texture</code> - CType: int */
  public static final int GL_3DC_XY_AMD = 0x87fa;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_blend_equation_advanced</code>, <code>GL_NV_blend_equation_advanced</code><br>Alias for: <code>GL_SOFTLIGHT_KHR</code>, <code>GL_SOFTLIGHT_NV</code> - CType: int */
  public static final int GL_SOFTLIGHT = 0x929c;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_UNDEFINED_VERTEX_OES = 0x8260;
  /** <code>GL_ANGLE_translated_shader_source</code> - CType: int */
  public static final int GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93a0;
  /** <code>GL_OVR_multiview</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_VERSION_1_1</code>, <code>GL_VERSION_ES_1_0</code>, <code>GL_EXT_vertex_array</code>, <code>GL_KHR_debug</code><br>Alias for: <code>GL_VERTEX_ARRAY_EXT</code>, <code>GL_VERTEX_ARRAY_KHR</code> - CType: int */
  public static final int GL_VERTEX_ARRAY = 0x8074;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92ce;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_LAYER_PROVOKING_VERTEX_OES = 0x825e;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_IS_PER_PATCH_OES = 0x92e7;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 0x8e86;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93bc;
  /** <code>GL_EXT_texture_sRGB_decode</code> - CType: int */
  public static final int GL_DECODE_EXT = 0x8a49;
  /** <code>GL_NV_framebuffer_mixed_samples</code> - CType: int */
  public static final int GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932f;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_GEN_MODE_OES = 0x8e76;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93d5;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x1000000;
  /** <code>GL_OES_texture_3D</code>, <code>GL_EXT_framebuffer_object</code><br>Alias for: <code>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES</code>, <code>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET = 0x8cd4;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 0x9124;
  /** <code>GL_QCOM_binning_control</code> - CType: int */
  public static final int GL_GPU_OPTIMIZED_QCOM = 0x8fb2;
  /** <code>GL_ANGLE_framebuffer_blit</code> - CType: int */
  public static final int GL_READ_FRAMEBUFFER_ANGLE = 0x8ca8;
  /** <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900e;
  /** <code>GL_NV_polygon_mode</code> - CType: int */
  public static final int GL_POLYGON_MODE_NV = 0xb40;
  /** <code>GL_NV_fragment_coverage_to_color</code> - CType: int */
  public static final int GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92dd;
  /** <code>GL_EXT_raster_multisample</code> - CType: int */
  public static final int GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932a;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93e9;
  /** <code>GL_EXT_raster_multisample</code> - CType: int */
  public static final int GL_RASTER_SAMPLES_EXT = 0x9328;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_DEPTH_BUFFER_BIT7_QCOM = 0x8000;
  /** <code>GL_EXT_buffer_storage</code> - CType: int */
  public static final int GL_MAP_PERSISTENT_BIT_EXT = 0x40;
  /** <code>GL_EXT_pvrtc_sRGB</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93f1;
  /** <code>GL_ANGLE_texture_compression_dxt5</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83f3;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8ddf;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_NUM_SPARSE_LEVELS_EXT = 0x91aa;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93d0;
  /** <code>GL_ANGLE_framebuffer_blit</code> - CType: int */
  public static final int GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8caa;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93e7;
  /** <code>GL_NV_polygon_mode</code> - CType: int */
  public static final int GL_POLYGON_OFFSET_LINE_NV = 0x2a02;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_KHR_blend_equation_advanced</code><br>Alias for: <code>GL_HARDLIGHT_NV</code>, <code>GL_HARDLIGHT_KHR</code> - CType: int */
  public static final int GL_HARDLIGHT = 0x929b;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_OES_texture_view</code>, <code>GL_EXT_texture_view</code><br>Alias for: <code>GL_TEXTURE_VIEW_MIN_LEVEL_OES</code>, <code>GL_TEXTURE_VIEW_MIN_LEVEL_EXT</code> - CType: int */
  public static final int GL_TEXTURE_VIEW_MIN_LEVEL = 0x82db;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 0x8918;
  /** <code>GL_EXT_shader_pixel_local_storage</code> - CType: int */
  public static final int GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8f63;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93c1;
  /** <code>GL_EXT_texture_sRGB_RG8</code> - CType: int */
  public static final int GL_SRG8_EXT = 0x8fbe;
  /** <code>GL_NV_polygon_mode</code> - CType: int */
  public static final int GL_POINT_NV = 0x1b00;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_GEN_VERTEX_ORDER_OES = 0x8e78;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_FORMAT_QCOM = 0x8bd6;
  /** <code>GL_OES_sample_shading</code> - CType: int */
  public static final int GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x8c37;
  /** <code>GL_EXT_buffer_storage</code> - CType: int */
  public static final int GL_DYNAMIC_STORAGE_BIT_EXT = 0x100;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8e1e;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x8000000;
  /** <code>GL_EXT_pvrtc_sRGB</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8a57;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_SRGB8_NV = 0x8c41;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93d9;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93c4;
  /** <code>GL_ARM_mali_program_binary</code> - CType: int */
  public static final int GL_MALI_PROGRAM_BINARY_ARM = 0x8f61;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93b9;
  /** <code>GL_EXT_multiview_draw_buffers</code> - CType: int */
  public static final int GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x90f2;
  /** <code>GL_VERSION_3_3</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_NV_instanced_arrays</code>, <code>GL_EXT_instanced_arrays</code>, <code>GL_ARB_instanced_arrays</code>, <code>GL_ANGLE_instanced_arrays</code><br>Alias for: <code>GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV</code>, <code>GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT</code>, <code>GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB</code>, <code>GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88fe;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_SHADER_BIT_EXT = 0x4;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_TYPE_QCOM = 0x8bd7;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_DEPTH_BUFFER_BIT5_QCOM = 0x2000;
  /** <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_TRIANGLES_ADJACENCY_EXT = 0xc;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93bd;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_IS_PER_PATCH_EXT = 0x92e7;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_LINE_STRIP_ADJACENCY_OES = 0xb;
  /** <code>GL_OES_sample_shading</code> - CType: int */
  public static final int GL_SAMPLE_SHADING_OES = 0x8c36;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 0x91a8;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317;
  /** <code>GL_IMG_shader_binary</code> - CType: int */
  public static final int GL_SGX_BINARY_IMG = 0x8c0a;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_SAMPLER_BUFFER_OES = 0x8dc2;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93b4;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_EVALUATION_SHADER_EXT = 0x8e87;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93c5;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_COLOR_BUFFER_BIT2_QCOM = 0x4;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_blend_equation_advanced</code>, <code>GL_NV_blend_equation_advanced</code><br>Alias for: <code>GL_LIGHTEN_KHR</code>, <code>GL_LIGHTEN_NV</code> - CType: int */
  public static final int GL_LIGHTEN = 0x9298;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_FRACTIONAL_EVEN_EXT = 0x8e7c;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 0x90d8;
  /** <code>GL_AMD_compressed_ATC_texture</code> - CType: int */
  public static final int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87ee;
  /** <code>GL_NV_non_square_matrices</code> - CType: int */
  public static final int GL_FLOAT_MAT4x2_NV = 0x8b69;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_UNDEFINED_VERTEX_EXT = 0x8260;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 0x91a9;
  /** <code>GL_EXT_discard_framebuffer</code> - CType: int */
  public static final int GL_DEPTH_EXT = 0x1801;
  /** <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_OFFSET_EXT = 0x919d;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_CONTROL_SHADER_EXT = 0x8e88;
  /** <code>GL_EXT_transform_feedback</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_PRIMITIVES_GENERATED_EXT = 0x8c87;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_HEIGHT_QCOM = 0x8bd3;
  /** <code>GL_NV_sample_locations</code> - CType: int */
  public static final int GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933d;
  /** <code>GL_NV_viewport_array</code> - CType: int */
  public static final int GL_VIEWPORT_BOUNDS_RANGE_NV = 0x825d;
  /** <code>GL_OES_primitive_bounding_box</code> - CType: int */
  public static final int GL_PRIMITIVE_BOUNDING_BOX_OES = 0x92be;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 0x8de0;
  /** <code>GL_NV_non_square_matrices</code> - CType: int */
  public static final int GL_FLOAT_MAT2x3_NV = 0x8b65;
  /** <code>GL_EXT_provoking_vertex</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_FIRST_VERTEX_CONVENTION_EXT = 0x8e4d;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93da;
  /** <code>GL_NV_framebuffer_mixed_samples</code> - CType: int */
  public static final int GL_STENCIL_SAMPLES_NV = 0x932e;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8e83;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 0x8e89;
  /** <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919f;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93c2;
  /** <code>GL_QCOM_alpha_test</code> - CType: int */
  public static final int GL_ALPHA_TEST_QCOM = 0xbc0;
  /** <code>GL_OES_compressed_ETC1_RGB8_texture</code> - CType: int */
  public static final int GL_ETC1_RGB8_OES = 0x8d64;
  /** <code>GL_IMG_read_format</code> - CType: int */
  public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_PATCH_VERTICES_OES = 0x8e72;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 0x90cc;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_KHR_blend_equation_advanced</code><br>Alias for: <code>GL_MULTIPLY_NV</code>, <code>GL_MULTIPLY_KHR</code> - CType: int */
  public static final int GL_MULTIPLY = 0x9294;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_STENCIL_BUFFER_BIT0_QCOM = 0x10000;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93b1;
  /** <code>GL_EXT_raster_multisample</code> - CType: int */
  public static final int GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932b;
  /** <code>GL_EXT_texture_sRGB_decode</code> - CType: int */
  public static final int GL_TEXTURE_SRGB_DECODE_EXT = 0x8a48;
  /** <code>GL_QCOM_perfmon_global_mode</code> - CType: int */
  public static final int GL_PERFMON_GLOBAL_MODE_QCOM = 0x8fa0;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8bd5;
  /** <code>GL_NV_framebuffer_multisample</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8d56;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 0x8dd8;
  /** <code>GL_APPLE_texture_packed_float</code> - CType: int */
  public static final int GL_R11F_G11F_B10F_APPLE = 0x8c3a;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_SLUMINANCE_NV = 0x8c46;
  /** <code>GL_EXT_render_snorm</code> - CType: int */
  public static final int GL_RGBA16_SNORM_EXT = 0x8f9b;
  /** <code>GL_NV_read_buffer</code> - CType: int */
  public static final int GL_READ_BUFFER_NV = 0xc02;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 0x8da8;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_EXT_texture_view</code>, <code>GL_OES_texture_view</code><br>Alias for: <code>GL_TEXTURE_VIEW_NUM_LEVELS_EXT</code>, <code>GL_TEXTURE_VIEW_NUM_LEVELS_OES</code> - CType: int */
  public static final int GL_TEXTURE_VIEW_NUM_LEVELS = 0x82dc;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_COLOR_BUFFER_BIT5_QCOM = 0x20;
  /** <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900c;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_OFFSET_OES = 0x919d;
  /** <code>GL_EXT_multisampled_render_to_texture</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8d6c;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8c4e;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93b7;
  /** <code>GL_APPLE_texture_packed_float</code> - CType: int */
  public static final int GL_RGB9_E5_APPLE = 0x8c3d;
  /** <code>GL_NV_framebuffer_mixed_samples</code> - CType: int */
  public static final int GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
  /** <code>GL_IMG_program_binary</code> - CType: int */
  public static final int GL_SGX_PROGRAM_BINARY_IMG = 0x9130;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93c0;
  /** <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8c29;
  /** <code>GL_APPLE_texture_packed_float</code> - CType: int */
  public static final int GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8c3b;
  /** <code>GL_NV_sample_locations</code> - CType: int */
  public static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93e4;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x2000000;
  /** <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ed5;
  /** <code>GL_NV_conservative_raster</code> - CType: int */
  public static final int GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
  /** <code>GL_NV_shadow_samplers_cube</code> - CType: int */
  public static final int GL_SAMPLER_CUBE_SHADOW_NV = 0x8dc5;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8e89;
  /** <code>GL_EXT_provoking_vertex</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_LAST_VERTEX_CONVENTION_EXT = 0x8e4e;
  /** <code>GL_VERSION_4_5</code>, <code>GL_KHR_context_flush_control</code><br>Alias for: <code>GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR</code> - CType: int */
  public static final int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82fc;
  /** <code>GL_ANGLE_texture_usage</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93a3;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_TEXTURE_CUBE_MAP_ARRAY_OES = 0x9009;
  /** <code>GL_KHR_no_error</code> - CType: int */
  public static final int GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x8;
  /** <code>GL_EXT_shader_image_load_store</code>, <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_IMAGE_BUFFER_EXT = 0x9051;
  /** <code>GL_NV_instanced_arrays</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88fe;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93c9;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_CLIP_DISTANCE6_APPLE = 0x3006;
  /** <code>GL_IMG_texture_compression_pvrtc2</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_CONTROL_SHADER_BIT_OES = 0x8;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_KHR_blend_equation_advanced</code><br>Alias for: <code>GL_DIFFERENCE_NV</code>, <code>GL_DIFFERENCE_KHR</code> - CType: int */
  public static final int GL_DIFFERENCE = 0x929e;
  /** <code>GL_VERSION_3_0</code>, <code>GL_NV_conditional_render</code><br>Alias for: <code>GL_QUERY_NO_WAIT_NV</code> - CType: int */
  public static final int GL_QUERY_NO_WAIT = 0x8e14;
  /** <code>GL_EXT_buffer_storage</code> - CType: int */
  public static final int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x4000;
  /** <code>GL_OES_texture_storage_multisample_2d_array</code> - CType: int */
  public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_CLIP_DISTANCE0_APPLE = 0x3000;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_CLIP_DISTANCE7_APPLE = 0x3007;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8e80;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_CLIP_DISTANCE1_APPLE = 0x3001;
  /** <code>GL_EXT_multiview_draw_buffers</code> - CType: int */
  public static final int GL_DRAW_BUFFER_EXT = 0xc01;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 0x9123;
  /** <code>GL_NV_sample_locations</code> - CType: int */
  public static final int GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
  /** <code>GL_EXT_shader_image_load_store</code>, <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_CLIP_DISTANCE5_APPLE = 0x3005;
  /** <code>GL_VERSION_4_5</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_robustness</code><br>Alias for: <code>GL_CONTEXT_LOST_KHR</code> - CType: int */
  public static final int GL_CONTEXT_LOST = 0x507;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_CLIP_DISTANCE2_APPLE = 0x3002;
  /** <code>GL_EXT_texture_norm16</code> - CType: int */
  public static final int GL_R16_EXT = 0x822a;
  /** <code>GL_EXT_blend_func_extended</code> - CType: int */
  public static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x88fc;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_EVALUATION_SHADER_BIT_EXT = 0x10;
  /** <code>GL_ANGLE_pack_reverse_row_order</code> - CType: int */
  public static final int GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93a4;
  /** <code>GL_ANGLE_instanced_arrays</code> - CType: int */
  public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88fe;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_CLIP_DISTANCE3_APPLE = 0x3003;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_STENCIL_BUFFER_BIT6_QCOM = 0x400000;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_blend_equation_advanced</code>, <code>GL_NV_blend_equation_advanced</code><br>Alias for: <code>GL_OVERLAY_KHR</code>, <code>GL_OVERLAY_NV</code> - CType: int */
  public static final int GL_OVERLAY = 0x9296;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_OBJECT_VALID_QCOM = 0x8bdb;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8e86;
  /** <code>GL_NV_sample_locations</code> - CType: int */
  public static final int GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933f;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 0x8de1;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_CLIP_DISTANCE4_APPLE = 0x3004;
  /** <code>GL_EXT_shader_pixel_local_storage</code> - CType: int */
  public static final int GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8f67;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_DEPTH_BUFFER_BIT2_QCOM = 0x400;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886c;
  /** <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_BUFFER_BIT_NV = 0x8000;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_blend_equation_advanced</code>, <code>GL_NV_blend_equation_advanced</code><br>Alias for: <code>GL_DARKEN_KHR</code>, <code>GL_DARKEN_NV</code> - CType: int */
  public static final int GL_DARKEN = 0x9297;
  /** <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8de0;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8e80;
  /** <code>GL_NV_copy_buffer</code> - CType: int */
  public static final int GL_COPY_WRITE_BUFFER_NV = 0x8f37;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_VIRTUAL_PAGE_SIZE_X_EXT = 0x9195;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93b6;
  /** <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 0x900d;
  /** <code>GL_NV_framebuffer_blit</code> - CType: int */
  public static final int GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x8ca6;
  /** <code>GL_IMG_texture_compression_pvrtc</code> - CType: int */
  public static final int GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8c01;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90cc;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_STENCIL_BUFFER_BIT3_QCOM = 0x80000;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92d4;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93dd;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 0x8e85;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887f;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 0x9199;
  /** <code>GL_NV_sample_locations</code> - CType: int */
  public static final int GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933e;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 0x9067;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_COLOR_BUFFER_BIT6_QCOM = 0x40;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8e8a;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_STATE_RESTORE = 0x8bdc;
  /** <code>GL_VERSION_3_0</code>, <code>GL_NV_conditional_render</code><br>Alias for: <code>GL_QUERY_BY_REGION_WAIT_NV</code> - CType: int */
  public static final int GL_QUERY_BY_REGION_WAIT = 0x8e15;
  /** <code>GL_OES_vertex_array_object</code> - CType: int */
  public static final int GL_VERTEX_ARRAY_BINDING_OES = 0x85b5;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90cd;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 0x900a;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_GEN_VERTEX_ORDER_EXT = 0x8e78;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_FRACTIONAL_EVEN_OES = 0x8e7c;
  /** <code>GL_EXT_multisample</code>, <code>GL_EXT_multisampled_compatibility</code> - CType: int */
  public static final int GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809f;
  /** <code>GL_NV_sample_locations</code> - CType: int */
  public static final int GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_PATCH_VERTICES_EXT = 0x8e72;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93e2;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_DEPTH_BUFFER_BIT3_QCOM = 0x800;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_blend_equation_advanced</code>, <code>GL_NV_blend_equation_advanced</code><br>Alias for: <code>GL_HSL_LUMINOSITY_KHR</code>, <code>GL_HSL_LUMINOSITY_NV</code> - CType: int */
  public static final int GL_HSL_LUMINOSITY = 0x92b0;
  /** <code>GL_ARM_shader_framebuffer_fetch</code> - CType: int */
  public static final int GL_FETCH_PER_SAMPLE_ARM = 0x8f65;
  /** <code>GL_OES_texture_half_float</code> - CType: int */
  public static final int GL_HALF_FLOAT_OES = 0x8d61;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_DEPTH_BUFFER_BIT1_QCOM = 0x200;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8e1e;
  /** <code>GL_AMD_compressed_ATC_texture</code> - CType: int */
  public static final int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8c93;
  /** <code>GL_ANGLE_framebuffer_blit</code> - CType: int */
  public static final int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8ca6;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000;
  /** <code>GL_EXT_texture_sRGB_decode</code> - CType: int */
  public static final int GL_SKIP_DECODE_EXT = 0x8a4a;
  /** <code>GL_OES_EGL_image_external</code> - CType: int */
  public static final int GL_SAMPLER_EXTERNAL_OES = 0x8d66;
  /** <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_EXT_texture_view</code>, <code>GL_OES_texture_view</code><br>Alias for: <code>GL_TEXTURE_VIEW_NUM_LAYERS_EXT</code>, <code>GL_TEXTURE_VIEW_NUM_LAYERS_OES</code> - CType: int */
  public static final int GL_TEXTURE_VIEW_NUM_LAYERS = 0x82de;
  /** <code>GL_EXT_buffer_storage</code> - CType: int */
  public static final int GL_BUFFER_IMMUTABLE_STORAGE_EXT = 0x821f;
  /** <code>GL_EXT_render_snorm</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_3_1</code> - CType: int */
  public static final int GL_RGBA8_SNORM = 0x8f97;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 0x9308;
  /** <code>GL_EXT_shader_image_load_store</code>, <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_INT_IMAGE_BUFFER_EXT = 0x905c;
  /** <code>GL_ARM_shader_framebuffer_fetch</code> - CType: int */
  public static final int GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8f66;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8a2c;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312;
  /** <code>GL_IMG_multisampled_render_to_texture</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_SHADER_BIT_OES = 0x4;
  /** <code>GL_EXT_pvrtc_sRGB</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93f0;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_CONTROL_SHADER_OES = 0x8e88;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_TRIANGLES_ADJACENCY_OES = 0xc;
  /** <code>GL_EXT_primitive_bounding_box</code> - CType: int */
  public static final int GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x92be;
  /** <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_BINDING_EXT = 0x8c2a;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 0x90cb;
  /** <code>GL_EXT_multiview_draw_buffers</code> - CType: int */
  public static final int GL_COLOR_ATTACHMENT_EXT = 0x90f0;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 0x8221;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90d9;
  /** <code>GL_EXT_gpu_shader4</code>, <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_SAMPLER_BUFFER_EXT = 0x8dc2;
  /** <code>GL_NV_non_square_matrices</code> - CType: int */
  public static final int GL_FLOAT_MAT4x3_NV = 0x8b6a;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_GEN_POINT_MODE_OES = 0x8e79;
  /** <code>GL_ES_VERSION_3_0</code>, <code>GL_EXT_sparse_texture</code>, <code>GL_VERSION_3_0</code>, <code>GL_EXT_texture_array</code><br>Alias for: <code>GL_TEXTURE_2D_ARRAY_EXT</code> - CType: int */
  public static final int GL_TEXTURE_2D_ARRAY = 0x8c1a;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_EVALUATION_SHADER_OES = 0x8e87;
  /** <code>GL_OES_texture_storage_multisample_2d_array</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105;
  /** <code>GL_AMD_compressed_3DC_texture</code> - CType: int */
  public static final int GL_3DC_X_AMD = 0x87f9;
  /** <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_SHADER_EXT = 0x8dd9;
  /** <code>GL_EXT_multisample</code>, <code>GL_EXT_multisampled_compatibility</code> - CType: int */
  public static final int GL_MULTISAMPLE_EXT = 0x809d;
  /** <code>GL_IMG_read_format</code> - CType: int */
  public static final int GL_BGRA_IMG = 0x80e1;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_INT_IMAGE_BUFFER_OES = 0x905c;
  /** <code>GL_NV_polygon_mode</code> - CType: int */
  public static final int GL_LINE_NV = 0x1b01;
  /** <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8de1;
  /** <code>GL_NV_framebuffer_mixed_samples</code> - CType: int */
  public static final int GL_COVERAGE_MODULATION_NV = 0x9332;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900f;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_DEPTH_QCOM = 0x8bd4;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_PRIMITIVES_GENERATED_OES = 0x8c87;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93e0;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_LAST_VERTEX_CONVENTION_OES = 0x8e4e;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123;
  /** <code>GL_DMP_program_binary</code> - CType: int */
  public static final int GL_SMAPHS_PROGRAM_BINARY_DMP = 0x9252;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_STENCIL_BUFFER_BIT1_QCOM = 0x20000;
  /** <code>GL_OES_draw_buffers_indexed</code>, <code>GL_ARB_imaging</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_blend_minmax</code><br>Alias for: <code>GL_MIN_EXT</code> - CType: int */
  public static final int GL_MIN = 0x8007;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_FRAMEBUFFER_LAYERS_OES = 0x9317;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_IMAGE_BUFFER_OES = 0x9051;
  /** <code>GL_AMD_compressed_ATC_texture</code> - CType: int */
  public static final int GL_ATC_RGB_AMD = 0x8c92;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 0x9307;
  /** <code>GL_NV_framebuffer_mixed_samples</code>, <code>GL_NV_multisample_coverage</code> - CType: int */
  public static final int GL_COLOR_SAMPLES_NV = 0x8e20;
  /** <code>GL_NV_multisample_coverage</code>, <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_SAMPLES_NV = 0x8ed4;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_FRACTIONAL_ODD_OES = 0x8e7b;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93d7;
  /** <code>GL_EXT_multisampled_render_to_texture</code>, <code>GL_EXT_framebuffer_multisample</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8d56;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 0x8a2c;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_NUM_LEVELS_QCOM = 0x8bd9;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93c6;
  /** <code>GL_EXT_render_snorm</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_3_1</code> - CType: int */
  public static final int GL_RG8_SNORM = 0x8f95;
  /** <code>GL_EXT_gpu_shader4</code>, <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8dd8;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_EVALUATION_SHADER_BIT_OES = 0x10;
  /** <code>GL_NV_sample_locations</code> - CType: int */
  public static final int GL_SAMPLE_LOCATION_NV = 0x8e50;
  /** <code>GL_EXT_pvrtc_sRGB</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8a54;
  /** <code>GL_OES_surfaceless_context</code> - CType: int */
  public static final int GL_FRAMEBUFFER_UNDEFINED_OES = 0x8219;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90d7;
  /** <code>GL_EXT_shader_pixel_local_storage</code> - CType: int */
  public static final int GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 0x8f64;
  /** <code>GL_NV_viewport_array</code> - CType: int */
  public static final int GL_MAX_VIEWPORTS_NV = 0x825b;
  /** <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900d;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_KHR_blend_equation_advanced</code><br>Alias for: <code>GL_HSL_COLOR_NV</code>, <code>GL_HSL_COLOR_KHR</code> - CType: int */
  public static final int GL_HSL_COLOR = 0x92af;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 0x8e5a;
  /** <code>GL_NV_framebuffer_blit</code> - CType: int */
  public static final int GL_READ_FRAMEBUFFER_BINDING_NV = 0x8caa;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_TEXTURE_SPARSE_EXT = 0x91a6;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_OES = 0x8c2a;
  /** <code>GL_OES_draw_buffers_indexed</code>, <code>GL_ARB_imaging</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_1_4</code>, <code>GL_EXT_blend_minmax</code><br>Alias for: <code>GL_MAX_EXT</code> - CType: int */
  public static final int GL_MAX = 0x8008;
  /** <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8da8;
  /** <code>GL_EXT_multiview_draw_buffers</code> - CType: int */
  public static final int GL_READ_BUFFER_EXT = 0xc02;
  /** <code>GL_IMG_texture_compression_pvrtc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8c02;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 0x8c29;
  /** <code>GL_EXT_blend_func_extended</code> - CType: int */
  public static final int GL_ONE_MINUS_SRC1_ALPHA_EXT = 0x88fb;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 0x90cd;
  /** <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900a;
  /** <code>GL_NV_conservative_raster</code> - CType: int */
  public static final int GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93d6;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93d1;
  /** <code>GL_EXT_blend_func_extended</code> - CType: int */
  public static final int GL_LOCATION_INDEX_EXT = 0x930f;
  /** <code>GL_NV_non_square_matrices</code> - CType: int */
  public static final int GL_FLOAT_MAT3x4_NV = 0x8b68;
  /** <code>GL_EXT_texture_norm16</code> - CType: int */
  public static final int GL_RGB16_SNORM_EXT = 0x8f9a;
  /** <code>GL_EXT_multisampled_render_to_texture</code>, <code>GL_EXT_framebuffer_multisample</code> - CType: int */
  public static final int GL_RENDERBUFFER_SAMPLES_EXT = 0x8cab;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93e8;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_SHADER_INVOCATIONS_OES = 0x887f;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93d3;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 0x92cf;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93ba;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8e82;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_COLOR_BUFFER_BIT3_QCOM = 0x8;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 0x90d9;
  /** <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_BUFFERS_NV = 0x8ed3;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_ISOLINES_EXT = 0x8e7a;
  /** <code>GL_EXT_multisampled_render_to_texture</code>, <code>GL_EXT_framebuffer_multisample</code> - CType: int */
  public static final int GL_MAX_SAMPLES_EXT = 0x8d57;
  /** <code>GL_APPLE_texture_packed_float</code> - CType: int */
  public static final int GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8c3e;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_GEN_POINT_MODE_EXT = 0x8e79;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8e5a;
  /** <code>GL_EXT_texture</code>, <code>GL_EXT_texture_norm16</code> - CType: int */
  public static final int GL_RGB16_EXT = 0x8054;
  /** <code>GL_OES_shader_multisample_interpolation</code> - CType: int */
  public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8e5d;
  /** <code>GL_EXT_shader_framebuffer_fetch</code> - CType: int */
  public static final int GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8a52;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 0x91a7;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_SLUMINANCE_ALPHA_NV = 0x8c44;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 0x90d7;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_QUADS_EXT = 0x7;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_SIZE_OES = 0x919e;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_PATCH_VERTICES_OES = 0x8e7d;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93d8;
  /** <code>GL_OVR_multiview</code> - CType: int */
  public static final int GL_MAX_VIEWS_OVR = 0x9631;
  /** <code>GL_IMG_multisampled_render_to_texture</code> - CType: int */
  public static final int GL_RENDERBUFFER_SAMPLES_IMG = 0x9133;
  /** <code>GL_IMG_texture_compression_pvrtc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8c03;
  /** <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_ATTACHMENT_NV = 0x8ed2;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 0x9198;
  /** <code>GL_EXT_render_snorm</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_VERSION_3_1</code> - CType: int */
  public static final int GL_R8_SNORM = 0x8f94;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8e7f;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_DEPTH_BUFFER_BIT6_QCOM = 0x4000;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 0x8916;
  /** <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ed6;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_GEN_SPACING_EXT = 0x8e77;
  /** <code>GL_ANGLE_framebuffer_blit</code> - CType: int */
  public static final int GL_DRAW_FRAMEBUFFER_ANGLE = 0x8ca9;
  /** <code>GL_EXT_blend_func_extended</code> - CType: int */
  public static final int GL_ONE_MINUS_SRC1_COLOR_EXT = 0x88fa;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_IMAGE_VALID_QCOM = 0x8bd8;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92d5;
  /** <code>GL_QCOM_alpha_test</code> - CType: int */
  public static final int GL_ALPHA_TEST_FUNC_QCOM = 0xbc1;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_KHR_blend_equation_advanced</code><br>Alias for: <code>GL_COLORDODGE_NV</code>, <code>GL_COLORDODGE_KHR</code> - CType: int */
  public static final int GL_COLORDODGE = 0x9299;
  /** <code>GL_IMG_texture_compression_pvrtc2</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_BINDING_OES = 0x8c2a;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_TRIANGLE_STRIP_ADJACENCY_OES = 0xd;
  /** <code>GL_NV_shadow_samplers_array</code> - CType: int */
  public static final int GL_SAMPLER_2D_ARRAY_SHADOW_NV = 0x8dc4;
  /** <code>GL_NV_texture_border_clamp</code> - CType: int */
  public static final int GL_CLAMP_TO_BORDER_NV = 0x812d;
  /** <code>GL_EXT_gpu_shader4</code>, <code>GL_EXT_texture_buffer</code> - CType: int */
  public static final int GL_INT_SAMPLER_BUFFER_EXT = 0x8dd0;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93b8;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_MAX_TEXTURE_BUFFER_SIZE_OES = 0x8c2b;
  /** <code>GL_NV_viewport_array</code> - CType: int */
  public static final int GL_VIEWPORT_SUBPIXEL_BITS_NV = 0x825c;
  /** <code>GL_NV_framebuffer_mixed_samples</code> - CType: int */
  public static final int GL_DEPTH_SAMPLES_NV = 0x932d;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 0x8e8a;
  /** <code>GL_EXT_texture</code>, <code>GL_EXT_texture_norm16</code> - CType: int */
  public static final int GL_RGBA16_EXT = 0x805b;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 0x886d;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93bb;
  /** <code>GL_EXT_tessellation_shader</code>, <code>GL_VERSION_4_4</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_OES_tessellation_shader</code><br>Alias for: <code>GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES</code> - CType: int */
  public static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x4000000;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_WIDTH_QCOM = 0x8bd2;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_COLOR_BUFFER_BIT4_QCOM = 0x10;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 0x92cd;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_KHR_blend_equation_advanced</code><br>Alias for: <code>GL_EXCLUSION_NV</code>, <code>GL_EXCLUSION_KHR</code> - CType: int */
  public static final int GL_EXCLUSION = 0x92a0;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93b2;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 0x8e75;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 0x886c;
  /** <code>GL_EXT_shader_image_load_store</code>, <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_STENCIL_BUFFER_BIT7_QCOM = 0x800000;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90cb;
  /** <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900f;
  /** <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_COMPONENT4_NV = 0x8ed1;
  /** <code>GL_EXT_multiview_draw_buffers</code> - CType: int */
  public static final int GL_MULTIVIEW_EXT = 0x90f1;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_SLUMINANCE8_ALPHA8_NV = 0x8c45;
  /** <code>GL_EXT_discard_framebuffer</code> - CType: int */
  public static final int GL_COLOR_EXT = 0x1800;
  /** <code>GL_NV_polygon_mode</code> - CType: int */
  public static final int GL_POLYGON_OFFSET_POINT_NV = 0x2a01;
  /** <code>GL_EXT_buffer_storage</code> - CType: int */
  public static final int GL_CLIENT_STORAGE_BIT_EXT = 0x200;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_LINES_ADJACENCY_OES = 0xa;
  /** <code>GL_EXT_pvrtc_sRGB</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8a55;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93b3;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_STENCIL_BUFFER_BIT5_QCOM = 0x200000;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_NV_blend_equation_advanced</code>, <code>GL_KHR_blend_equation_advanced</code><br>Alias for: <code>GL_HSL_HUE_NV</code>, <code>GL_HSL_HUE_KHR</code> - CType: int */
  public static final int GL_HSL_HUE = 0x92ad;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 0x8c2d;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8e81;
  /** <code>GL_QCOM_extended_get</code> - CType: int */
  public static final int GL_TEXTURE_TARGET_QCOM = 0x8bda;
  /** <code>GL_DMP_program_binary</code> - CType: int */
  public static final int GL_DMP_PROGRAM_BINARY_DMP = 0x9253;
  /** <code>GL_EXT_shader_image_load_store</code>, <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906a;
  /** <code>GL_EXT_raster_multisample</code> - CType: int */
  public static final int GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
  /** <code>GL_NV_coverage_sample</code> - CType: int */
  public static final int GL_COVERAGE_COMPONENT_NV = 0x8ed0;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_PATCHES_OES = 0xe;
  /** <code>GL_NV_copy_buffer</code> - CType: int */
  public static final int GL_COPY_READ_BUFFER_NV = 0x8f36;
  /** <code>GL_OES_shader_multisample_interpolation</code> - CType: int */
  public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8e5c;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8a32;
  /** <code>GL_NV_texture_border_clamp</code> - CType: int */
  public static final int GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
  /** <code>GL_OES_texture_stencil8</code> - CType: int */
  public static final int GL_STENCIL_INDEX_OES = 0x1901;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 0x9312;
  /** <code>GL_EXT_texture_norm16</code> - CType: int */
  public static final int GL_RG16_EXT = 0x822c;
  /** <code>GL_NV_depth_nonlinear</code> - CType: int */
  public static final int GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8e2c;
  /** <code>GL_NV_framebuffer_mixed_samples</code> - CType: int */
  public static final int GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_FRACTIONAL_ODD_EXT = 0x8e7b;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_LAYER_PROVOKING_VERTEX_EXT = 0x825e;
  /** <code>GL_EXT_buffer_storage</code> - CType: int */
  public static final int GL_MAP_COHERENT_BIT_EXT = 0x80;
  /** <code>GL_EXT_blend_func_extended</code> - CType: int */
  public static final int GL_SRC1_ALPHA_EXT = 0x8589;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_COLOR_BUFFER_BIT1_QCOM = 0x2;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_GEN_MODE_EXT = 0x8e76;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886d;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8e1f;
  /** <code>GL_OES_texture_buffer</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_BUFFER_OES = 0x8c2c;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8c4f;
  /** <code>GL_IMG_multisampled_render_to_texture</code> - CType: int */
  public static final int GL_TEXTURE_SAMPLES_IMG = 0x9136;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92cd;
  /** <code>GL_ANGLE_texture_usage</code> - CType: int */
  public static final int GL_TEXTURE_USAGE_ANGLE = 0x93a2;
  /** <code>GL_FJ_shader_binary_GCCSO</code> - CType: int */
  public static final int GL_GCCSO_SHADER_BINARY_FJ = 0x9260;
  /** <code>GL_EXT_render_snorm</code> - CType: int */
  public static final int GL_R16_SNORM_EXT = 0x8f98;
  /** <code>GL_IMG_multisampled_render_to_texture</code> - CType: int */
  public static final int GL_MAX_SAMPLES_IMG = 0x9135;
  /** <code>GL_OES_texture_storage_multisample_2d_array</code> - CType: int */
  public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910b;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_PATCHES_EXT = 0xe;
  /** <code>GL_EXT_buffer_storage</code> - CType: int */
  public static final int GL_BUFFER_STORAGE_FLAGS_EXT = 0x8220;
  /** <code>GL_APPLE_clip_distance</code> - CType: int */
  public static final int GL_MAX_CLIP_DISTANCES_APPLE = 0xd32;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_SHADER_OES = 0x8dd9;
  /** <code>GL_EXT_texture_buffer</code>, <code>GL_EXT_texture_buffer_object</code> - CType: int */
  public static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8c2b;
  /** <code>GL_OES_shader_multisample_interpolation</code> - CType: int */
  public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8e5b;
  /** <code>GL_NV_fragment_coverage_to_color</code> - CType: int */
  public static final int GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92de;
  /** <code>GL_EXT_render_snorm</code> - CType: int */
  public static final int GL_RG16_SNORM_EXT = 0x8f99;
  /** <code>GL_EXT_sparse_texture</code> - CType: int */
  public static final int GL_VIRTUAL_PAGE_SIZE_Z_EXT = 0x9197;
  /** <code>GL_QCOM_writeonly_rendering</code> - CType: int */
  public static final int GL_WRITEONLY_RENDERING_QCOM = 0x8823;
  /** <code>GL_QCOM_alpha_test</code> - CType: int */
  public static final int GL_ALPHA_TEST_REF_QCOM = 0xbc2;
  /** <code>GL_EXT_texture_buffer</code>, <code>GL_EXT_texture_buffer_object</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8c2d;
  /** <code>GL_OES_EGL_image_external</code> - CType: int */
  public static final int GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8d67;
  /** <code>GL_NV_framebuffer_multisample</code> - CType: int */
  public static final int GL_MAX_SAMPLES_NV = 0x8d57;
  /** <code>GL_OES_texture_view</code>, <code>GL_VERSION_4_3</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_ARB_texture_view</code> - CType: int */
  public static final int GL_TEXTURE_IMMUTABLE_LEVELS = 0x82df;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93e6;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93c7;
  /** <code>GL_QCOM_binning_control</code> - CType: int */
  public static final int GL_CPU_OPTIMIZED_QCOM = 0x8fb1;
  /** <code>GL_EXT_geometry_shader</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92cf;
  /** <code>GL_DMP_program_binary</code> - CType: int */
  public static final int GL_SMAPHS30_PROGRAM_BINARY_DMP = 0x9251;
  /** <code>GL_OES_texture_storage_multisample_2d_array</code> - CType: int */
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910c;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 0x8e82;
  /** <code>GL_VERSION_4_5</code>, <code>GL_KHR_context_flush_control</code><br>Alias for: <code>GL_CONTEXT_RELEASE_BEHAVIOR_KHR</code> - CType: int */
  public static final int GL_CONTEXT_RELEASE_BEHAVIOR = 0x82fb;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 0x92d3;
  /** <code>GL_EXT_raster_multisample</code> - CType: int */
  public static final int GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932c;
  /** <code>GL_OES_geometry_shader</code> - CType: int */
  public static final int GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 0x8917;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 0x92d4;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_QUADS_OES = 0x7;
  /** <code>GL_QCOM_binning_control</code> - CType: int */
  public static final int GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8fb3;
  /** <code>GL_OES_tessellation_shader</code> - CType: int */
  public static final int GL_TESS_GEN_SPACING_OES = 0x8e77;
  /** <code>GL_KHR_texture_compression_astc_hdr</code>, <code>GL_KHR_texture_compression_astc_ldr</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93dc;
  /** <code>GL_EXT_shader_image_load_store</code>, <code>GL_EXT_texture_cube_map_array</code> - CType: int */
  public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905f;
  /** <code>GL_EXT_texture_buffer</code>, <code>GL_EXT_texture_buffer_object</code> - CType: int */
  public static final int GL_TEXTURE_BUFFER_EXT = 0x8c2a;
  /** <code>GL_EXT_tessellation_shader</code> - CType: int */
  public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8e85;
  /** <code>GL_OVR_multiview</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
  /** <code>GL_OES_texture_compression_astc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93c8;
  /** <code>GL_QCOM_binning_control</code> - CType: int */
  public static final int GL_BINNING_CONTROL_HINT_QCOM = 0x8fb0;
  /** <code>GL_OES_texture_cube_map_array</code> - CType: int */
  public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900e;
  /** <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_blend_equation_advanced</code>, <code>GL_NV_blend_equation_advanced</code><br>Alias for: <code>GL_SCREEN_KHR</code>, <code>GL_SCREEN_NV</code> - CType: int */
  public static final int GL_SCREEN = 0x9295;
  /** <code>GL_QCOM_tiled_rendering</code> - CType: int */
  public static final int GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000;
  /** <code>GL_NV_sample_locations</code> - CType: int */
  public static final int GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
  /** <code>GL_OES_texture_storage_multisample_2d_array</code> - CType: int */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910d;
  /** <code>GL_ARM_mali_shader_binary</code> - CType: int */
  public static final int GL_MALI_SHADER_BINARY_ARM = 0x8f60;
  /** <code>GL_NV_sRGB_formats</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8c4d;

  /** Entry point to C language function: <code> void {@native glBlendBarrier}(void) </code> <br>Part of <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_blend_equation_advanced</code>, <code>GL_NV_blend_equation_advanced</code><br>Alias for: <code>glBlendBarrierKHR</code>, <code>glBlendBarrierNV</code>   */
  public void glBlendBarrier();

  /** Entry point to C language function: <code> void {@native glGetnUniformuiv}(GLuint program, GLint location, GLsizei bufSize, GLuint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_robustness</code>, <code>GL_ARB_robustness</code><br>Alias for: <code>glGetnUniformuivKHR</code>, <code>glGetnUniformuivARB</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetnUniformuiv(int program, int location, int bufSize, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetnUniformuiv}(GLuint program, GLint location, GLsizei bufSize, GLuint *  params) </code> <br>Part of <code>GL_VERSION_4_5</code>, <code>GL_ES_VERSION_3_2</code>, <code>GL_KHR_robustness</code>, <code>GL_ARB_robustness</code><br>Alias for: <code>glGetnUniformuivKHR</code>, <code>glGetnUniformuivARB</code>   */
  public void glGetnUniformuiv(int program, int location, int bufSize, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glEGLImageTargetTexture2DOES}(GLenum target, GLeglImageOES image) </code> <br>Part of <code>GL_OES_EGL_image</code><br>   */
  public void glEGLImageTargetTexture2DOES(int target, long image);

  /** Entry point to C language function: <code> void {@native glEGLImageTargetRenderbufferStorageOES}(GLenum target, GLeglImageOES image) </code> <br>Part of <code>GL_OES_EGL_image</code><br>   */
  public void glEGLImageTargetRenderbufferStorageOES(int target, long image);

  /** Entry point to C language function: <code> void {@native glEnableiOES}(GLenum target, GLuint index) </code> <br>Part of <code>GL_OES_draw_buffers_indexed</code><br>   */
  public void glEnableiOES(int target, int index);

  /** Entry point to C language function: <code> void {@native glDisableiOES}(GLenum target, GLuint index) </code> <br>Part of <code>GL_OES_draw_buffers_indexed</code><br>   */
  public void glDisableiOES(int target, int index);

  /** Entry point to C language function: <code> void {@native glBlendEquationiOES}(GLuint buf, GLenum mode) </code> <br>Part of <code>GL_OES_draw_buffers_indexed</code><br>   */
  public void glBlendEquationiOES(int buf, int mode);

  /** Entry point to C language function: <code> void {@native glBlendEquationSeparateiOES}(GLuint buf, GLenum modeRGB, GLenum modeAlpha) </code> <br>Part of <code>GL_OES_draw_buffers_indexed</code><br>   */
  public void glBlendEquationSeparateiOES(int buf, int modeRGB, int modeAlpha);

  /** Entry point to C language function: <code> void {@native glBlendFunciOES}(GLuint buf, GLenum src, GLenum dst) </code> <br>Part of <code>GL_OES_draw_buffers_indexed</code><br>   */
  public void glBlendFunciOES(int buf, int src, int dst);

  /** Entry point to C language function: <code> void {@native glBlendFuncSeparateiOES}(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) </code> <br>Part of <code>GL_OES_draw_buffers_indexed</code><br>   */
  public void glBlendFuncSeparateiOES(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

  /** Entry point to C language function: <code> void {@native glColorMaskiOES}(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) </code> <br>Part of <code>GL_OES_draw_buffers_indexed</code><br>   */
  public void glColorMaskiOES(int index, boolean r, boolean g, boolean b, boolean a);

  /** Entry point to C language function: <code> GLboolean {@native glIsEnablediOES}(GLenum target, GLuint index) </code> <br>Part of <code>GL_OES_draw_buffers_indexed</code><br>   */
  public boolean glIsEnablediOES(int target, int index);

  /** Entry point to C language function: <code> void {@native glDrawElementsBaseVertexOES}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLint basevertex) </code> <br>Part of <code>GL_OES_draw_elements_base_vertex</code><br>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsBaseVertexOES(int mode, int count, int type, Buffer indices, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawRangeElementsBaseVertexOES}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *  indices, GLint basevertex) </code> <br>Part of <code>GL_OES_draw_elements_base_vertex</code><br>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawRangeElementsBaseVertexOES(int mode, int start, int end, int count, int type, Buffer indices, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseVertexOES}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei instancecount, GLint basevertex) </code> <br>Part of <code>GL_OES_draw_elements_base_vertex</code><br>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsInstancedBaseVertexOES(int mode, int count, int type, Buffer indices, int instancecount, int basevertex);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsBaseVertexOES}(GLenum mode, const GLsizei *  count, GLenum type, const void * const  *  indices, GLsizei primcount, const GLint *  basevertex) </code> <br>Part of <code>GL_OES_draw_elements_base_vertex</code><br>
      @param count a direct or array-backed {@link java.nio.IntBuffer}
      @param indices a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param basevertex a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiDrawElementsBaseVertexOES(int mode, IntBuffer count, int type, PointerBuffer indices, int primcount, IntBuffer basevertex);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsBaseVertexOES}(GLenum mode, const GLsizei *  count, GLenum type, const void * const  *  indices, GLsizei primcount, const GLint *  basevertex) </code> <br>Part of <code>GL_OES_draw_elements_base_vertex</code><br>
      @param indices a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glMultiDrawElementsBaseVertexOES(int mode, int[] count, int count_offset, int type, PointerBuffer indices, int primcount, int[] basevertex, int basevertex_offset);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureOES}(GLenum target, GLenum attachment, GLuint texture, GLint level) </code> <br>Part of <code>GL_OES_geometry_shader</code><br>   */
  public void glFramebufferTextureOES(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glPrimitiveBoundingBoxOES}(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) </code> <br>Part of <code>GL_OES_primitive_bounding_box</code><br>   */
  public void glPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);

  /** Entry point to C language function: <code> void {@native glMinSampleShadingOES}(GLfloat value) </code> <br>Part of <code>GL_OES_sample_shading</code><br>   */
  public void glMinSampleShadingOES(float value);

  /** Entry point to C language function: <code> void {@native glPatchParameteriOES}(GLenum pname, GLint value) </code> <br>Part of <code>GL_OES_tessellation_shader</code><br>   */
  public void glPatchParameteriOES(int pname, int value);

  /** Entry point to C language function: <code> void {@native glTexBufferOES}(GLenum target, GLenum internalformat, GLuint buffer) </code> <br>Part of <code>GL_OES_texture_buffer</code><br>   */
  public void glTexBufferOES(int target, int internalformat, int buffer);

  /** Entry point to C language function: <code> void {@native glTexBufferRangeOES}(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) </code> <br>Part of <code>GL_OES_texture_buffer</code><br>   */
  public void glTexBufferRangeOES(int target, int internalformat, int buffer, long offset, long size);

  /** Entry point to C language function: <code> void {@native glTexStorage3DMultisampleOES}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) </code> <br>Part of <code>GL_OES_texture_storage_multisample_2d_array</code><br>   */
  public void glTexStorage3DMultisampleOES(int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTextureView}(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>, <code>GL_OES_texture_view</code>, <code>GL_EXT_texture_view</code><br>Alias for: <code>glTextureViewOES</code>, <code>glTextureViewEXT</code>   */
  public void glTextureView(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers);

  /** Entry point to C language function: <code> void {@native glBindVertexArrayOES}(GLuint array) </code> <br>Part of <code>GL_OES_vertex_array_object</code><br>   */
  public void glBindVertexArrayOES(int array);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArraysOES}(GLsizei n, const GLuint *  arrays) </code> <br>Part of <code>GL_OES_vertex_array_object</code><br>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteVertexArraysOES(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArraysOES}(GLsizei n, const GLuint *  arrays) </code> <br>Part of <code>GL_OES_vertex_array_object</code><br>   */
  public void glDeleteVertexArraysOES(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glGenVertexArraysOES}(GLsizei n, GLuint *  arrays) </code> <br>Part of <code>GL_OES_vertex_array_object</code><br>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenVertexArraysOES(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glGenVertexArraysOES}(GLsizei n, GLuint *  arrays) </code> <br>Part of <code>GL_OES_vertex_array_object</code><br>   */
  public void glGenVertexArraysOES(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsVertexArrayOES}(GLuint array) </code> <br>Part of <code>GL_OES_vertex_array_object</code><br>   */
  public boolean glIsVertexArrayOES(int array);

  /** Entry point to C language function: <code> void {@native glBlitFramebufferANGLE}(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) </code> <br>Part of <code>GL_ANGLE_framebuffer_blit</code><br>   */
  public void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);

  /** Entry point to C language function: <code> void {@native glDrawArraysInstancedANGLE}(GLenum mode, GLint first, GLsizei count, GLsizei primcount) </code> <br>Part of <code>GL_ANGLE_instanced_arrays</code><br>   */
  public void glDrawArraysInstancedANGLE(int mode, int first, int count, int primcount);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedANGLE}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei primcount) </code> <br>Part of <code>GL_ANGLE_instanced_arrays</code><br>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsInstancedANGLE(int mode, int count, int type, Buffer indices, int primcount);

  /** Entry point to C language function: <code> void {@native glVertexAttribDivisorANGLE}(GLuint index, GLuint divisor) </code> <br>Part of <code>GL_ANGLE_instanced_arrays</code><br>   */
  public void glVertexAttribDivisorANGLE(int index, int divisor);

  /** Entry point to C language function: <code> void {@native glGetTranslatedShaderSourceANGLE}(GLuint shader, GLsizei bufsize, GLsizei *  length, GLchar *  source) </code> <br>Part of <code>GL_ANGLE_translated_shader_source</code><br>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param source a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetTranslatedShaderSourceANGLE(int shader, int bufsize, IntBuffer length, ByteBuffer source);

  /** Entry point to C language function: <code> void {@native glGetTranslatedShaderSourceANGLE}(GLuint shader, GLsizei bufsize, GLsizei *  length, GLchar *  source) </code> <br>Part of <code>GL_ANGLE_translated_shader_source</code><br>   */
  public void glGetTranslatedShaderSourceANGLE(int shader, int bufsize, int[] length, int length_offset, byte[] source, int source_offset);

  /** Entry point to C language function: <code> void {@native glCopyTextureLevelsAPPLE}(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) </code> <br>Part of <code>GL_APPLE_copy_texture_levels</code><br>   */
  public void glCopyTextureLevelsAPPLE(int destinationTexture, int sourceTexture, int sourceBaseLevel, int sourceLevelCount);

  /** Entry point to C language function: <code> void {@native glResolveMultisampleFramebuffer}(void) </code> <br>Part of <code>GL_APPLE_framebuffer_multisample</code><br>Alias for: <code>glResolveMultisampleFramebufferAPPLE</code>   */
  public void glResolveMultisampleFramebuffer();

  /** Entry point to C language function: <code> void {@native glBindFragDataLocationIndexedEXT}(GLuint program, GLuint colorNumber, GLuint index, const GLchar *  name) </code> <br>Part of <code>GL_EXT_blend_func_extended</code><br>
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glBindFragDataLocationIndexedEXT(int program, int colorNumber, int index, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocationIndexedEXT}(GLuint program, GLuint colorNumber, GLuint index, const GLchar *  name) </code> <br>Part of <code>GL_EXT_blend_func_extended</code><br>   */
  public void glBindFragDataLocationIndexedEXT(int program, int colorNumber, int index, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocationEXT}(GLuint program, GLuint color, const GLchar *  name) </code> <br>Part of <code>GL_EXT_gpu_shader4</code>, <code>GL_EXT_blend_func_extended</code><br>
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glBindFragDataLocationEXT(int program, int color, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocationEXT}(GLuint program, GLuint color, const GLchar *  name) </code> <br>Part of <code>GL_EXT_gpu_shader4</code>, <code>GL_EXT_blend_func_extended</code><br>   */
  public void glBindFragDataLocationEXT(int program, int color, byte[] name, int name_offset);

  /** Entry point to C language function: <code> GLint {@native glGetProgramResourceLocationIndexEXT}(GLuint program, GLenum programInterface, const GLchar *  name) </code> <br>Part of <code>GL_EXT_blend_func_extended</code><br>
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetProgramResourceLocationIndexEXT(int program, int programInterface, ByteBuffer name);

  /** Entry point to C language function: <code> GLint {@native glGetProgramResourceLocationIndexEXT}(GLuint program, GLenum programInterface, const GLchar *  name) </code> <br>Part of <code>GL_EXT_blend_func_extended</code><br>   */
  public int glGetProgramResourceLocationIndexEXT(int program, int programInterface, byte[] name, int name_offset);

  /** Entry point to C language function: <code> GLint {@native glGetFragDataIndexEXT}(GLuint program, const GLchar *  name) </code> <br>Part of <code>GL_EXT_blend_func_extended</code><br>
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetFragDataIndexEXT(int program, ByteBuffer name);

  /** Entry point to C language function: <code> GLint {@native glGetFragDataIndexEXT}(GLuint program, const GLchar *  name) </code> <br>Part of <code>GL_EXT_blend_func_extended</code><br>   */
  public int glGetFragDataIndexEXT(int program, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glBufferStorageEXT}(GLenum target, GLsizeiptr size, const void *  data, GLbitfield flags) </code> <br>Part of <code>GL_EXT_buffer_storage</code><br>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glBufferStorageEXT(int target, long size, Buffer data, int flags);

  /** Entry point to C language function: <code> void {@native glDiscardFramebufferEXT}(GLenum target, GLsizei numAttachments, const GLenum *  attachments) </code> <br>Part of <code>GL_EXT_discard_framebuffer</code><br>
      @param attachments a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDiscardFramebufferEXT(int target, int numAttachments, IntBuffer attachments);

  /** Entry point to C language function: <code> void {@native glDiscardFramebufferEXT}(GLenum target, GLsizei numAttachments, const GLenum *  attachments) </code> <br>Part of <code>GL_EXT_discard_framebuffer</code><br>   */
  public void glDiscardFramebufferEXT(int target, int numAttachments, int[] attachments, int attachments_offset);

  /** Entry point to C language function: <code> void {@native glEnableiEXT}(GLenum target, GLuint index) </code> <br>Part of <code>GL_EXT_draw_buffers_indexed</code><br>   */
  public void glEnableiEXT(int target, int index);

  /** Entry point to C language function: <code> void {@native glDisableiEXT}(GLenum target, GLuint index) </code> <br>Part of <code>GL_EXT_draw_buffers_indexed</code><br>   */
  public void glDisableiEXT(int target, int index);

  /** Entry point to C language function: <code> void {@native glBlendEquationiEXT}(GLuint buf, GLenum mode) </code> <br>Part of <code>GL_EXT_draw_buffers_indexed</code><br>   */
  public void glBlendEquationiEXT(int buf, int mode);

  /** Entry point to C language function: <code> void {@native glBlendEquationSeparateiEXT}(GLuint buf, GLenum modeRGB, GLenum modeAlpha) </code> <br>Part of <code>GL_EXT_draw_buffers_indexed</code><br>   */
  public void glBlendEquationSeparateiEXT(int buf, int modeRGB, int modeAlpha);

  /** Entry point to C language function: <code> void {@native glBlendFunciEXT}(GLuint buf, GLenum src, GLenum dst) </code> <br>Part of <code>GL_EXT_draw_buffers_indexed</code><br>   */
  public void glBlendFunciEXT(int buf, int src, int dst);

  /** Entry point to C language function: <code> void {@native glBlendFuncSeparateiEXT}(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) </code> <br>Part of <code>GL_EXT_draw_buffers_indexed</code><br>   */
  public void glBlendFuncSeparateiEXT(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

  /** Entry point to C language function: <code> void {@native glColorMaskiEXT}(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) </code> <br>Part of <code>GL_EXT_draw_buffers_indexed</code><br>   */
  public void glColorMaskiEXT(int index, boolean r, boolean g, boolean b, boolean a);

  /** Entry point to C language function: <code> GLboolean {@native glIsEnablediEXT}(GLenum target, GLuint index) </code> <br>Part of <code>GL_EXT_draw_buffers_indexed</code><br>   */
  public boolean glIsEnablediEXT(int target, int index);

  /** Entry point to C language function: <code> void {@native glDrawElementsBaseVertexEXT}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLint basevertex) </code> <br>Part of <code>GL_EXT_draw_elements_base_vertex</code><br>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsBaseVertexEXT(int mode, int count, int type, Buffer indices, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawRangeElementsBaseVertexEXT}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *  indices, GLint basevertex) </code> <br>Part of <code>GL_EXT_draw_elements_base_vertex</code><br>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawRangeElementsBaseVertexEXT(int mode, int start, int end, int count, int type, Buffer indices, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseVertexEXT}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei instancecount, GLint basevertex) </code> <br>Part of <code>GL_EXT_draw_elements_base_vertex</code><br>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsInstancedBaseVertexEXT(int mode, int count, int type, Buffer indices, int instancecount, int basevertex);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsBaseVertexEXT}(GLenum mode, const GLsizei *  count, GLenum type, const void * const  *  indices, GLsizei primcount, const GLint *  basevertex) </code> <br>Part of <code>GL_EXT_draw_elements_base_vertex</code><br>
      @param count a direct or array-backed {@link java.nio.IntBuffer}
      @param indices a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param basevertex a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiDrawElementsBaseVertexEXT(int mode, IntBuffer count, int type, PointerBuffer indices, int primcount, IntBuffer basevertex);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsBaseVertexEXT}(GLenum mode, const GLsizei *  count, GLenum type, const void * const  *  indices, GLsizei primcount, const GLint *  basevertex) </code> <br>Part of <code>GL_EXT_draw_elements_base_vertex</code><br>
      @param indices a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glMultiDrawElementsBaseVertexEXT(int mode, int[] count, int count_offset, int type, PointerBuffer indices, int primcount, int[] basevertex, int basevertex_offset);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureEXT}(GLenum target, GLenum attachment, GLuint texture, GLint level) </code> <br>Part of <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader</code><br>   */
  public void glFramebufferTextureEXT(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glVertexAttribDivisor}(GLuint index, GLuint divisor) </code> <br>Part of <code>GL_VERSION_3_3</code>, <code>GL_ES_VERSION_3_0</code>, <code>GL_NV_instanced_arrays</code>, <code>GL_ANGLE_instanced_arrays</code>, <code>GL_EXT_instanced_arrays</code>, <code>GL_ARB_instanced_arrays</code><br>Alias for: <code>glVertexAttribDivisorNV</code>, <code>glVertexAttribDivisorANGLE</code>, <code>glVertexAttribDivisorEXT</code>, <code>glVertexAttribDivisorARB</code>   */
  public void glVertexAttribDivisor(int index, int divisor);

  /** Entry point to C language function: <code> void {@native glMultiDrawArraysIndirectEXT}(GLenum mode, const void *  indirect, GLsizei drawcount, GLsizei stride) </code> <br>Part of <code>GL_EXT_multi_draw_indirect</code><br>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawArraysIndirectEXT(int mode, Buffer indirect, int drawcount, int stride);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsIndirectEXT}(GLenum mode, GLenum type, const void *  indirect, GLsizei drawcount, GLsizei stride) </code> <br>Part of <code>GL_EXT_multi_draw_indirect</code><br>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawElementsIndirectEXT(int mode, int type, Buffer indirect, int drawcount, int stride);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleEXT}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_EXT_multisampled_render_to_texture</code>, <code>GL_EXT_framebuffer_multisample</code><br>   */
  public void glRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture2DMultisampleEXT}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) </code> <br>Part of <code>GL_EXT_multisampled_render_to_texture</code><br>   */
  public void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, int texture, int level, int samples);

  /** Entry point to C language function: <code> void {@native glReadBufferIndexedEXT}(GLenum src, GLint index) </code> <br>Part of <code>GL_EXT_multiview_draw_buffers</code><br>   */
  public void glReadBufferIndexedEXT(int src, int index);

  /** Entry point to C language function: <code> void {@native glDrawBuffersIndexedEXT}(GLint n, const GLenum *  location, const GLint *  indices) </code> <br>Part of <code>GL_EXT_multiview_draw_buffers</code><br>
      @param location a direct or array-backed {@link java.nio.IntBuffer}
      @param indices a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDrawBuffersIndexedEXT(int n, IntBuffer location, IntBuffer indices);

  /** Entry point to C language function: <code> void {@native glDrawBuffersIndexedEXT}(GLint n, const GLenum *  location, const GLint *  indices) </code> <br>Part of <code>GL_EXT_multiview_draw_buffers</code><br>   */
  public void glDrawBuffersIndexedEXT(int n, int[] location, int location_offset, int[] indices, int indices_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegeri_vEXT}(GLenum target, GLuint index, GLint *  data) </code> <br>Part of <code>GL_EXT_multiview_draw_buffers</code><br>
      @param data a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetIntegeri_vEXT(int target, int index, IntBuffer data);

  /** Entry point to C language function: <code> void {@native glGetIntegeri_vEXT}(GLenum target, GLuint index, GLint *  data) </code> <br>Part of <code>GL_EXT_multiview_draw_buffers</code><br>   */
  public void glGetIntegeri_vEXT(int target, int index, int[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glPrimitiveBoundingBoxEXT}(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) </code> <br>Part of <code>GL_EXT_primitive_bounding_box</code><br>   */
  public void glPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);

  /** Entry point to C language function: <code> void {@native glRasterSamplesEXT}(GLuint samples, GLboolean fixedsamplelocations) </code> <br>Part of <code>GL_EXT_raster_multisample</code><br>   */
  public void glRasterSamplesEXT(int samples, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTexPageCommitmentEXT}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) </code> <br>Part of <code>GL_EXT_sparse_texture</code><br>   */
  public void glTexPageCommitmentEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, boolean commit);

  /** Entry point to C language function: <code> void {@native glPatchParameteriEXT}(GLenum pname, GLint value) </code> <br>Part of <code>GL_EXT_tessellation_shader</code><br>   */
  public void glPatchParameteriEXT(int pname, int value);

  /** Entry point to C language function: <code> void {@native glTexBufferEXT}(GLenum target, GLenum internalformat, GLuint buffer) </code> <br>Part of <code>GL_EXT_texture_buffer</code>, <code>GL_EXT_texture_buffer_object</code><br>   */
  public void glTexBufferEXT(int target, int internalformat, int buffer);

  /** Entry point to C language function: <code> void {@native glTexBufferRangeEXT}(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) </code> <br>Part of <code>GL_EXT_texture_buffer</code><br>   */
  public void glTexBufferRangeEXT(int target, int internalformat, int buffer, long offset, long size);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleIMG}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_IMG_multisampled_render_to_texture</code><br>   */
  public void glRenderbufferStorageMultisampleIMG(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture2DMultisampleIMG}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) </code> <br>Part of <code>GL_IMG_multisampled_render_to_texture</code><br>   */
  public void glFramebufferTexture2DMultisampleIMG(int target, int attachment, int textarget, int texture, int level, int samples);

  /** Entry point to C language function: <code> void {@native glBeginConditionalRender}(GLuint id, GLenum mode) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_conditional_render</code><br>Alias for: <code>glBeginConditionalRenderNV</code>   */
  public void glBeginConditionalRender(int id, int mode);

  /** Entry point to C language function: <code> void {@native glEndConditionalRender}(void) </code> <br>Part of <code>GL_VERSION_3_0</code>, <code>GL_NV_conditional_render</code><br>Alias for: <code>glEndConditionalRenderNV</code>   */
  public void glEndConditionalRender();

  /** Entry point to C language function: <code> void {@native glSubpixelPrecisionBiasNV}(GLuint xbits, GLuint ybits) </code> <br>Part of <code>GL_NV_conservative_raster</code><br>   */
  public void glSubpixelPrecisionBiasNV(int xbits, int ybits);

  /** Entry point to C language function: <code> void {@native glCopyBufferSubDataNV}(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) </code> <br>Part of <code>GL_NV_copy_buffer</code><br>   */
  public void glCopyBufferSubDataNV(int readTarget, int writeTarget, long readOffset, long writeOffset, long size);

  /** Entry point to C language function: <code> void {@native glCoverageMaskNV}(GLboolean mask) </code> <br>Part of <code>GL_NV_coverage_sample</code><br>   */
  public void glCoverageMaskNV(boolean mask);

  /** Entry point to C language function: <code> void {@native glCoverageOperationNV}(GLenum operation) </code> <br>Part of <code>GL_NV_coverage_sample</code><br>   */
  public void glCoverageOperationNV(int operation);

  /** Entry point to C language function: <code> void {@native glDrawArraysInstancedNV}(GLenum mode, GLint first, GLsizei count, GLsizei primcount) </code> <br>Part of <code>GL_NV_draw_instanced</code><br>   */
  public void glDrawArraysInstancedNV(int mode, int first, int count, int primcount);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedNV}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei primcount) </code> <br>Part of <code>GL_NV_draw_instanced</code><br>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsInstancedNV(int mode, int count, int type, Buffer indices, int primcount);

  /** Entry point to C language function: <code> void {@native glFragmentCoverageColorNV}(GLuint color) </code> <br>Part of <code>GL_NV_fragment_coverage_to_color</code><br>   */
  public void glFragmentCoverageColorNV(int color);

  /** Entry point to C language function: <code> void {@native glBlitFramebufferNV}(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) </code> <br>Part of <code>GL_NV_framebuffer_blit</code><br>   */
  public void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);

  /** Entry point to C language function: <code> void {@native glCoverageModulationTableNV}(GLsizei n, const GLfloat *  v) </code> <br>Part of <code>GL_NV_framebuffer_mixed_samples</code><br>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glCoverageModulationTableNV(int n, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glCoverageModulationTableNV}(GLsizei n, const GLfloat *  v) </code> <br>Part of <code>GL_NV_framebuffer_mixed_samples</code><br>   */
  public void glCoverageModulationTableNV(int n, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glGetCoverageModulationTableNV}(GLsizei bufsize, GLfloat *  v) </code> <br>Part of <code>GL_NV_framebuffer_mixed_samples</code><br>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetCoverageModulationTableNV(int bufsize, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glGetCoverageModulationTableNV}(GLsizei bufsize, GLfloat *  v) </code> <br>Part of <code>GL_NV_framebuffer_mixed_samples</code><br>   */
  public void glGetCoverageModulationTableNV(int bufsize, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glCoverageModulationNV}(GLenum components) </code> <br>Part of <code>GL_NV_framebuffer_mixed_samples</code><br>   */
  public void glCoverageModulationNV(int components);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleNV}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_NV_framebuffer_multisample</code><br>   */
  public void glRenderbufferStorageMultisampleNV(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glVertexAttribDivisorNV}(GLuint index, GLuint divisor) </code> <br>Part of <code>GL_NV_instanced_arrays</code><br>   */
  public void glVertexAttribDivisorNV(int index, int divisor);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix2x3fvNV(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>   */
  public void glUniformMatrix2x3fvNV(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix3x2fvNV(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>   */
  public void glUniformMatrix3x2fvNV(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix2x4fvNV(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>   */
  public void glUniformMatrix2x4fvNV(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix4x2fvNV(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>   */
  public void glUniformMatrix4x2fvNV(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix3x4fvNV(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>   */
  public void glUniformMatrix3x4fvNV(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix4x3fvNV(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3fvNV}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value) </code> <br>Part of <code>GL_NV_non_square_matrices</code><br>   */
  public void glUniformMatrix4x3fvNV(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glPolygonModeNV}(GLenum face, GLenum mode) </code> <br>Part of <code>GL_NV_polygon_mode</code><br>   */
  public void glPolygonModeNV(int face, int mode);

  /** Entry point to C language function: <code> void {@native glReadBufferNV}(GLenum mode) </code> <br>Part of <code>GL_NV_read_buffer</code><br>   */
  public void glReadBufferNV(int mode);

  /** Entry point to C language function: <code> void {@native glFramebufferSampleLocationsfvNV}(GLenum target, GLuint start, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_NV_sample_locations</code><br>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glFramebufferSampleLocationsfvNV(int target, int start, int count, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glFramebufferSampleLocationsfvNV}(GLenum target, GLuint start, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_NV_sample_locations</code><br>   */
  public void glFramebufferSampleLocationsfvNV(int target, int start, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferSampleLocationsfvNV}(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_NV_sample_locations</code><br>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glNamedFramebufferSampleLocationsfvNV(int framebuffer, int start, int count, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferSampleLocationsfvNV}(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_NV_sample_locations</code><br>   */
  public void glNamedFramebufferSampleLocationsfvNV(int framebuffer, int start, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glResolveDepthValuesNV}(void) </code> <br>Part of <code>GL_NV_sample_locations</code><br>   */
  public void glResolveDepthValuesNV();

  /** Entry point to C language function: <code> void {@native glViewportArrayvNV}(GLuint first, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glViewportArrayvNV(int first, int count, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glViewportArrayvNV}(GLuint first, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glViewportArrayvNV(int first, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfNV}(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glViewportIndexedfNV(int index, float x, float y, float w, float h);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfvNV}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glViewportIndexedfvNV(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfvNV}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glViewportIndexedfvNV(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glScissorArrayvNV}(GLuint first, GLsizei count, const GLint *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glScissorArrayvNV(int first, int count, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glScissorArrayvNV}(GLuint first, GLsizei count, const GLint *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glScissorArrayvNV(int first, int count, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glScissorIndexedNV}(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glScissorIndexedNV(int index, int left, int bottom, int width, int height);

  /** Entry point to C language function: <code> void {@native glScissorIndexedvNV}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glScissorIndexedvNV(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glScissorIndexedvNV}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glScissorIndexedvNV(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangeArrayfvNV}(GLuint first, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glDepthRangeArrayfvNV(int first, int count, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glDepthRangeArrayfvNV}(GLuint first, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glDepthRangeArrayfvNV(int first, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangeIndexedfNV}(GLuint index, GLfloat n, GLfloat f) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glDepthRangeIndexedfNV(int index, float n, float f);

  /** Entry point to C language function: <code> void {@native glGetFloati_vNV}(GLenum target, GLuint index, GLfloat *  data) </code> <br>Part of <code>GL_NV_viewport_array</code><br>
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetFloati_vNV(int target, int index, FloatBuffer data);

  /** Entry point to C language function: <code> void {@native glGetFloati_vNV}(GLenum target, GLuint index, GLfloat *  data) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glGetFloati_vNV(int target, int index, float[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glEnableiNV}(GLenum target, GLuint index) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glEnableiNV(int target, int index);

  /** Entry point to C language function: <code> void {@native glDisableiNV}(GLenum target, GLuint index) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public void glDisableiNV(int target, int index);

  /** Entry point to C language function: <code> GLboolean {@native glIsEnablediNV}(GLenum target, GLuint index) </code> <br>Part of <code>GL_NV_viewport_array</code><br>   */
  public boolean glIsEnablediNV(int target, int index);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureMultiviewOVR}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) </code> <br>Part of <code>GL_OVR_multiview</code><br>   */
  public void glFramebufferTextureMultiviewOVR(int target, int attachment, int texture, int level, int baseViewIndex, int numViews);

  /** Entry point to C language function: <code> void {@native glAlphaFuncQCOM}(GLenum func, GLclampf ref) </code> <br>Part of <code>GL_QCOM_alpha_test</code><br>   */
  public void glAlphaFuncQCOM(int func, float ref);

  /** Entry point to C language function: <code> void {@native glGetDriverControlsQCOM}(GLint *  num, GLsizei size, GLuint *  driverControls) </code> <br>Part of <code>GL_QCOM_driver_control</code><br>
      @param num a direct or array-backed {@link java.nio.IntBuffer}
      @param driverControls a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetDriverControlsQCOM(IntBuffer num, int size, IntBuffer driverControls);

  /** Entry point to C language function: <code> void {@native glGetDriverControlsQCOM}(GLint *  num, GLsizei size, GLuint *  driverControls) </code> <br>Part of <code>GL_QCOM_driver_control</code><br>   */
  public void glGetDriverControlsQCOM(int[] num, int num_offset, int size, int[] driverControls, int driverControls_offset);

  /** Entry point to C language function: <code> void {@native glGetDriverControlStringQCOM}(GLuint driverControl, GLsizei bufSize, GLsizei *  length, GLchar *  driverControlString) </code> <br>Part of <code>GL_QCOM_driver_control</code><br>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param driverControlString a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetDriverControlStringQCOM(int driverControl, int bufSize, IntBuffer length, ByteBuffer driverControlString);

  /** Entry point to C language function: <code> void {@native glGetDriverControlStringQCOM}(GLuint driverControl, GLsizei bufSize, GLsizei *  length, GLchar *  driverControlString) </code> <br>Part of <code>GL_QCOM_driver_control</code><br>   */
  public void glGetDriverControlStringQCOM(int driverControl, int bufSize, int[] length, int length_offset, byte[] driverControlString, int driverControlString_offset);

  /** Entry point to C language function: <code> void {@native glEnableDriverControlQCOM}(GLuint driverControl) </code> <br>Part of <code>GL_QCOM_driver_control</code><br>   */
  public void glEnableDriverControlQCOM(int driverControl);

  /** Entry point to C language function: <code> void {@native glDisableDriverControlQCOM}(GLuint driverControl) </code> <br>Part of <code>GL_QCOM_driver_control</code><br>   */
  public void glDisableDriverControlQCOM(int driverControl);

  /** Entry point to C language function: <code> void {@native glExtGetTexturesQCOM}(GLuint *  textures, GLint maxTextures, GLint *  numTextures) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>
      @param textures a direct or array-backed {@link java.nio.IntBuffer}
      @param numTextures a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetTexturesQCOM(IntBuffer textures, int maxTextures, IntBuffer numTextures);

  /** Entry point to C language function: <code> void {@native glExtGetTexturesQCOM}(GLuint *  textures, GLint maxTextures, GLint *  numTextures) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>   */
  public void glExtGetTexturesQCOM(int[] textures, int textures_offset, int maxTextures, int[] numTextures, int numTextures_offset);

  /** Entry point to C language function: <code> void {@native glExtGetBuffersQCOM}(GLuint *  buffers, GLint maxBuffers, GLint *  numBuffers) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numBuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetBuffersQCOM(IntBuffer buffers, int maxBuffers, IntBuffer numBuffers);

  /** Entry point to C language function: <code> void {@native glExtGetBuffersQCOM}(GLuint *  buffers, GLint maxBuffers, GLint *  numBuffers) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>   */
  public void glExtGetBuffersQCOM(int[] buffers, int buffers_offset, int maxBuffers, int[] numBuffers, int numBuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetRenderbuffersQCOM}(GLuint *  renderbuffers, GLint maxRenderbuffers, GLint *  numRenderbuffers) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>
      @param renderbuffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numRenderbuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetRenderbuffersQCOM(IntBuffer renderbuffers, int maxRenderbuffers, IntBuffer numRenderbuffers);

  /** Entry point to C language function: <code> void {@native glExtGetRenderbuffersQCOM}(GLuint *  renderbuffers, GLint maxRenderbuffers, GLint *  numRenderbuffers) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>   */
  public void glExtGetRenderbuffersQCOM(int[] renderbuffers, int renderbuffers_offset, int maxRenderbuffers, int[] numRenderbuffers, int numRenderbuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetFramebuffersQCOM}(GLuint *  framebuffers, GLint maxFramebuffers, GLint *  numFramebuffers) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>
      @param framebuffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numFramebuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetFramebuffersQCOM(IntBuffer framebuffers, int maxFramebuffers, IntBuffer numFramebuffers);

  /** Entry point to C language function: <code> void {@native glExtGetFramebuffersQCOM}(GLuint *  framebuffers, GLint maxFramebuffers, GLint *  numFramebuffers) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>   */
  public void glExtGetFramebuffersQCOM(int[] framebuffers, int framebuffers_offset, int maxFramebuffers, int[] numFramebuffers, int numFramebuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetTexLevelParameterivQCOM}(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetTexLevelParameterivQCOM(int texture, int face, int level, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glExtGetTexLevelParameterivQCOM}(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>   */
  public void glExtGetTexLevelParameterivQCOM(int texture, int face, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glExtTexObjectStateOverrideiQCOM}(GLenum target, GLenum pname, GLint param) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>   */
  public void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glExtGetTexSubImageQCOM}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *  texels) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>
      @param texels a direct or array-backed {@link java.nio.Buffer}   */
  public void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Buffer texels);

  /** Entry point to C language function: <code> void {@native glExtGetBufferPointervQCOM}(GLenum target, void *  *  params) </code> <br>Part of <code>GL_QCOM_extended_get</code><br>
      @param params a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glExtGetBufferPointervQCOM(int target, PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glExtGetShadersQCOM}(GLuint *  shaders, GLint maxShaders, GLint *  numShaders) </code> <br>Part of <code>GL_QCOM_extended_get2</code><br>
      @param shaders a direct or array-backed {@link java.nio.IntBuffer}
      @param numShaders a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetShadersQCOM(IntBuffer shaders, int maxShaders, IntBuffer numShaders);

  /** Entry point to C language function: <code> void {@native glExtGetShadersQCOM}(GLuint *  shaders, GLint maxShaders, GLint *  numShaders) </code> <br>Part of <code>GL_QCOM_extended_get2</code><br>   */
  public void glExtGetShadersQCOM(int[] shaders, int shaders_offset, int maxShaders, int[] numShaders, int numShaders_offset);

  /** Entry point to C language function: <code> void {@native glExtGetProgramsQCOM}(GLuint *  programs, GLint maxPrograms, GLint *  numPrograms) </code> <br>Part of <code>GL_QCOM_extended_get2</code><br>
      @param programs a direct or array-backed {@link java.nio.IntBuffer}
      @param numPrograms a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetProgramsQCOM(IntBuffer programs, int maxPrograms, IntBuffer numPrograms);

  /** Entry point to C language function: <code> void {@native glExtGetProgramsQCOM}(GLuint *  programs, GLint maxPrograms, GLint *  numPrograms) </code> <br>Part of <code>GL_QCOM_extended_get2</code><br>   */
  public void glExtGetProgramsQCOM(int[] programs, int programs_offset, int maxPrograms, int[] numPrograms, int numPrograms_offset);

  /** Entry point to C language function: <code> GLboolean {@native glExtIsProgramBinaryQCOM}(GLuint program) </code> <br>Part of <code>GL_QCOM_extended_get2</code><br>   */
  public boolean glExtIsProgramBinaryQCOM(int program);

  /** Entry point to C language function: <code> void {@native glExtGetProgramBinarySourceQCOM}(GLuint program, GLenum shadertype, GLchar *  source, GLint *  length) </code> <br>Part of <code>GL_QCOM_extended_get2</code><br>
      @param source a direct or array-backed {@link java.nio.ByteBuffer}
      @param length a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetProgramBinarySourceQCOM(int program, int shadertype, ByteBuffer source, IntBuffer length);

  /** Entry point to C language function: <code> void {@native glExtGetProgramBinarySourceQCOM}(GLuint program, GLenum shadertype, GLchar *  source, GLint *  length) </code> <br>Part of <code>GL_QCOM_extended_get2</code><br>   */
  public void glExtGetProgramBinarySourceQCOM(int program, int shadertype, byte[] source, int source_offset, int[] length, int length_offset);

  /** Entry point to C language function: <code> void {@native glStartTilingQCOM}(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) </code> <br>Part of <code>GL_QCOM_tiled_rendering</code><br>   */
  public void glStartTilingQCOM(int x, int y, int width, int height, int preserveMask);

  /** Entry point to C language function: <code> void {@native glEndTilingQCOM}(GLbitfield preserveMask) </code> <br>Part of <code>GL_QCOM_tiled_rendering</code><br>   */
  public void glEndTilingQCOM(int preserveMask);


  // --- Begin CustomJavaCode .cfg declarations
    /** Entry point to C language function: <code> void {@native glDrawElements}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>, <code>GL_VERSION_1_1</code>, <code>GL_ES_VERSION_2_0</code>
        @param indices a direct or array-backed {@link java.nio.Buffer}   */
    public void glDrawElements(int mode, int count, int type, Buffer indices);
  
    /** Entry point to C language function: <code> void {@native glVertexAttribPointer}(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  ptr); </code> <br>Part of <code>GL_ES_VERSION_2_0</code>, <code>GL_VERSION_2_0</code>
        @param ptr a direct only {@link java.nio.Buffer}   */
    public void glVertexAttribPointer(int indx, int size, int type, boolean normalized, int stride, Buffer ptr);
  
 public static final int GL_NVIDIA_PLATFORM_BINARY_NV = 0x890B;
  // ---- End CustomJavaCode .cfg declarations

} // end of class GLES2
