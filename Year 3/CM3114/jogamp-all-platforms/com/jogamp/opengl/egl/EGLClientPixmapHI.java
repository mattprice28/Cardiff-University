/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Sat Oct 10 03:19:33 CEST 2015 ----! */


package com.jogamp.opengl.egl;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.opengl.egl.EGLExt;
import com.jogamp.opengl.egl.EGLClientPixmapHI;

public class EGLClientPixmapHI {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] EGLClientPixmapHI_size = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */  };
//private static final int[] pData_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
//private static final int[] pData_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };// JType[ANON / NIL, primitivePointerType = VOID, is[C-Primitive-Pointer, ], descriptor 'ANON_NIO']
  private static final int[] iWidth_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */ };
//private static final int[] iWidth_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] iHeight_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */ };
//private static final int[] iHeight_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] iStride_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */ };
//private static final int[] iStride_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };

  public static int size() {
    return EGLClientPixmapHI_size[mdIdx];
  }

  public static EGLClientPixmapHI create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static EGLClientPixmapHI create(java.nio.ByteBuffer buf) {
      return new EGLClientPixmapHI(buf);
  }

  EGLClientPixmapHI(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  // SKIP unsized array in struct: EGLClientPixmapHI.pData: CType[(PointerType) 'void *' -> (void) * , size [fixed false, lnx64 8], [const[false], pointer*1]]

  /** Setter for native field <code>iWidth</code>: CType[(IntType) typedef 'EGLint', size [fixed true, lnx64 4], [const[false], int]] */
  public EGLClientPixmapHI setIWidth(int val) {
    accessor.setIntAt(iWidth_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>iWidth</code>: CType[(IntType) typedef 'EGLint', size [fixed true, lnx64 4], [const[false], int]] */
  public int getIWidth() {
    return accessor.getIntAt(iWidth_offset[mdIdx]);
  }

  /** Setter for native field <code>iHeight</code>: CType[(IntType) typedef 'EGLint', size [fixed true, lnx64 4], [const[false], int]] */
  public EGLClientPixmapHI setIHeight(int val) {
    accessor.setIntAt(iHeight_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>iHeight</code>: CType[(IntType) typedef 'EGLint', size [fixed true, lnx64 4], [const[false], int]] */
  public int getIHeight() {
    return accessor.getIntAt(iHeight_offset[mdIdx]);
  }

  /** Setter for native field <code>iStride</code>: CType[(IntType) typedef 'EGLint', size [fixed true, lnx64 4], [const[false], int]] */
  public EGLClientPixmapHI setIStride(int val) {
    accessor.setIntAt(iStride_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>iStride</code>: CType[(IntType) typedef 'EGLint', size [fixed true, lnx64 4], [const[false], int]] */
  public int getIStride() {
    return accessor.getIntAt(iStride_offset[mdIdx]);
  }


}
