/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Sat Oct 10 03:16:36 CEST 2015 ----! */

package com.jogamp.opengl;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <p>This interface contains all OpenGL [ 3.1 .. 3.3 ] <i>core</i> methods,
  * as well as most of it's extensions defined at the time of this specification.</p>
  * <p>Note: OpenGL [ 3.1 .. 3.3 ] core profile does not includes fixed point functionality.</p>
  */
public interface GL3 extends GL3ES3, GL2GL3{

  /** <code>GL_ARB_tessellation_shader</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_PATCH_DEFAULT_INNER_LEVEL = 0x8e73;
  /** <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV</code> - CType: int */
  public static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825f;
  /** <code>GL_ARB_texture_gather</code><br>Alias for: <code>GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB</code> - CType: int */
  public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = 0x8f9f;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_NUM_COMPATIBLE_SUBROUTINES = 0x8e4a;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT2x4_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT2x4 = 0x8f4a;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT2x3_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT2x3 = 0x8f49;
  /** <code>GL_VERSION_3_3</code>, <code>GL_ARB_blend_func_extended</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>GL_SRC1_COLOR_EXT</code> - CType: int */
  public static final int GL_SRC1_COLOR = 0x88f9;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_LINES_ADJACENCY_ARB = 0xa;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8ddf;
  /** <code>GL_ARB_shading_language_include</code> - CType: int */
  public static final int GL_SHADER_INCLUDE_ARB = 0x8dae;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_VEC4_EXT</code> - CType: int */
  public static final int GL_DOUBLE_VEC4 = 0x8ffe;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_VEC3_EXT</code> - CType: int */
  public static final int GL_DOUBLE_VEC3 = 0x8ffd;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_VEC2_EXT</code> - CType: int */
  public static final int GL_DOUBLE_VEC2 = 0x8ffc;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_LINE_STRIP_ADJACENCY_ARB = 0xb;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8da7;
  /** <code>GL_ARB_texture_compression_bptc</code> - CType: int */
  public static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8e8e;
  /** <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>GL_VIEWPORT_BOUNDS_RANGE_NV</code> - CType: int */
  public static final int GL_VIEWPORT_BOUNDS_RANGE = 0x825d;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_COMPATIBLE_SUBROUTINES = 0x8e4b;
  /** <code>GL_ARB_depth_clamp</code>, <code>GL_VERSION_3_2</code>, <code>GL_NV_depth_clamp</code><br>Alias for: <code>GL_DEPTH_CLAMP_NV</code> - CType: int */
  public static final int GL_DEPTH_CLAMP = 0x864f;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0xd;
  /** <code>GL_ARB_cl_event</code> - CType: int */
  public static final int GL_SYNC_CL_EVENT_ARB = 0x8240;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_TRIANGLES_ADJACENCY_ARB = 0xc;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8da9;
  /** <code>GL_VERSION_3_3</code>, <code>GL_ARB_blend_func_extended</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>GL_ONE_MINUS_SRC1_COLOR_EXT</code> - CType: int */
  public static final int GL_ONE_MINUS_SRC1_COLOR = 0x88fa;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8de6;
  /** <code>GL_ARB_tessellation_shader</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8e74;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT4_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT4 = 0x8f48;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT3_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT3 = 0x8f47;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT2_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT2 = 0x8f46;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8ddd;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8e49;
  /** <code>GL_ARB_texture_compression_bptc</code> - CType: int */
  public static final int GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8e8c;
  /** <code>GL_ARB_texture_compression_bptc</code> - CType: int */
  public static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8e8d;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8c29;
  /** <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x2;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8ddc;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_GEOMETRY_VERTICES_OUT_ARB = 0x8dda;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8de8;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8de0;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8e48;
  /** <code>GL_ARB_shading_language_include</code> - CType: int */
  public static final int GL_NAMED_STRING_LENGTH_ARB = 0x8de9;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT4x2_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT4x2 = 0x8f4d;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT4x3_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT4x3 = 0x8f4e;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_GEOMETRY_INPUT_TYPE_ARB = 0x8ddb;
  /** <code>GL_VERSION_3_3</code>, <code>GL_ARB_blend_func_extended</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>GL_ONE_MINUS_SRC1_ALPHA_EXT</code> - CType: int */
  public static final int GL_ONE_MINUS_SRC1_ALPHA = 0x88fb;
  /** <code>GL_ARB_tessellation_shader</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84f0;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_GEOMETRY_SHADER_ARB = 0x8dd9;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_ACTIVE_SUBROUTINES = 0x8de5;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8dde;
  /** <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>GL_VIEWPORT_SUBPIXEL_BITS_NV</code> - CType: int */
  public static final int GL_VIEWPORT_SUBPIXEL_BITS = 0x825c;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8de1;
  /** <code>GL_ARB_cl_event</code> - CType: int */
  public static final int GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
  /** <code>GL_ARB_geometry_shader4</code> - CType: int */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8da8;
  /** <code>GL_VERSION_3_3</code>, <code>GL_ARB_blend_func_extended</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT</code> - CType: int */
  public static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88fc;
  /** <code>GL_VERSION_3_2</code>, <code>GL_NV_geometry_program4</code>, <code>GL_EXT_geometry_shader4</code>, <code>GL_ARB_geometry_shader4</code><br>Alias for: <code>GL_PROGRAM_POINT_SIZE_EXT</code>, <code>GL_PROGRAM_POINT_SIZE_ARB</code> - CType: int */
  public static final int GL_PROGRAM_POINT_SIZE = 0x8642;
  /** <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_CONTEXT_CORE_PROFILE_BIT = 0x1;
  /** <code>GL_ARB_texture_compression_bptc</code> - CType: int */
  public static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8e8f;
  /** <code>GL_ARB_shading_language_include</code> - CType: int */
  public static final int GL_NAMED_STRING_TYPE_ARB = 0x8dea;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT3x4_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT3x4 = 0x8f4c;
  /** <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code>, <code>GL_EXT_vertex_attrib_64bit</code><br>Alias for: <code>GL_DOUBLE_MAT3x2_EXT</code> - CType: int */
  public static final int GL_DOUBLE_MAT3x2 = 0x8f4b;
  /** <code>GL_VERSION_3_2</code> - CType: int */
  public static final int GL_CONTEXT_PROFILE_MASK = 0x9126;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_MAX_SUBROUTINES = 0x8de7;
  /** <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8e47;
  /** <code>GL_ARB_tessellation_shader</code>, <code>GL_VERSION_4_0</code> - CType: int */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84f1;
  /** <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>GL_MAX_VIEWPORTS_NV</code> - CType: int */
  public static final int GL_MAX_VIEWPORTS = 0x825b;

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsBaseVertex}(GLenum mode, const GLsizei *  count, GLenum type, const void * const  *  indices, GLsizei drawcount, const GLint *  basevertex) </code> <br>Part of <code>GL_ARB_draw_elements_base_vertex</code>, <code>GL_VERSION_3_2</code>, <code>GL_OES_draw_elements_base_vertex</code>, <code>GL_EXT_draw_elements_base_vertex</code><br>Alias for: <code>glMultiDrawElementsBaseVertexOES</code>, <code>glMultiDrawElementsBaseVertexEXT</code>
      @param count a direct only {@link java.nio.IntBuffer}
      @param indices a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param basevertex a direct only {@link java.nio.IntBuffer}   */
  public void glMultiDrawElementsBaseVertex(int mode, IntBuffer count, int type, PointerBuffer indices, int drawcount, IntBuffer basevertex);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocationIndexed}(GLuint program, GLuint colorNumber, GLuint index, const GLchar *  name) </code> <br>Part of <code>GL_VERSION_3_3</code>, <code>GL_ARB_blend_func_extended</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>glBindFragDataLocationIndexedEXT</code>   */
  public void glBindFragDataLocationIndexed(int program, int colorNumber, int index, String name);

  /** Entry point to C language function: <code> GLint {@native glGetFragDataIndex}(GLuint program, const GLchar *  name) </code> <br>Part of <code>GL_VERSION_3_3</code>, <code>GL_ARB_blend_func_extended</code>, <code>GL_EXT_blend_func_extended</code><br>Alias for: <code>glGetFragDataIndexEXT</code>   */
  public int glGetFragDataIndex(int program, String name);

  /** Entry point to C language function: <code> void {@native glVertexAttribP1ui}(GLuint index, GLenum type, GLboolean normalized, GLuint value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>   */
  public void glVertexAttribP1ui(int index, int type, boolean normalized, int value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP1uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribP1uiv(int index, int type, boolean normalized, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP1uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>   */
  public void glVertexAttribP1uiv(int index, int type, boolean normalized, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribP2ui}(GLuint index, GLenum type, GLboolean normalized, GLuint value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>   */
  public void glVertexAttribP2ui(int index, int type, boolean normalized, int value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP2uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribP2uiv(int index, int type, boolean normalized, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP2uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>   */
  public void glVertexAttribP2uiv(int index, int type, boolean normalized, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribP3ui}(GLuint index, GLenum type, GLboolean normalized, GLuint value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>   */
  public void glVertexAttribP3ui(int index, int type, boolean normalized, int value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP3uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribP3uiv(int index, int type, boolean normalized, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP3uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>   */
  public void glVertexAttribP3uiv(int index, int type, boolean normalized, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribP4ui}(GLuint index, GLenum type, GLboolean normalized, GLuint value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>   */
  public void glVertexAttribP4ui(int index, int type, boolean normalized, int value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP4uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribP4uiv(int index, int type, boolean normalized, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP4uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value) </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>, <code>GL_VERSION_3_3</code><br>   */
  public void glVertexAttribP4uiv(int index, int type, boolean normalized, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform1d}(GLint location, GLdouble x) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniform1d(int location, double x);

  /** Entry point to C language function: <code> void {@native glUniform2d}(GLint location, GLdouble x, GLdouble y) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniform2d(int location, double x, double y);

  /** Entry point to C language function: <code> void {@native glUniform3d}(GLint location, GLdouble x, GLdouble y, GLdouble z) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniform3d(int location, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glUniform4d}(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniform4d(int location, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glUniform1dv}(GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform1dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1dv}(GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniform1dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2dv}(GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform2dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2dv}(GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniform2dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3dv}(GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform3dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3dv}(GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniform3dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4dv}(GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform4dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4dv}(GLint location, GLsizei count, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniform4dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2x3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix2x3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2x4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix2x4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3x2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix3x2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3x4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix3x4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4x2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix4x2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4x3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformMatrix4x3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformdv}(GLuint program, GLint location, GLdouble *  params) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetUniformdv(int program, int location, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformdv}(GLuint program, GLint location, GLdouble *  params) </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glGetUniformdv(int program, int location, double[] params, int params_offset);

  /** Entry point to C language function: <code> GLint {@native glGetSubroutineUniformLocation}(GLuint program, GLenum shadertype, const GLchar *  name) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>   */
  public int glGetSubroutineUniformLocation(int program, int shadertype, String name);

  /** Entry point to C language function: <code> GLuint {@native glGetSubroutineIndex}(GLuint program, GLenum shadertype, const GLchar *  name) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>   */
  public int glGetSubroutineIndex(int program, int shadertype, String name);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformiv}(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *  values) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetActiveSubroutineUniformiv(int program, int shadertype, int index, int pname, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformiv}(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *  values) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glGetActiveSubroutineUniformiv(int program, int shadertype, int index, int pname, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveSubroutineUniformName(int program, int shadertype, int index, int bufsize, IntBuffer length, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glGetActiveSubroutineUniformName(int program, int shadertype, int index, int bufsize, int[] length, int length_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveSubroutineName(int program, int shadertype, int index, int bufsize, IntBuffer length, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glGetActiveSubroutineName(int program, int shadertype, int index, int bufsize, int[] length, int length_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glUniformSubroutinesuiv}(GLenum shadertype, GLsizei count, const GLuint *  indices) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>
      @param indices a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniformSubroutinesuiv(int shadertype, int count, IntBuffer indices);

  /** Entry point to C language function: <code> void {@native glUniformSubroutinesuiv}(GLenum shadertype, GLsizei count, const GLuint *  indices) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glUniformSubroutinesuiv(int shadertype, int count, int[] indices, int indices_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformSubroutineuiv}(GLenum shadertype, GLint location, GLuint *  params) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetUniformSubroutineuiv(int shadertype, int location, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformSubroutineuiv}(GLenum shadertype, GLint location, GLuint *  params) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glGetUniformSubroutineuiv(int shadertype, int location, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramStageiv}(GLuint program, GLenum shadertype, GLenum pname, GLint *  values) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramStageiv(int program, int shadertype, int pname, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetProgramStageiv}(GLuint program, GLenum shadertype, GLenum pname, GLint *  values) </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glGetProgramStageiv(int program, int shadertype, int pname, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPatchParameterfv}(GLenum pname, const GLfloat *  values) </code> <br>Part of <code>GL_ARB_tessellation_shader</code>, <code>GL_VERSION_4_0</code><br>
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPatchParameterfv(int pname, FloatBuffer values);

  /** Entry point to C language function: <code> void {@native glPatchParameterfv}(GLenum pname, const GLfloat *  values) </code> <br>Part of <code>GL_ARB_tessellation_shader</code>, <code>GL_VERSION_4_0</code><br>   */
  public void glPatchParameterfv(int pname, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glViewportArrayv}(GLuint first, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glViewportArrayvNV</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glViewportArrayv(int first, int count, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glViewportArrayv}(GLuint first, GLsizei count, const GLfloat *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glViewportArrayvNV</code>   */
  public void glViewportArrayv(int first, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glViewportIndexedf}(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glViewportIndexedfNV</code>   */
  public void glViewportIndexedf(int index, float x, float y, float w, float h);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glViewportIndexedfvNV</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glViewportIndexedfv(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfv}(GLuint index, const GLfloat *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glViewportIndexedfvNV</code>   */
  public void glViewportIndexedfv(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glScissorArrayv}(GLuint first, GLsizei count, const GLint *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glScissorArrayvNV</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glScissorArrayv(int first, int count, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glScissorArrayv}(GLuint first, GLsizei count, const GLint *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glScissorArrayvNV</code>   */
  public void glScissorArrayv(int first, int count, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glScissorIndexed}(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glScissorIndexedNV</code>   */
  public void glScissorIndexed(int index, int left, int bottom, int width, int height);

  /** Entry point to C language function: <code> void {@native glScissorIndexedv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glScissorIndexedvNV</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glScissorIndexedv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glScissorIndexedv}(GLuint index, const GLint *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glScissorIndexedvNV</code>   */
  public void glScissorIndexedv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangeArrayv}(GLuint first, GLsizei count, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code><br>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glDepthRangeArrayv(int first, int count, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glDepthRangeArrayv}(GLuint first, GLsizei count, const GLdouble *  v) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code><br>   */
  public void glDepthRangeArrayv(int first, int count, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangeIndexed}(GLuint index, GLdouble n, GLdouble f) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code><br>   */
  public void glDepthRangeIndexed(int index, double n, double f);

  /** Entry point to C language function: <code> void {@native glGetFloati_v}(GLenum target, GLuint index, GLfloat *  data) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glGetFloati_vEXT</code>, <code>glGetFloati_vNV</code>
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetFloati_v(int target, int index, FloatBuffer data);

  /** Entry point to C language function: <code> void {@native glGetFloati_v}(GLenum target, GLuint index, GLfloat *  data) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code>, <code>GL_NV_viewport_array</code><br>Alias for: <code>glGetFloati_vEXT</code>, <code>glGetFloati_vNV</code>   */
  public void glGetFloati_v(int target, int index, float[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetDoublei_v}(GLenum target, GLuint index, GLdouble *  data) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetDoublei_vEXT</code>
      @param data a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetDoublei_v(int target, int index, DoubleBuffer data);

  /** Entry point to C language function: <code> void {@native glGetDoublei_v}(GLenum target, GLuint index, GLdouble *  data) </code> <br>Part of <code>GL_ARB_viewport_array</code>, <code>GL_VERSION_4_1</code>, <code>GL_EXT_direct_state_access</code><br>Alias for: <code>glGetDoublei_vEXT</code>   */
  public void glGetDoublei_v(int target, int index, double[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackInstanced}(GLenum mode, GLuint id, GLsizei instancecount) </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_transform_feedback_instanced</code><br>   */
  public void glDrawTransformFeedbackInstanced(int mode, int id, int instancecount);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackStreamInstanced}(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_transform_feedback_instanced</code><br>   */
  public void glDrawTransformFeedbackStreamInstanced(int mode, int id, int stream, int instancecount);

  /** Entry point to C language function: <code> void {@native glMultiDrawArraysIndirect}(GLenum mode, const void *  indirect, GLsizei drawcount, GLsizei stride) </code> <br>Part of <code>GL_ARB_multi_draw_indirect</code>, <code>GL_VERSION_4_3</code>, <code>GL_EXT_multi_draw_indirect</code>, <code>GL_AMD_multi_draw_indirect</code><br>Alias for: <code>glMultiDrawArraysIndirectEXT</code>, <code>glMultiDrawArraysIndirectAMD</code>   */
  public void glMultiDrawArraysIndirect(int mode, long indirect_buffer_offset, int drawcount, int stride);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsIndirect}(GLenum mode, GLenum type, const void *  indirect, GLsizei drawcount, GLsizei stride) </code> <br>Part of <code>GL_ARB_multi_draw_indirect</code>, <code>GL_VERSION_4_3</code>, <code>GL_AMD_multi_draw_indirect</code>, <code>GL_EXT_multi_draw_indirect</code><br>Alias for: <code>glMultiDrawElementsIndirectAMD</code>, <code>glMultiDrawElementsIndirectEXT</code>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawElementsIndirect(int mode, int type, Buffer indirect, int drawcount, int stride);

  /** Entry point to C language function: <code> GLsync {@native glCreateSyncFromCLeventARB}(struct _cl_context *  context, struct _cl_event *  event, GLbitfield flags) </code> <br>Part of <code>GL_ARB_cl_event</code><br>   */
  public long glCreateSyncFromCLeventARB(long context, long event, int flags);

  /** Entry point to C language function: <code> void {@native glNamedStringARB}(GLenum type, GLint namelen, const GLchar *  name, GLint stringlen, const GLchar *  string) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>   */
  public void glNamedStringARB(int type, int namelen, String name, int stringlen, String string);

  /** Entry point to C language function: <code> void {@native glDeleteNamedStringARB}(GLint namelen, const GLchar *  name) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>   */
  public void glDeleteNamedStringARB(int namelen, String name);

  /** Entry point to C language function: <code> void {@native glCompileShaderIncludeARB}(GLuint shader, GLsizei count, const GLchar * const  *  path, const GLint *  length) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>
      @param length a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCompileShaderIncludeARB(int shader, int count, String[] path, IntBuffer length);

  /** Entry point to C language function: <code> void {@native glCompileShaderIncludeARB}(GLuint shader, GLsizei count, const GLchar * const  *  path, const GLint *  length) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>   */
  public void glCompileShaderIncludeARB(int shader, int count, String[] path, int[] length, int length_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsNamedStringARB}(GLint namelen, const GLchar *  name) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>   */
  public boolean glIsNamedStringARB(int namelen, String name);

  /** Entry point to C language function: <code> void {@native glGetNamedStringARB}(GLint namelen, const GLchar *  name, GLsizei bufSize, GLint *  stringlen, GLchar *  string) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>
      @param stringlen a direct or array-backed {@link java.nio.IntBuffer}
      @param string a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetNamedStringARB(int namelen, String name, int bufSize, IntBuffer stringlen, ByteBuffer string);

  /** Entry point to C language function: <code> void {@native glGetNamedStringARB}(GLint namelen, const GLchar *  name, GLsizei bufSize, GLint *  stringlen, GLchar *  string) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>   */
  public void glGetNamedStringARB(int namelen, String name, int bufSize, int[] stringlen, int stringlen_offset, byte[] string, int string_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedStringivARB}(GLint namelen, const GLchar *  name, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedStringivARB(int namelen, String name, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedStringivARB}(GLint namelen, const GLchar *  name, GLenum pname, GLint *  params) </code> <br>Part of <code>GL_ARB_shading_language_include</code><br>   */
  public void glGetNamedStringivARB(int namelen, String name, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramParameteriARB}(GLuint program, GLenum pname, GLint value) </code> <br>Part of <code>GL_ARB_geometry_shader4</code><br>   */
  public void glProgramParameteriARB(int program, int pname, int value);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureARB}(GLenum target, GLenum attachment, GLuint texture, GLint level) </code> <br>Part of <code>GL_ARB_geometry_shader4</code><br>   */
  public void glFramebufferTextureARB(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureLayerARB}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) </code> <br>Part of <code>GL_ARB_geometry_shader4</code><br>   */
  public void glFramebufferTextureLayerARB(int target, int attachment, int texture, int level, int layer);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureFaceARB}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) </code> <br>Part of <code>GL_ARB_geometry_shader4</code><br>   */
  public void glFramebufferTextureFaceARB(int target, int attachment, int texture, int level, int face);


} // end of class GL3
