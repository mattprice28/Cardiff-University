/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/procaddress/ProcAddressEmitter.java on Fri Oct 09 06:31:43 CEST 2015 ----! */

package com.jogamp.openal;

import java.io.UnsupportedEncodingException;
import java.util.*;
import com.jogamp.openal.*;
import jogamp.openal.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

public interface ALC extends ALCConstants{

  /** CType: int */
  public static final int HAS_STDDEF = 0x1;

  /** Entry point (through function pointer) to C language function: <br> <code>ALCcontext *  alcCreateContext(ALCdevice *  device, const ALCint *  attrlist)</code><br>
      @param attrlist a direct or array-backed {@link java.nio.IntBuffer}   */
  public ALCcontext alcCreateContext(ALCdevice device, IntBuffer attrlist);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCcontext *  alcCreateContext(ALCdevice *  device, const ALCint *  attrlist)</code><br>   */
  public ALCcontext alcCreateContext(ALCdevice device, int[] attrlist, int attrlist_offset);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCboolean alcMakeContextCurrent(ALCcontext *  context)</code><br>   */
  public boolean alcMakeContextCurrent(ALCcontext context);

  /** Entry point (through function pointer) to C language function: <br> <code>void alcProcessContext(ALCcontext *  context)</code><br>   */
  public void alcProcessContext(ALCcontext context);

  /** Entry point (through function pointer) to C language function: <br> <code>void alcSuspendContext(ALCcontext *  context)</code><br>   */
  public void alcSuspendContext(ALCcontext context);

  /** Entry point (through function pointer) to C language function: <br> <code>void alcDestroyContext(ALCcontext *  context)</code><br>   */
  public void alcDestroyContext(ALCcontext context);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCcontext *  alcGetCurrentContext(void)</code><br>   */
  public ALCcontext alcGetCurrentContext();

  /** Entry point (through function pointer) to C language function: <br> <code>ALCdevice *  alcGetContextsDevice(ALCcontext *  context)</code><br>   */
  public ALCdevice alcGetContextsDevice(ALCcontext context);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCdevice *  alcOpenDevice(const ALCchar *  devicename)</code><br>   */
  public ALCdevice alcOpenDevice(String devicename);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCboolean alcCloseDevice(ALCdevice *  device)</code><br>   */
  public boolean alcCloseDevice(ALCdevice device);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCenum alcGetError(ALCdevice *  device)</code><br>   */
  public int alcGetError(ALCdevice device);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCboolean alcIsExtensionPresent(ALCdevice *  device, const ALCchar *  extname)</code><br>   */
  public boolean alcIsExtensionPresent(ALCdevice device, String extname);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCenum alcGetEnumValue(ALCdevice *  device, const ALCchar *  enumname)</code><br>   */
  public int alcGetEnumValue(ALCdevice device, String enumname);

  /** Entry point (through function pointer) to C language function: <br> <code>const ALCchar *  alcGetString(ALCdevice *  device, ALCenum param)</code><br>   */
  public String alcGetString(ALCdevice device, int param);

  /** Entry point (through function pointer) to C language function: <br> <code>void alcGetIntegerv(ALCdevice *  device, ALCenum param, ALCsizei size, ALCint *  values)</code><br>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alcGetIntegerv(ALCdevice device, int param, int size, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code>void alcGetIntegerv(ALCdevice *  device, ALCenum param, ALCsizei size, ALCint *  values)</code><br>   */
  public void alcGetIntegerv(ALCdevice device, int param, int size, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCdevice *  alcCaptureOpenDevice(const ALCchar *  devicename, ALCuint frequency, ALCenum format, ALCsizei buffersize)</code><br>   */
  public ALCdevice alcCaptureOpenDevice(String devicename, int frequency, int format, int buffersize);

  /** Entry point (through function pointer) to C language function: <br> <code>ALCboolean alcCaptureCloseDevice(ALCdevice *  device)</code><br>   */
  public boolean alcCaptureCloseDevice(ALCdevice device);

  /** Entry point (through function pointer) to C language function: <br> <code>void alcCaptureStart(ALCdevice *  device)</code><br>   */
  public void alcCaptureStart(ALCdevice device);

  /** Entry point (through function pointer) to C language function: <br> <code>void alcCaptureStop(ALCdevice *  device)</code><br>   */
  public void alcCaptureStop(ALCdevice device);

  /** Entry point (through function pointer) to C language function: <br> <code>void alcCaptureSamples(ALCdevice *  device, ALCvoid *  buffer, ALCsizei samples)</code><br>
      @param buffer a direct or array-backed {@link java.nio.Buffer}   */
  public void alcCaptureSamples(ALCdevice device, Buffer buffer, int samples);


  // --- Begin CustomJavaCode .cfg declarations
  /** Fetches the names of the available ALC device specifiers.
      Equivalent to the C call alcGetString(NULL, ALC_DEVICE_SPECIFIER). */
  public java.lang.String[] alcGetDeviceSpecifiers();
  
  /** Fetches the names of the available ALC capture device specifiers.
      Equivalent to the C call alcGetString(NULL, ALC_CAPTURE_DEVICE_SPECIFIER). */
  public java.lang.String[] alcGetCaptureDeviceSpecifiers();
  // ---- End CustomJavaCode .cfg declarations

} // end of class ALC
