/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/procaddress/ProcAddressEmitter.java on Sat Oct 10 04:58:01 CEST 2015 ----! */


package com.jogamp.opencl.llb.impl;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.opencl.llb.gl.CLGL;
import java.security.AccessController;
import java.security.PrivilegedAction;

 /**
  * Struct accessor for cl_image_format.
  * @author Michael Bien, GlueGen, et al.
  */
public class CLImageFormatImpl {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] CLImageFormatImpl_size = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };
  private static final int[] imageChannelOrder_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
//private static final int[] imageChannelOrder_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] imageChannelDataType_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */ };
//private static final int[] imageChannelDataType_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };

  public static int size() {
    return CLImageFormatImpl_size[mdIdx];
  }

  public static CLImageFormatImpl create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static CLImageFormatImpl create(java.nio.ByteBuffer buf) {
      return new CLImageFormatImpl(buf);
  }

  CLImageFormatImpl(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Setter for native field <code>imageChannelOrder</code>: CType[(IntType) typedef 'cl_channel_order', size [fixed true, lnx64 4], [const[false], int]] */
  public CLImageFormatImpl setImageChannelOrder(int val) {
    accessor.setIntAt(imageChannelOrder_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>imageChannelOrder</code>: CType[(IntType) typedef 'cl_channel_order', size [fixed true, lnx64 4], [const[false], int]] */
  public int getImageChannelOrder() {
    return accessor.getIntAt(imageChannelOrder_offset[mdIdx]);
  }

  /** Setter for native field <code>imageChannelDataType</code>: CType[(IntType) typedef 'cl_channel_type', size [fixed true, lnx64 4], [const[false], int]] */
  public CLImageFormatImpl setImageChannelDataType(int val) {
    accessor.setIntAt(imageChannelDataType_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>imageChannelDataType</code>: CType[(IntType) typedef 'cl_channel_type', size [fixed true, lnx64 4], [const[false], int]] */
  public int getImageChannelDataType() {
    return accessor.getIntAt(imageChannelDataType_offset[mdIdx]);
  }
}
