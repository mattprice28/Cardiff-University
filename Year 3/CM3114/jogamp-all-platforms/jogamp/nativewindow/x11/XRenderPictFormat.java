/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Sat Oct 10 03:10:18 CEST 2015 ----! */


package jogamp.nativewindow.x11;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.nio.*;
import java.util.*;
import com.jogamp.nativewindow.util.Point;
import com.jogamp.common.util.Bitfield;

public class XRenderPictFormat {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] XRenderPictFormat_size = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */  };
  private static final int[] id_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
//private static final int[] id_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };
  private static final int[] type_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */ };
//private static final int[] type_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] depth_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */ };
//private static final int[] depth_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] direct_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */ };
  private static final int[] direct_size = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */  };
  private static final int[] colormap_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */ };
//private static final int[] colormap_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };

  public static int size() {
    return XRenderPictFormat_size[mdIdx];
  }

  public static XRenderPictFormat create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static XRenderPictFormat create(java.nio.ByteBuffer buf) {
      return new XRenderPictFormat(buf);
  }

  XRenderPictFormat(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Setter for native field <code>id</code>: CType[(PointerType) typedef 'PictFormat' -> (struct null) * , size [fixed false, lnx64 8], [const[false], pointer*1]], with array length of <code>1</code> */
  public XRenderPictFormat setId(long val) {
    accessor.setLongAt(id_offset[mdIdx], val, md.pointerSizeInBytes());
    return this;
  }

  /** Getter for native field <code>id</code>: CType[(PointerType) typedef 'PictFormat' -> (struct null) * , size [fixed false, lnx64 8], [const[false], pointer*1]], with array length of <code>1</code> */
  public long getId() {
    return accessor.getLongAt(id_offset[mdIdx], md.pointerSizeInBytes());
  }


  /** Setter for native field <code>type</code>: CType[(IntType) 'int', size [fixed false, lnx64 4], [const[false], int]] */
  public XRenderPictFormat setType(int val) {
    accessor.setIntAt(type_offset[mdIdx], val, md.intSizeInBytes());
    return this;
  }

  /** Getter for native field <code>type</code>: CType[(IntType) 'int', size [fixed false, lnx64 4], [const[false], int]] */
  public int getType() {
    return accessor.getIntAt(type_offset[mdIdx], md.intSizeInBytes());
  }

  /** Setter for native field <code>depth</code>: CType[(IntType) 'int', size [fixed false, lnx64 4], [const[false], int]] */
  public XRenderPictFormat setDepth(int val) {
    accessor.setIntAt(depth_offset[mdIdx], val, md.intSizeInBytes());
    return this;
  }

  /** Getter for native field <code>depth</code>: CType[(IntType) 'int', size [fixed false, lnx64 4], [const[false], int]] */
  public int getDepth() {
    return accessor.getIntAt(depth_offset[mdIdx], md.intSizeInBytes());
  }

  /** Getter for native field <code>direct</code>: CType[(StructType) typedef 'XRenderDirectFormat', size [fixed false, lnx64 16], [const[false], struct{null: 8, }]] */
  public XRenderDirectFormat getDirect() {
    return XRenderDirectFormat.create( accessor.slice( direct_offset[mdIdx], direct_size[mdIdx] ) );
 }

  /** Setter for native field <code>colormap</code>: CType[(PointerType) typedef 'Colormap' -> (struct null) * , size [fixed false, lnx64 8], [const[false], pointer*1]], with array length of <code>1</code> */
  public XRenderPictFormat setColormap(long val) {
    accessor.setLongAt(colormap_offset[mdIdx], val, md.pointerSizeInBytes());
    return this;
  }

  /** Getter for native field <code>colormap</code>: CType[(PointerType) typedef 'Colormap' -> (struct null) * , size [fixed false, lnx64 8], [const[false], pointer*1]], with array length of <code>1</code> */
  public long getColormap() {
    return accessor.getLongAt(colormap_offset[mdIdx], md.pointerSizeInBytes());
  }



}
