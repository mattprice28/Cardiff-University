/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Sat Oct 10 03:10:33 CEST 2015 ----! */

package jogamp.nativewindow.windows;

import com.jogamp.nativewindow.util.Point;
import com.jogamp.nativewindow.NativeWindowException;
import jogamp.nativewindow.NWJNILibLoader;
import jogamp.nativewindow.Debug;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

public class GDI {

  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_NCRENDERING_ENABLED = 0x1;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_NCRENDERING_POLICY = 0x2;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_TRANSITIONS_FORCEDISABLED = 0x3;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_ALLOW_NCPAINT = 0x4;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_CAPTION_BUTTON_BOUNDS = 0x5;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_NONCLIENT_RTL_LAYOUT = 0x6;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_FORCE_ICONIC_REPRESENTATION = 0x7;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_FLIP3D_POLICY = 0x8;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_EXTENDED_FRAME_BOUNDS = 0x9;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_HAS_ICONIC_BITMAP = 0xa;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_DISALLOW_PEEK = 0xb;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_EXCLUDED_FROM_PEEK = 0xc;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_CLOAK = 0xd;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_CLOAKED = 0xe;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_FREEZE_REPRESENTATION = 0xf;
  /** Defined as part of enum type "DWMWINDOWATTRIBUTE" - CType: int */
  public static final int DWMWA_LAST = 0x10;
  /** Defined as part of enum type "AccentState" - CType: int */
  public static final int ACCENT_DISABLED = 0x0;
  /** Defined as part of enum type "AccentState" - CType: int */
  public static final int ACCENT_ENABLE_GRADIENT = 0x1;
  /** Defined as part of enum type "AccentState" - CType: int */
  public static final int ACCENT_ENABLE_TRANSPARENTGRADIENT = 0x2;
  /** Defined as part of enum type "AccentState" - CType: int */
  public static final int ACCENT_ENABLE_BLURBEHIND = 0x3;
  /** Defined as part of enum type "AccentState" - CType: int */
  public static final int ACCENT_INVALID_STATE = 0x4;
  /** Defined as part of enum type "DWMNCRENDERINGPOLICY" - CType: int */
  public static final int DWMNCRP_USEWINDOWSTYLE = 0x0;
  /** Defined as part of enum type "DWMNCRENDERINGPOLICY" - CType: int */
  public static final int DWMNCRP_DISABLED = 0x1;
  /** Defined as part of enum type "DWMNCRENDERINGPOLICY" - CType: int */
  public static final int DWMNCRP_ENABLED = 0x2;
  /** Defined as part of enum type "DWMNCRENDERINGPOLICY" - CType: int */
  public static final int DWMNCRP_LAST = 0x3;
  /** CType: int */
  public static final int OBJ_METADC = 0x4;
  /** CType: int */
  public static final int SW_SHOW = 0x5;
  /** CType: int */
  public static final int SW_SHOWDEFAULT = 0xa;
  /** CType: int */
  public static final int PFD_STEREO = 0x2;
  /** CType: int */
  public static final int PFD_SUPPORT_DIRECTDRAW = 0x2000;
  /** CType: int */
  public static final int DIB_PAL_COLORS = 0x1;
  /** CType: int */
  public static final int BI_RLE8 = 0x1;
  /** CType: int */
  public static final int PFD_GENERIC_ACCELERATED = 0x1000;
  /** CType: int */
  public static final int BI_RLE4 = 0x2;
  /** CType: int */
  public static final int OBJ_ENHMETAFILE = 0xd;
  /** CType: int */
  public static final int SW_FORCEMINIMIZE = 0xb;
  /** CType: int */
  public static final int ERROR_SUCCESS = 0x0;
  /** CType: int */
  public static final int ERROR_INVALID_DATA = 0xd;
  /** CType: int */
  public static final int PFD_UNDERLAY_PLANE = ( - 0x1 );
  /** CType: int */
  public static final int DWM_EC_ENABLECOMPOSITION = 0x1;
  /** CType: int */
  public static final int DWM_BB_BLURREGION = 0x2;
  /** CType: int */
  public static final int SW_NORMAL = 0x1;
  /** CType: int */
  public static final int ERROR_INVALID_WINDOW_HANDLE = 0x578;
  /** CType: int */
  public static final int DIB_RGB_COLORS = 0x0;
  /** CType: int */
  public static final int ERROR_NO_SYSTEM_RESOURCES = 0x5aa;
  /** CType: int */
  public static final int BI_BITFIELDS = 0x3;
  /** CType: int */
  public static final int PFD_MAIN_PLANE = 0x0;
  /** CType: int */
  public static final int DWM_EC_DISABLECOMPOSITION = 0x0;
  /** CType: int */
  public static final int OBJ_BRUSH = 0x2;
  /** CType: int */
  public static final int PFD_DEPTH_DONTCARE = 0x20000000;
  /** CType: int */
  public static final int PFD_SUPPORT_GDI = 0x10;
  /** CType: long */
  public static final long PFD_STEREO_DONTCARE = 0x80000000L;
  /** CType: int */
  public static final int OBJ_BITMAP = 0x7;
  /** CType: int */
  public static final int SW_SHOWMINNOACTIVE = 0x7;
  /** CType: int */
  public static final int OBJ_COLORSPACE = 0xe;
  /** CType: int */
  public static final int SW_MINIMIZE = 0x6;
  /** CType: int */
  public static final int OBJ_MEMDC = 0xa;
  /** CType: int */
  public static final int PFD_SWAP_COPY = 0x400;
  /** CType: int */
  public static final int PFD_TYPE_COLORINDEX = 0x1;
  /** CType: int */
  public static final int SW_SHOWNORMAL = 0x1;
  /** CType: int */
  public static final int PFD_NEED_SYSTEM_PALETTE = 0x100;
  /** CType: int */
  public static final int SW_MAXIMIZE = 0x3;
  /** CType: int */
  public static final int SW_RESTORE = 0x9;
  /** CType: int */
  public static final int PFD_SUPPORT_OPENGL = 0x20;
  /** CType: int */
  public static final int SW_HIDE = 0x0;
  /** CType: int */
  public static final int OBJ_FONT = 0x6;
  /** CType: int */
  public static final int PFD_SWAP_EXCHANGE = 0x200;
  /** CType: int */
  public static final int SW_SHOWNA = 0x8;
  /** CType: int */
  public static final int PFD_DRAW_TO_BITMAP = 0x8;
  /** CType: int */
  public static final int OBJ_EXTPEN = 0xb;
  /** CType: int */
  public static final int PFD_NEED_PALETTE = 0x80;
  /** CType: int */
  public static final int ERROR_PROC_NOT_FOUND = 0x7f;
  /** CType: int */
  public static final int OBJ_METAFILE = 0x9;
  /** CType: int */
  public static final int PFD_SWAP_LAYER_BUFFERS = 0x800;
  /** CType: int */
  public static final int PFD_DOUBLEBUFFER = 0x1;
  /** CType: int */
  public static final int PFD_DRAW_TO_WINDOW = 0x4;
  /** CType: int */
  public static final int SW_SHOWNOACTIVATE = 0x4;
  /** CType: int */
  public static final int OBJ_ENHMETADC = 0xc;
  /** CType: int */
  public static final int BI_RGB = 0x0;
  /** CType: int */
  public static final int DWM_BB_TRANSITIONONMAXIMIZED = 0x4;
  /** CType: int */
  public static final int SW_SHOWMINIMIZED = 0x2;
  /** CType: int */
  public static final int PFD_DOUBLEBUFFER_DONTCARE = 0x40000000;
  /** CType: int */
  public static final int OBJ_REGION = 0x8;
  /** CType: int */
  public static final int SW_MAX = 0xb;
  /** CType: int */
  public static final int OBJ_DC = 0x3;
  /** CType: int */
  public static final int PFD_OVERLAY_PLANE = 0x1;
  /** CType: int */
  public static final int PFD_GENERIC_FORMAT = 0x40;
  /** CType: int */
  public static final int OBJ_PAL = 0x5;
  /** CType: int */
  public static final int ERROR_INVALID_PIXEL_FORMAT = 0x7d0;
  /** CType: int */
  public static final int OBJ_PEN = 0x1;
  /** CType: int */
  public static final int SW_SHOWMAXIMIZED = 0x3;
  /** CType: int */
  public static final int PFD_TYPE_RGBA = 0x0;
  /** CType: int */
  public static final int DWM_BB_ENABLE = 0x1;

  /** Interface to C language function: <br> <code>DWORD GetLastError(void)</code><br>   */
  public static native int GetLastError();

  /** Interface to C language function: <br> <code>int ChoosePixelFormat(HDC, const PIXELFORMATDESCRIPTOR * )</code><br>   */
  public static int ChoosePixelFormat(long arg0, PIXELFORMATDESCRIPTOR arg1)  {

        return ChoosePixelFormat1(arg0, ((arg1 == null) ? null : arg1.getBuffer()));
  }

  /** Entry point to C language function: <code>int ChoosePixelFormat(HDC, const PIXELFORMATDESCRIPTOR * )</code><br>   */
  private static native int ChoosePixelFormat1(long arg0, ByteBuffer arg1);

  /** Interface to C language function: <br> <code>int DescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR)</code><br>   */
  public static int DescribePixelFormat(long arg0, int arg1, int arg2, PIXELFORMATDESCRIPTOR arg3)  {

        return DescribePixelFormat1(arg0, arg1, arg2, ((arg3 == null) ? null : arg3.getBuffer()));
  }

  /** Entry point to C language function: <code>int DescribePixelFormat(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR)</code><br>   */
  private static native int DescribePixelFormat1(long arg0, int arg1, int arg2, ByteBuffer arg3);

  /** Interface to C language function: <br> <code>int GetPixelFormat(HDC)</code><br>   */
  public static native int GetPixelFormat(long arg0);

  /** Interface to C language function: <br> <code>BOOL SetPixelFormat(HDC, int, const PIXELFORMATDESCRIPTOR * )</code><br>   */
  public static boolean SetPixelFormat(long arg0, int arg1, PIXELFORMATDESCRIPTOR arg2)  {

        return SetPixelFormat1(arg0, arg1, ((arg2 == null) ? null : arg2.getBuffer()));
  }

  /** Entry point to C language function: <code>BOOL SetPixelFormat(HDC, int, const PIXELFORMATDESCRIPTOR * )</code><br>   */
  private static native boolean SetPixelFormat1(long arg0, int arg1, ByteBuffer arg2);

  /** Interface to C language function: <br> <code>BOOL SwapBuffers(HDC)</code><br>   */
  public static native boolean SwapBuffers(long arg0);

  /** Interface to C language function: <br> <code>HDC CreateCompatibleDC(HDC)</code><br>   */
  public static native long CreateCompatibleDC(long arg0);

  /** Interface to C language function: <br> <code>HBITMAP CreateDIBSection(HDC, const BITMAPINFO * , UINT, void *  * , HANDLE, DWORD)</code><br>
      @param arg3 a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public static long CreateDIBSection(long arg0, BITMAPINFO arg1, int arg2, PointerBuffer arg3, long arg4, int arg5)  {

    final boolean arg3_is_direct = Buffers.isDirect(arg3);
        return CreateDIBSection1(arg0, ((arg1 == null) ? null : arg1.getBuffer()), arg2, arg3_is_direct ? ( arg3 != null ? arg3.getBuffer() : null ) : Buffers.getArray(arg3), arg3_is_direct ? Buffers.getDirectBufferByteOffset(arg3) : Buffers.getIndirectBufferByteOffset(arg3), arg3_is_direct, arg4, arg5);
  }

  /** Entry point to C language function: <code>HBITMAP CreateDIBSection(HDC, const BITMAPINFO * , UINT, void *  * , HANDLE, DWORD)</code><br>
      @param arg3 a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  private static native long CreateDIBSection1(long arg0, ByteBuffer arg1, int arg2, Object arg3, int arg3_byte_offset, boolean arg3_is_direct, long arg4, int arg5);

  /** Interface to C language function: <br> <code>BOOL DeleteDC(HDC)</code><br>   */
  public static native boolean DeleteDC(long arg0);

  /** Interface to C language function: <br> <code>BOOL DeleteObject(HGDIOBJ)</code><br>   */
  public static native boolean DeleteObject(long arg0);

  /** Interface to C language function: <br> <code>HGDIOBJ SelectObject(HDC, HGDIOBJ)</code><br>   */
  public static native long SelectObject(long arg0, long arg1);

  /** Interface to C language function: <br> <code>HINSTANCE GetApplicationHandle()</code><br>   */
  public static native long GetApplicationHandle();

  /** Interface to C language function: <br> <code>BOOL ShowWindow(HWND hWnd, int nCmdShow)</code><br>   */
  public static native boolean ShowWindow(long hWnd, int nCmdShow);

  /** Interface to C language function: <br> <code>HDC GetDC(HWND)</code><br>   */
  public static native long GetDC(long arg0);

  /** Interface to C language function: <br> <code>int ReleaseDC(HWND hWnd, HDC hDC)</code><br>   */
  public static native int ReleaseDC(long hWnd, long hDC);

  /** Interface to C language function: <br> <code>HWND WindowFromDC(HDC hDC)</code><br>   */
  public static native long WindowFromDC(long hDC);

  /** Interface to C language function: <br> <code>BOOL GetClientRect(HWND hwnd, LPRECT lpRect)</code><br>   */
  public static boolean GetClientRect(long hwnd, RECT lpRect)  {

        return GetClientRect1(hwnd, ((lpRect == null) ? null : lpRect.getBuffer()));
  }

  /** Entry point to C language function: <code>BOOL GetClientRect(HWND hwnd, LPRECT lpRect)</code><br>   */
  private static native boolean GetClientRect1(long hwnd, ByteBuffer lpRect);

  /** Interface to C language function: <br> <code>BOOL DestroyWindow(HWND hWnd)</code><br>   */
  public static native boolean DestroyWindow(long hWnd);

  /** Interface to C language function: <br> <code>DWORD GetObjectType(HGDIOBJ h)</code><br>   */
  public static native int GetObjectType(long h);

  /** Interface to C language function: <br> <code>BOOL IsWindowVisible(HWND hWnd)</code><br>   */
  public static native boolean IsWindowVisible(long hWnd);

  /** Interface to C language function: <br> <code>BOOL IsWindow(HWND hWnd)</code><br>   */
  public static native boolean IsWindow(long hWnd);

  /** Interface to C language function: <br> <code>HWND GetParent(HWND hWnd)</code><br>   */
  public static native long GetParent(long hWnd);

  /** Interface to C language function: <br> <code>HWND SetParent(HWND hWndChild, HWND hWndNewParent)</code><br>   */
  public static native long SetParent(long hWndChild, long hWndNewParent);

  /** Interface to C language function: <br> <code>HANDLE GetCurrentProcess(void)</code><br>   */
  public static native long GetCurrentProcess();

  /** Interface to C language function: <br> <code>HANDLE GetCurrentThread(void)</code><br>   */
  public static native long GetCurrentThread();

  /** Interface to C language function: <br> <code>BOOL GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask)</code><br>
      @param lpProcessAffinityMask a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param lpSystemAffinityMask a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public static boolean GetProcessAffinityMask(long hProcess, PointerBuffer lpProcessAffinityMask, PointerBuffer lpSystemAffinityMask)  {

    final boolean lpProcessAffinityMask_is_direct = Buffers.isDirect(lpProcessAffinityMask);
    final boolean lpSystemAffinityMask_is_direct = Buffers.isDirect(lpSystemAffinityMask);
        return GetProcessAffinityMask1(hProcess, lpProcessAffinityMask_is_direct ? ( lpProcessAffinityMask != null ? lpProcessAffinityMask.getBuffer() : null ) : Buffers.getArray(lpProcessAffinityMask), lpProcessAffinityMask_is_direct ? Buffers.getDirectBufferByteOffset(lpProcessAffinityMask) : Buffers.getIndirectBufferByteOffset(lpProcessAffinityMask), lpProcessAffinityMask_is_direct, lpSystemAffinityMask_is_direct ? ( lpSystemAffinityMask != null ? lpSystemAffinityMask.getBuffer() : null ) : Buffers.getArray(lpSystemAffinityMask), lpSystemAffinityMask_is_direct ? Buffers.getDirectBufferByteOffset(lpSystemAffinityMask) : Buffers.getIndirectBufferByteOffset(lpSystemAffinityMask), lpSystemAffinityMask_is_direct);
  }

  /** Entry point to C language function: <code>BOOL GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask)</code><br>
      @param lpProcessAffinityMask a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param lpSystemAffinityMask a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  private static native boolean GetProcessAffinityMask1(long hProcess, Object lpProcessAffinityMask, int lpProcessAffinityMask_byte_offset, boolean lpProcessAffinityMask_is_direct, Object lpSystemAffinityMask, int lpSystemAffinityMask_byte_offset, boolean lpSystemAffinityMask_is_direct);

  /** Interface to C language function: <br> <code>BOOL SetProcessAffinityMask(HANDLE hProcess, DWORD_PTR dwProcessAffinityMask)</code><br>   */
  public static native boolean SetProcessAffinityMask(long hProcess, long dwProcessAffinityMask);

  /** Interface to C language function: <br> <code>DWORD_PTR SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask)</code><br>   */
  public static native long SetThreadAffinityMask(long hThread, long dwThreadAffinityMask);

  /** Interface to C language function: <br> <code>BOOL GetDeviceGammaRamp(HDC, LPVOID)</code><br>
      @param arg1 a direct or array-backed {@link java.nio.Buffer}   */
  public static boolean GetDeviceGammaRamp(long arg0, Buffer arg1)  {

    final boolean arg1_is_direct = Buffers.isDirect(arg1);
        return GetDeviceGammaRamp1(arg0, arg1_is_direct ? arg1 : Buffers.getArray(arg1), arg1_is_direct ? Buffers.getDirectBufferByteOffset(arg1) : Buffers.getIndirectBufferByteOffset(arg1), arg1_is_direct);
  }

  /** Entry point to C language function: <code>BOOL GetDeviceGammaRamp(HDC, LPVOID)</code><br>
      @param arg1 a direct or array-backed {@link java.nio.Buffer}   */
  private static native boolean GetDeviceGammaRamp1(long arg0, Object arg1, int arg1_byte_offset, boolean arg1_is_direct);

  /** Interface to C language function: <br> <code>BOOL SetDeviceGammaRamp(HDC, LPVOID)</code><br>
      @param arg1 a direct or array-backed {@link java.nio.Buffer}   */
  public static boolean SetDeviceGammaRamp(long arg0, Buffer arg1)  {

    final boolean arg1_is_direct = Buffers.isDirect(arg1);
        return SetDeviceGammaRamp1(arg0, arg1_is_direct ? arg1 : Buffers.getArray(arg1), arg1_is_direct ? Buffers.getDirectBufferByteOffset(arg1) : Buffers.getIndirectBufferByteOffset(arg1), arg1_is_direct);
  }

  /** Entry point to C language function: <code>BOOL SetDeviceGammaRamp(HDC, LPVOID)</code><br>
      @param arg1 a direct or array-backed {@link java.nio.Buffer}   */
  private static native boolean SetDeviceGammaRamp1(long arg0, Object arg1, int arg1_byte_offset, boolean arg1_is_direct);

  /** Interface to C language function: <br> <code>BOOL DwmIsExtensionAvailable()</code><br>   */
  public static native boolean DwmIsExtensionAvailable();

  /** Interface to C language function: <br> <code>BOOL DwmIsCompositionEnabled()</code><br>   */
  public static native boolean DwmIsCompositionEnabled();

  /** Interface to C language function: <br> <code>BOOL DwmEnableComposition(UINT uCompositionAction)</code><br>   */
  public static native boolean DwmEnableComposition(int uCompositionAction);

  /** Interface to C language function: <br> <code>BOOL DwmEnableBlurBehindWindow(HWND, const DWM_BLURBEHIND * )</code><br>   */
  public static boolean DwmEnableBlurBehindWindow(long arg0, DWM_BLURBEHIND arg1)  {

        return DwmEnableBlurBehindWindow0(arg0, ((arg1 == null) ? null : arg1.getBuffer()));
  }

  /** Entry point to C language function: <code>BOOL DwmEnableBlurBehindWindow(HWND, const DWM_BLURBEHIND * )</code><br>   */
  private static native boolean DwmEnableBlurBehindWindow0(long arg0, ByteBuffer arg1);

  /** Interface to C language function: <br> <code>BOOL DwmExtendFrameIntoClientArea(HWND, const MARGINS * )</code><br>   */
  public static boolean DwmExtendFrameIntoClientArea(long arg0, MARGINS arg1)  {

        return DwmExtendFrameIntoClientArea0(arg0, ((arg1 == null) ? null : arg1.getBuffer()));
  }

  /** Entry point to C language function: <code>BOOL DwmExtendFrameIntoClientArea(HWND, const MARGINS * )</code><br>   */
  private static native boolean DwmExtendFrameIntoClientArea0(long arg0, ByteBuffer arg1);

  /** Interface to C language function: <br> <code>HRESULT DwmGetWindowAttribute(HWND hwnd, DWORD dwAttribute, PVOID pvAttribute, DWORD cbAttribute)</code><br>
      @param pvAttribute a direct only {@link java.nio.Buffer}   */
  public static int DwmGetWindowAttribute(long hwnd, int dwAttribute, Buffer pvAttribute, int cbAttribute)  {

    if (!Buffers.isDirect(pvAttribute))
      throw new RuntimeException("Argument \"pvAttribute\" is not a direct buffer");
        return DwmGetWindowAttribute0(hwnd, dwAttribute, pvAttribute, Buffers.getDirectBufferByteOffset(pvAttribute), cbAttribute);
  }

  /** Entry point to C language function: <code>HRESULT DwmGetWindowAttribute(HWND hwnd, DWORD dwAttribute, PVOID pvAttribute, DWORD cbAttribute)</code><br>
      @param pvAttribute a direct only {@link java.nio.Buffer}   */
  private static native int DwmGetWindowAttribute0(long hwnd, int dwAttribute, Object pvAttribute, int pvAttribute_byte_offset, int cbAttribute);

  /** Interface to C language function: <br> <code>HRESULT DwmSetWindowAttribute(HWND hwnd, DWORD dwAttribute, LPCVOID pvAttribute, DWORD cbAttribute)</code><br>
      @param pvAttribute a direct only {@link java.nio.Buffer}   */
  public static int DwmSetWindowAttribute(long hwnd, int dwAttribute, Buffer pvAttribute, int cbAttribute)  {

    if (!Buffers.isDirect(pvAttribute))
      throw new RuntimeException("Argument \"pvAttribute\" is not a direct buffer");
        return DwmSetWindowAttribute0(hwnd, dwAttribute, pvAttribute, Buffers.getDirectBufferByteOffset(pvAttribute), cbAttribute);
  }

  /** Entry point to C language function: <code>HRESULT DwmSetWindowAttribute(HWND hwnd, DWORD dwAttribute, LPCVOID pvAttribute, DWORD cbAttribute)</code><br>
      @param pvAttribute a direct only {@link java.nio.Buffer}   */
  private static native int DwmSetWindowAttribute0(long hwnd, int dwAttribute, Object pvAttribute, int pvAttribute_byte_offset, int cbAttribute);

  /** Interface to C language function: <br> <code>BOOL IsWindowCompositionExtensionAvailable()</code><br>   */
  public static native boolean IsWindowCompositionExtensionAvailable();

  /** Interface to C language function: <br> <code>BOOL GetWindowCompositionAccentPolicy(HWND hwnd, AccentPolicy *  pAccentPolicy)</code><br>   */
  public static boolean GetWindowCompositionAccentPolicy(long hwnd, AccentPolicy pAccentPolicy)  {

        return GetWindowCompositionAccentPolicy0(hwnd, ((pAccentPolicy == null) ? null : pAccentPolicy.getBuffer()));
  }

  /** Entry point to C language function: <code>BOOL GetWindowCompositionAccentPolicy(HWND hwnd, AccentPolicy *  pAccentPolicy)</code><br>   */
  private static native boolean GetWindowCompositionAccentPolicy0(long hwnd, ByteBuffer pAccentPolicy);

  /** Interface to C language function: <br> <code>BOOL SetWindowCompositionAccentPolicy(HWND hwnd, const AccentPolicy *  pAccentPolicy)</code><br>   */
  public static boolean SetWindowCompositionAccentPolicy(long hwnd, AccentPolicy pAccentPolicy)  {

        return SetWindowCompositionAccentPolicy0(hwnd, ((pAccentPolicy == null) ? null : pAccentPolicy.getBuffer()));
  }

  /** Entry point to C language function: <code>BOOL SetWindowCompositionAccentPolicy(HWND hwnd, const AccentPolicy *  pAccentPolicy)</code><br>   */
  private static native boolean SetWindowCompositionAccentPolicy0(long hwnd, ByteBuffer pAccentPolicy);


} // end of class GDI
