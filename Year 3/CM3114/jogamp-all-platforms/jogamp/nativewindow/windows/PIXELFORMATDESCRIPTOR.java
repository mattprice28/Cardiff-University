/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Sat Oct 10 03:10:34 CEST 2015 ----! */


package jogamp.nativewindow.windows;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.nativewindow.util.Point;
import com.jogamp.nativewindow.NativeWindowException;
import jogamp.nativewindow.NWJNILibLoader;
import jogamp.nativewindow.Debug;

public class PIXELFORMATDESCRIPTOR {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] PIXELFORMATDESCRIPTOR_size = new int[] { 40 /* ARM_MIPS_32 */, 40 /* X86_32_UNIX */, 40 /* X86_32_MACOS */, 40 /* PPC_32_UNIX */, 40 /* SPARC_32_SUNOS */, 40 /* X86_32_WINDOWS */, 40 /* LP64_UNIX */, 40 /* X86_64_WINDOWS */  };
  private static final int[] nSize_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
//private static final int[] nSize_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */  };
  private static final int[] nVersion_offset = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */ };
//private static final int[] nVersion_size = new int[] { 2 /* ARM_MIPS_32 */, 2 /* X86_32_UNIX */, 2 /* X86_32_MACOS */, 2 /* PPC_32_UNIX */, 2 /* SPARC_32_SUNOS */, 2 /* X86_32_WINDOWS */, 2 /* LP64_UNIX */, 2 /* X86_64_WINDOWS */  };
  private static final int[] dwFlags_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */ };
//private static final int[] dwFlags_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] iPixelType_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */ };
//private static final int[] iPixelType_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cColorBits_offset = new int[] { 9 /* ARM_MIPS_32 */, 9 /* X86_32_UNIX */, 9 /* X86_32_MACOS */, 9 /* PPC_32_UNIX */, 9 /* SPARC_32_SUNOS */, 9 /* X86_32_WINDOWS */, 9 /* LP64_UNIX */, 9 /* X86_64_WINDOWS */ };
//private static final int[] cColorBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cRedBits_offset = new int[] { 10 /* ARM_MIPS_32 */, 10 /* X86_32_UNIX */, 10 /* X86_32_MACOS */, 10 /* PPC_32_UNIX */, 10 /* SPARC_32_SUNOS */, 10 /* X86_32_WINDOWS */, 10 /* LP64_UNIX */, 10 /* X86_64_WINDOWS */ };
//private static final int[] cRedBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cRedShift_offset = new int[] { 11 /* ARM_MIPS_32 */, 11 /* X86_32_UNIX */, 11 /* X86_32_MACOS */, 11 /* PPC_32_UNIX */, 11 /* SPARC_32_SUNOS */, 11 /* X86_32_WINDOWS */, 11 /* LP64_UNIX */, 11 /* X86_64_WINDOWS */ };
//private static final int[] cRedShift_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cGreenBits_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 12 /* LP64_UNIX */, 12 /* X86_64_WINDOWS */ };
//private static final int[] cGreenBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cGreenShift_offset = new int[] { 13 /* ARM_MIPS_32 */, 13 /* X86_32_UNIX */, 13 /* X86_32_MACOS */, 13 /* PPC_32_UNIX */, 13 /* SPARC_32_SUNOS */, 13 /* X86_32_WINDOWS */, 13 /* LP64_UNIX */, 13 /* X86_64_WINDOWS */ };
//private static final int[] cGreenShift_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cBlueBits_offset = new int[] { 14 /* ARM_MIPS_32 */, 14 /* X86_32_UNIX */, 14 /* X86_32_MACOS */, 14 /* PPC_32_UNIX */, 14 /* SPARC_32_SUNOS */, 14 /* X86_32_WINDOWS */, 14 /* LP64_UNIX */, 14 /* X86_64_WINDOWS */ };
//private static final int[] cBlueBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cBlueShift_offset = new int[] { 15 /* ARM_MIPS_32 */, 15 /* X86_32_UNIX */, 15 /* X86_32_MACOS */, 15 /* PPC_32_UNIX */, 15 /* SPARC_32_SUNOS */, 15 /* X86_32_WINDOWS */, 15 /* LP64_UNIX */, 15 /* X86_64_WINDOWS */ };
//private static final int[] cBlueShift_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cAlphaBits_offset = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */ };
//private static final int[] cAlphaBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cAlphaShift_offset = new int[] { 17 /* ARM_MIPS_32 */, 17 /* X86_32_UNIX */, 17 /* X86_32_MACOS */, 17 /* PPC_32_UNIX */, 17 /* SPARC_32_SUNOS */, 17 /* X86_32_WINDOWS */, 17 /* LP64_UNIX */, 17 /* X86_64_WINDOWS */ };
//private static final int[] cAlphaShift_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cAccumBits_offset = new int[] { 18 /* ARM_MIPS_32 */, 18 /* X86_32_UNIX */, 18 /* X86_32_MACOS */, 18 /* PPC_32_UNIX */, 18 /* SPARC_32_SUNOS */, 18 /* X86_32_WINDOWS */, 18 /* LP64_UNIX */, 18 /* X86_64_WINDOWS */ };
//private static final int[] cAccumBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cAccumRedBits_offset = new int[] { 19 /* ARM_MIPS_32 */, 19 /* X86_32_UNIX */, 19 /* X86_32_MACOS */, 19 /* PPC_32_UNIX */, 19 /* SPARC_32_SUNOS */, 19 /* X86_32_WINDOWS */, 19 /* LP64_UNIX */, 19 /* X86_64_WINDOWS */ };
//private static final int[] cAccumRedBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cAccumGreenBits_offset = new int[] { 20 /* ARM_MIPS_32 */, 20 /* X86_32_UNIX */, 20 /* X86_32_MACOS */, 20 /* PPC_32_UNIX */, 20 /* SPARC_32_SUNOS */, 20 /* X86_32_WINDOWS */, 20 /* LP64_UNIX */, 20 /* X86_64_WINDOWS */ };
//private static final int[] cAccumGreenBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cAccumBlueBits_offset = new int[] { 21 /* ARM_MIPS_32 */, 21 /* X86_32_UNIX */, 21 /* X86_32_MACOS */, 21 /* PPC_32_UNIX */, 21 /* SPARC_32_SUNOS */, 21 /* X86_32_WINDOWS */, 21 /* LP64_UNIX */, 21 /* X86_64_WINDOWS */ };
//private static final int[] cAccumBlueBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cAccumAlphaBits_offset = new int[] { 22 /* ARM_MIPS_32 */, 22 /* X86_32_UNIX */, 22 /* X86_32_MACOS */, 22 /* PPC_32_UNIX */, 22 /* SPARC_32_SUNOS */, 22 /* X86_32_WINDOWS */, 22 /* LP64_UNIX */, 22 /* X86_64_WINDOWS */ };
//private static final int[] cAccumAlphaBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cDepthBits_offset = new int[] { 23 /* ARM_MIPS_32 */, 23 /* X86_32_UNIX */, 23 /* X86_32_MACOS */, 23 /* PPC_32_UNIX */, 23 /* SPARC_32_SUNOS */, 23 /* X86_32_WINDOWS */, 23 /* LP64_UNIX */, 23 /* X86_64_WINDOWS */ };
//private static final int[] cDepthBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cStencilBits_offset = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */ };
//private static final int[] cStencilBits_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] cAuxBuffers_offset = new int[] { 25 /* ARM_MIPS_32 */, 25 /* X86_32_UNIX */, 25 /* X86_32_MACOS */, 25 /* PPC_32_UNIX */, 25 /* SPARC_32_SUNOS */, 25 /* X86_32_WINDOWS */, 25 /* LP64_UNIX */, 25 /* X86_64_WINDOWS */ };
//private static final int[] cAuxBuffers_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] iLayerType_offset = new int[] { 26 /* ARM_MIPS_32 */, 26 /* X86_32_UNIX */, 26 /* X86_32_MACOS */, 26 /* PPC_32_UNIX */, 26 /* SPARC_32_SUNOS */, 26 /* X86_32_WINDOWS */, 26 /* LP64_UNIX */, 26 /* X86_64_WINDOWS */ };
//private static final int[] iLayerType_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] bReserved_offset = new int[] { 27 /* ARM_MIPS_32 */, 27 /* X86_32_UNIX */, 27 /* X86_32_MACOS */, 27 /* PPC_32_UNIX */, 27 /* SPARC_32_SUNOS */, 27 /* X86_32_WINDOWS */, 27 /* LP64_UNIX */, 27 /* X86_64_WINDOWS */ };
//private static final int[] bReserved_size = new int[] { 1 /* ARM_MIPS_32 */, 1 /* X86_32_UNIX */, 1 /* X86_32_MACOS */, 1 /* PPC_32_UNIX */, 1 /* SPARC_32_SUNOS */, 1 /* X86_32_WINDOWS */, 1 /* LP64_UNIX */, 1 /* X86_64_WINDOWS */  };
  private static final int[] dwLayerMask_offset = new int[] { 28 /* ARM_MIPS_32 */, 28 /* X86_32_UNIX */, 28 /* X86_32_MACOS */, 28 /* PPC_32_UNIX */, 28 /* SPARC_32_SUNOS */, 28 /* X86_32_WINDOWS */, 28 /* LP64_UNIX */, 28 /* X86_64_WINDOWS */ };
//private static final int[] dwLayerMask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] dwVisibleMask_offset = new int[] { 32 /* ARM_MIPS_32 */, 32 /* X86_32_UNIX */, 32 /* X86_32_MACOS */, 32 /* PPC_32_UNIX */, 32 /* SPARC_32_SUNOS */, 32 /* X86_32_WINDOWS */, 32 /* LP64_UNIX */, 32 /* X86_64_WINDOWS */ };
//private static final int[] dwVisibleMask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] dwDamageMask_offset = new int[] { 36 /* ARM_MIPS_32 */, 36 /* X86_32_UNIX */, 36 /* X86_32_MACOS */, 36 /* PPC_32_UNIX */, 36 /* SPARC_32_SUNOS */, 36 /* X86_32_WINDOWS */, 36 /* LP64_UNIX */, 36 /* X86_64_WINDOWS */ };
//private static final int[] dwDamageMask_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };

  public static int size() {
    return PIXELFORMATDESCRIPTOR_size[mdIdx];
  }

  public static PIXELFORMATDESCRIPTOR create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static PIXELFORMATDESCRIPTOR create(java.nio.ByteBuffer buf) {
      return new PIXELFORMATDESCRIPTOR(buf);
  }

  PIXELFORMATDESCRIPTOR(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Setter for native field <code>nSize</code>: CType[(IntType) typedef 'WORD', size [fixed true, lnx64 2], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setNSize(short val) {
    accessor.setShortAt(nSize_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>nSize</code>: CType[(IntType) typedef 'WORD', size [fixed true, lnx64 2], [const[false], int]] */
  public short getNSize() {
    return accessor.getShortAt(nSize_offset[mdIdx]);
  }

  /** Setter for native field <code>nVersion</code>: CType[(IntType) typedef 'WORD', size [fixed true, lnx64 2], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setNVersion(short val) {
    accessor.setShortAt(nVersion_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>nVersion</code>: CType[(IntType) typedef 'WORD', size [fixed true, lnx64 2], [const[false], int]] */
  public short getNVersion() {
    return accessor.getShortAt(nVersion_offset[mdIdx]);
  }

  /** Setter for native field <code>dwFlags</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setDwFlags(int val) {
    accessor.setIntAt(dwFlags_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>dwFlags</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public int getDwFlags() {
    return accessor.getIntAt(dwFlags_offset[mdIdx]);
  }

  /** Setter for native field <code>iPixelType</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setIPixelType(byte val) {
    accessor.setByteAt(iPixelType_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>iPixelType</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getIPixelType() {
    return accessor.getByteAt(iPixelType_offset[mdIdx]);
  }

  /** Setter for native field <code>cColorBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCColorBits(byte val) {
    accessor.setByteAt(cColorBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cColorBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCColorBits() {
    return accessor.getByteAt(cColorBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cRedBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCRedBits(byte val) {
    accessor.setByteAt(cRedBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cRedBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCRedBits() {
    return accessor.getByteAt(cRedBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cRedShift</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCRedShift(byte val) {
    accessor.setByteAt(cRedShift_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cRedShift</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCRedShift() {
    return accessor.getByteAt(cRedShift_offset[mdIdx]);
  }

  /** Setter for native field <code>cGreenBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCGreenBits(byte val) {
    accessor.setByteAt(cGreenBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cGreenBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCGreenBits() {
    return accessor.getByteAt(cGreenBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cGreenShift</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCGreenShift(byte val) {
    accessor.setByteAt(cGreenShift_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cGreenShift</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCGreenShift() {
    return accessor.getByteAt(cGreenShift_offset[mdIdx]);
  }

  /** Setter for native field <code>cBlueBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCBlueBits(byte val) {
    accessor.setByteAt(cBlueBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cBlueBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCBlueBits() {
    return accessor.getByteAt(cBlueBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cBlueShift</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCBlueShift(byte val) {
    accessor.setByteAt(cBlueShift_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cBlueShift</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCBlueShift() {
    return accessor.getByteAt(cBlueShift_offset[mdIdx]);
  }

  /** Setter for native field <code>cAlphaBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCAlphaBits(byte val) {
    accessor.setByteAt(cAlphaBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cAlphaBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCAlphaBits() {
    return accessor.getByteAt(cAlphaBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cAlphaShift</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCAlphaShift(byte val) {
    accessor.setByteAt(cAlphaShift_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cAlphaShift</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCAlphaShift() {
    return accessor.getByteAt(cAlphaShift_offset[mdIdx]);
  }

  /** Setter for native field <code>cAccumBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCAccumBits(byte val) {
    accessor.setByteAt(cAccumBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cAccumBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCAccumBits() {
    return accessor.getByteAt(cAccumBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cAccumRedBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCAccumRedBits(byte val) {
    accessor.setByteAt(cAccumRedBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cAccumRedBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCAccumRedBits() {
    return accessor.getByteAt(cAccumRedBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cAccumGreenBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCAccumGreenBits(byte val) {
    accessor.setByteAt(cAccumGreenBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cAccumGreenBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCAccumGreenBits() {
    return accessor.getByteAt(cAccumGreenBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cAccumBlueBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCAccumBlueBits(byte val) {
    accessor.setByteAt(cAccumBlueBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cAccumBlueBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCAccumBlueBits() {
    return accessor.getByteAt(cAccumBlueBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cAccumAlphaBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCAccumAlphaBits(byte val) {
    accessor.setByteAt(cAccumAlphaBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cAccumAlphaBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCAccumAlphaBits() {
    return accessor.getByteAt(cAccumAlphaBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cDepthBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCDepthBits(byte val) {
    accessor.setByteAt(cDepthBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cDepthBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCDepthBits() {
    return accessor.getByteAt(cDepthBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cStencilBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCStencilBits(byte val) {
    accessor.setByteAt(cStencilBits_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cStencilBits</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCStencilBits() {
    return accessor.getByteAt(cStencilBits_offset[mdIdx]);
  }

  /** Setter for native field <code>cAuxBuffers</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setCAuxBuffers(byte val) {
    accessor.setByteAt(cAuxBuffers_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>cAuxBuffers</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getCAuxBuffers() {
    return accessor.getByteAt(cAuxBuffers_offset[mdIdx]);
  }

  /** Setter for native field <code>iLayerType</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setILayerType(byte val) {
    accessor.setByteAt(iLayerType_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>iLayerType</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getILayerType() {
    return accessor.getByteAt(iLayerType_offset[mdIdx]);
  }

  /** Setter for native field <code>bReserved</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setBReserved(byte val) {
    accessor.setByteAt(bReserved_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>bReserved</code>: CType[(IntType) typedef 'BYTE', size [fixed true, lnx64 1], [const[false], int]] */
  public byte getBReserved() {
    return accessor.getByteAt(bReserved_offset[mdIdx]);
  }

  /** Setter for native field <code>dwLayerMask</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setDwLayerMask(int val) {
    accessor.setIntAt(dwLayerMask_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>dwLayerMask</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public int getDwLayerMask() {
    return accessor.getIntAt(dwLayerMask_offset[mdIdx]);
  }

  /** Setter for native field <code>dwVisibleMask</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setDwVisibleMask(int val) {
    accessor.setIntAt(dwVisibleMask_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>dwVisibleMask</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public int getDwVisibleMask() {
    return accessor.getIntAt(dwVisibleMask_offset[mdIdx]);
  }

  /** Setter for native field <code>dwDamageMask</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public PIXELFORMATDESCRIPTOR setDwDamageMask(int val) {
    accessor.setIntAt(dwDamageMask_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>dwDamageMask</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public int getDwDamageMask() {
    return accessor.getIntAt(dwDamageMask_offset[mdIdx]);
  }
}
