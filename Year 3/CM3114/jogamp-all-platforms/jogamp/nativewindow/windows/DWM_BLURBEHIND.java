/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Sat Oct 10 03:10:34 CEST 2015 ----! */


package jogamp.nativewindow.windows;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import com.jogamp.nativewindow.util.Point;
import com.jogamp.nativewindow.NativeWindowException;
import jogamp.nativewindow.NWJNILibLoader;
import jogamp.nativewindow.Debug;

public class DWM_BLURBEHIND {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] DWM_BLURBEHIND_size = new int[] { 16 /* ARM_MIPS_32 */, 16 /* X86_32_UNIX */, 16 /* X86_32_MACOS */, 16 /* PPC_32_UNIX */, 16 /* SPARC_32_SUNOS */, 16 /* X86_32_WINDOWS */, 24 /* LP64_UNIX */, 24 /* X86_64_WINDOWS */  };
  private static final int[] dwFlags_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
//private static final int[] dwFlags_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] fEnable_offset = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */ };
//private static final int[] fEnable_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };
  private static final int[] hRgnBlur_offset = new int[] { 8 /* ARM_MIPS_32 */, 8 /* X86_32_UNIX */, 8 /* X86_32_MACOS */, 8 /* PPC_32_UNIX */, 8 /* SPARC_32_SUNOS */, 8 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */ };
//private static final int[] hRgnBlur_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };
  private static final int[] fTransitionOnMaximized_offset = new int[] { 12 /* ARM_MIPS_32 */, 12 /* X86_32_UNIX */, 12 /* X86_32_MACOS */, 12 /* PPC_32_UNIX */, 12 /* SPARC_32_SUNOS */, 12 /* X86_32_WINDOWS */, 16 /* LP64_UNIX */, 16 /* X86_64_WINDOWS */ };
//private static final int[] fTransitionOnMaximized_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 4 /* LP64_UNIX */, 4 /* X86_64_WINDOWS */  };

  public static int size() {
    return DWM_BLURBEHIND_size[mdIdx];
  }

  public static DWM_BLURBEHIND create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static DWM_BLURBEHIND create(java.nio.ByteBuffer buf) {
      return new DWM_BLURBEHIND(buf);
  }

  DWM_BLURBEHIND(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  /** Setter for native field <code>dwFlags</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public DWM_BLURBEHIND setDwFlags(int val) {
    accessor.setIntAt(dwFlags_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>dwFlags</code>: CType[(IntType) typedef 'DWORD', size [fixed true, lnx64 4], [const[false], int]] */
  public int getDwFlags() {
    return accessor.getIntAt(dwFlags_offset[mdIdx]);
  }

  /** Setter for native field <code>fEnable</code>: CType[(IntType) typedef 'int32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public DWM_BLURBEHIND setFEnable(int val) {
    accessor.setIntAt(fEnable_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>fEnable</code>: CType[(IntType) typedef 'int32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public int getFEnable() {
    return accessor.getIntAt(fEnable_offset[mdIdx]);
  }

  /** Setter for native field <code>hRgnBlur</code>: CType[(PointerType) typedef 'HRGN' -> (struct _handle) * , size [fixed false, lnx64 8], [const[false], pointer*1]], with array length of <code>1</code> */
  public DWM_BLURBEHIND setHRgnBlur(long val) {
    accessor.setLongAt(hRgnBlur_offset[mdIdx], val, md.pointerSizeInBytes());
    return this;
  }

  /** Getter for native field <code>hRgnBlur</code>: CType[(PointerType) typedef 'HRGN' -> (struct _handle) * , size [fixed false, lnx64 8], [const[false], pointer*1]], with array length of <code>1</code> */
  public long getHRgnBlur() {
    return accessor.getLongAt(hRgnBlur_offset[mdIdx], md.pointerSizeInBytes());
  }


  /** Setter for native field <code>fTransitionOnMaximized</code>: CType[(IntType) typedef 'int32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public DWM_BLURBEHIND setFTransitionOnMaximized(int val) {
    accessor.setIntAt(fTransitionOnMaximized_offset[mdIdx], val);
    return this;
  }

  /** Getter for native field <code>fTransitionOnMaximized</code>: CType[(IntType) typedef 'int32_t', size [fixed true, lnx64 4], [const[false], int]] */
  public int getFTransitionOnMaximized() {
    return accessor.getIntAt(fTransitionOnMaximized_offset[mdIdx]);
  }


}
