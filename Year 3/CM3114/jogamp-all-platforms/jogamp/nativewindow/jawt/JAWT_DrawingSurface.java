/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Sat Oct 10 03:10:51 CEST 2015 ----! */


package jogamp.nativewindow.jawt;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDataInfoRuntime;

import java.security.*;
import jogamp.nativewindow.jawt.*;
import com.jogamp.common.os.Platform;
import com.jogamp.common.util.VersionNumber;

public class JAWT_DrawingSurface {

  StructAccessor accessor;

  private static final int mdIdx = MachineDataInfoRuntime.getStatic().ordinal();
  private final MachineDataInfo md;

  private static final int[] JAWT_DrawingSurface_size = new int[] { 24 /* ARM_MIPS_32 */, 24 /* X86_32_UNIX */, 24 /* X86_32_MACOS */, 24 /* PPC_32_UNIX */, 24 /* SPARC_32_SUNOS */, 24 /* X86_32_WINDOWS */, 48 /* LP64_UNIX */, 48 /* X86_64_WINDOWS */  };
  private static final int[] env_offset = new int[] { 0 /* ARM_MIPS_32 */, 0 /* X86_32_UNIX */, 0 /* X86_32_MACOS */, 0 /* PPC_32_UNIX */, 0 /* SPARC_32_SUNOS */, 0 /* X86_32_WINDOWS */, 0 /* LP64_UNIX */, 0 /* X86_64_WINDOWS */ };
//private static final int[] env_size = new int[] { 4 /* ARM_MIPS_32 */, 4 /* X86_32_UNIX */, 4 /* X86_32_MACOS */, 4 /* PPC_32_UNIX */, 4 /* SPARC_32_SUNOS */, 4 /* X86_32_WINDOWS */, 8 /* LP64_UNIX */, 8 /* X86_64_WINDOWS */  };// JType[JNIEnv / 'JNIEnv', is[], descriptor 'LJNIEnv;']

  public static int size() {
    return JAWT_DrawingSurface_size[mdIdx];
  }

  public static JAWT_DrawingSurface create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static JAWT_DrawingSurface create(java.nio.ByteBuffer buf) {
      return new JAWT_DrawingSurface(buf);
  }

  JAWT_DrawingSurface(java.nio.ByteBuffer buf) {
    md = MachineDataInfo.StaticConfig.values()[mdIdx].md;
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  // SKIP primitive w/ platform dependent sized type in struct: JAWT_DrawingSurface.env: CType[(PointerType) 'JNIEnv *' -> (JNIEnv) * , size [fixed false, lnx64 8], [const[false], pointer*1]]

  /** Interface to C language function: <br> <code>jint Lock(JAWT_DrawingSurface *  ds)</code><br>   */
  public int Lock()  {

        return Lock0(getBuffer());
  }
  /** Entry point to C language function: <code>jint Lock(JAWT_DrawingSurface *  ds)</code><br>   */
  private native int Lock0(ByteBuffer jthis0);

  /** Interface to C language function: <br> <code>JAWT_DrawingSurfaceInfo *  GetDrawingSurfaceInfo(JAWT_DrawingSurface *  ds)</code><br>   */
  public JAWT_DrawingSurfaceInfo GetDrawingSurfaceInfo()  {

    final ByteBuffer _res;
    _res = GetDrawingSurfaceInfo0(getBuffer());
    if (_res == null) return null;
    return JAWT_DrawingSurfaceInfo.create(Buffers.nativeOrder(_res));
  }
  /** Entry point to C language function: <code>JAWT_DrawingSurfaceInfo *  GetDrawingSurfaceInfo(JAWT_DrawingSurface *  ds)</code><br>   */
  private native ByteBuffer GetDrawingSurfaceInfo0(ByteBuffer jthis0);

  /** Interface to C language function: <br> <code>void FreeDrawingSurfaceInfo(JAWT_DrawingSurfaceInfo *  dsi)</code><br>   */
  public void FreeDrawingSurfaceInfo(JAWT_DrawingSurfaceInfo dsi)  {

        FreeDrawingSurfaceInfo0(getBuffer(), ((dsi == null) ? null : dsi.getBuffer()));
  }
  /** Entry point to C language function: <code>void FreeDrawingSurfaceInfo(JAWT_DrawingSurfaceInfo *  dsi)</code><br>   */
  private native void FreeDrawingSurfaceInfo0(ByteBuffer jthis0, ByteBuffer dsi);

  /** Interface to C language function: <br> <code>void Unlock(JAWT_DrawingSurface *  ds)</code><br>   */
  public void Unlock()  {

        Unlock0(getBuffer());
  }
  /** Entry point to C language function: <code>void Unlock(JAWT_DrawingSurface *  ds)</code><br>   */
  private native void Unlock0(ByteBuffer jthis0);


}
