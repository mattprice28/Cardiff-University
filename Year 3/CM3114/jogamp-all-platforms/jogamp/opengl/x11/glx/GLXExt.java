/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Sat Oct 10 03:19:57 CEST 2015 ----! */

package jogamp.opengl.x11.glx;

import java.util.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.fixedfunc.*;
import jogamp.opengl.*;
import jogamp.nativewindow.x11.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

public interface GLXExt {

  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_BIND_TO_TEXTURE_TARGETS_EXT = 0x20d3;
  /** <code>GLX_SGIX_video_resize</code> - CType: int */
  public static final int GLX_SYNC_FRAME_SGIX = 0x0;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_BACK_LEFT_EXT = 0x20e0;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_CLOCK_AMD = 0x21a4;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_RGBA_TYPE_SGIX = 0x8014;
  /** <code>GLX_NV_present_video</code> - CType: int */
  public static final int GLX_NUM_VIDEO_SLOTS_NV = 0x20f0;
  /** <code>GLX_NV_multisample_coverage</code> - CType: int */
  public static final int GLX_COLOR_SAMPLES_NV = 0x20b3;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_NUM_SPI_AMD = 0x21a8;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_FIELD_2_NV = 0x20ca;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = 0x20cb;
  /** <code>GLX_NV_multisample_coverage</code> - CType: int */
  public static final int GLX_COVERAGE_SAMPLES_NV = 0x186a1;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_MIPMAP_TEXTURE_EXT = 0x20d7;
  /** <code>GLX_SGIS_blended_overlay</code> - CType: int */
  public static final int GLX_BLENDED_RGBA_SGIS = 0x8025;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_WIDTH_SGIX = 0x801d;
  /** <code>GLX_SGIS_multisample</code> - CType: int */
  public static final int GLX_SAMPLES_SGIS = 0x186a1;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_LARGEST_PBUFFER_SGIX = 0x801c;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_AUX_BUFFERS_BIT_SGIX = 0x10;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX7_EXT = 0x20e9;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_ALPHA_NV = 0x20c4;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_2D_EXT = 0x20dc;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_HEIGHT_SGIX = 0x801e;
  /** <code>GLX_NV_video_capture</code> - CType: int */
  public static final int GLX_DEVICE_ID_NV = 0x20cd;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_VIDEO_MEMORY_MESA = 0x8187;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20c7;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_FBCONFIG_ID_SGIX = 0x8013;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_FRAME_NV = 0x20c8;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 0x1;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_BAD_HYPERPIPE_SGIX = 0x5c;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_FORMAT_RGBA_EXT = 0x20da;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_COLOR_NV = 0x20c3;
  /** <code>GLX_MESA_set_3dfx_mode</code> - CType: int */
  public static final int GLX_3DFX_WINDOW_MODE_MESA = 0x1;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_Y_INVERTED_EXT = 0x20d4;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_FIELD_1_NV = 0x20c9;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA = 0x818b;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_EVENT_MASK_SGIX = 0x801f;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_BACK_LEFT_BUFFER_BIT_SGIX = 0x4;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 0x8019;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_2D_BIT_EXT = 0x2;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX2_EXT = 0x20e4;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_MAX_PBUFFER_PIXELS_SGIX = 0x8018;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_WINDOW_BIT_SGIX = 0x1;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_PBUFFER_SGIX = 0x8023;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_DEPTH_BUFFER_BIT_SGIX = 0x20;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_ACCUM_BUFFER_BIT_SGIX = 0x80;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_ACCELERATED_MESA = 0x8186;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_RAM_AMD = 0x21a3;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_SAVED_SGIX = 0x8021;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_WINDOW_SGIX = 0x8022;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_BACK_EXT = 0x20e0;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_RECTANGLE_BIT_EXT = 0x4;
  /** <code>GLX_SGIS_shared_multisample</code> - CType: int */
  public static final int GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_X_RENDERABLE_SGIX = 0x8012;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = 0x50;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_RENDER_TYPE_SGIX = 0x8011;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_DEPTH_NV = 0x20c5;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_MAX_PBUFFER_HEIGHT_SGIX = 0x8017;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_OPENGL_VERSION_STRING_AMD = 0x1f02;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_BUFFER_CLOBBER_MASK_SGIX = 0x8000000;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_FORMAT_NONE_EXT = 0x20d8;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX8_EXT = 0x20ea;
  /** <code>GLX_MESA_set_3dfx_mode</code> - CType: int */
  public static final int GLX_3DFX_FULLSCREEN_MODE_MESA = 0x2;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_HYPERPIPE_DISPLAY_PIPE_SGIX = 0x1;
  /** <code>GLX_SGIX_visual_select_group</code> - CType: int */
  public static final int GLX_VISUAL_SELECT_GROUP_SGIX = 0x8028;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_RGBA_BIT_SGIX = 0x1;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_COLOR_INDEX_TYPE_SGIX = 0x8015;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_FRONT_LEFT_EXT = 0x20de;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20c6;
  /** <code>GLX_NV_float_buffer</code> - CType: int */
  public static final int GLX_FLOAT_COMPONENTS_NV = 0x20b0;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX3_EXT = 0x20e5;
  /** <code>GLX_OML_swap_method</code> - CType: int */
  public static final int GLX_SWAP_EXCHANGE_OML = 0x8061;
  /** <code>GLX_OML_swap_method</code> - CType: int */
  public static final int GLX_SWAP_METHOD_OML = 0x8060;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA = 0x8188;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_RECTANGLE_EXT = 0x20dd;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_MAX_PBUFFER_WIDTH_SGIX = 0x8016;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_HYPERPIPE_ID_SGIX = 0x8030;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX1_EXT = 0x20e3;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX = 0x4;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_1D_BIT_EXT = 0x1;
  /** <code>GLX_SGIS_shared_multisample</code> - CType: int */
  public static final int GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_DRAWABLE_TYPE_SGIX = 0x8010;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_FRONT_EXT = 0x20de;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x801a;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_PREFERRED_PROFILE_MESA = 0x8189;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_PIXMAP_BIT_SGIX = 0x2;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_VERSION_MESA = 0x8185;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 0x2;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_VENDOR_AMD = 0x1f00;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_TARGET_EXT = 0x20d6;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_PIPE_RECT_SGIX = 0x1;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_BIND_TO_MIPMAP_TEXTURE_EXT = 0x20d2;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_VENDOR_ID_MESA = 0x8183;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_DAMAGED_SGIX = 0x8020;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX4_EXT = 0x20e6;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX9_EXT = 0x20eb;
  /** <code>GLX_SGIX_fbconfig</code> - CType: int */
  public static final int GLX_COLOR_INDEX_BIT_SGIX = 0x2;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA = 0x818d;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_RENDERER_STRING_AMD = 0x1f01;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_FORMAT_RGB_EXT = 0x20d9;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_SAMPLE_BUFFERS_BIT_SGIX = 0x100;
  /** <code>GLX_SGIX_video_resize</code> - CType: int */
  public static final int GLX_SYNC_SWAP_SGIX = 0x1;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_NUM_RB_AMD = 0x21a7;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_PRESERVED_CONTENTS_SGIX = 0x801b;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_NUM_PIPES_AMD = 0x21a5;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_BIND_TO_TEXTURE_RGBA_EXT = 0x20d1;
  /** <code>GLX_NV_video_capture</code> - CType: int */
  public static final int GLX_NUM_VIDEO_CAPTURE_SLOTS_NV = 0x20cf;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_NUM_SIMD_AMD = 0x21a6;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 0x8;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX0_EXT = 0x20e2;
  /** <code>GLX_OML_swap_method</code> - CType: int */
  public static final int GLX_SWAP_COPY_OML = 0x8062;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_HYPERPIPE_RENDER_PIPE_SGIX = 0x2;
  /** <code>GLX_NV_video_out</code> - CType: int */
  public static final int GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = 0x20cc;
  /** <code>GLX_OML_swap_method</code> - CType: int */
  public static final int GLX_SWAP_UNDEFINED_OML = 0x8063;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_PIPE_RECT_LIMITS_SGIX = 0x2;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX6_EXT = 0x20e8;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_FRONT_RIGHT_EXT = 0x20df;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_DEVICE_ID_MESA = 0x8184;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_PBUFFER_BIT_SGIX = 0x4;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_AUX5_EXT = 0x20e7;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_BACK_RIGHT_EXT = 0x20e1;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA = 0x818c;
  /** <code>GLX_NV_video_capture</code> - CType: int */
  public static final int GLX_UNIQUE_ID_NV = 0x20ce;
  /** <code>GLX_SGIS_multisample</code> - CType: int */
  public static final int GLX_SAMPLE_BUFFERS_SGIS = 0x186a0;
  /** <code>GLX_SGIX_pbuffer</code> - CType: int */
  public static final int GLX_STENCIL_BUFFER_BIT_SGIX = 0x40;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_BIND_TO_TEXTURE_RGB_EXT = 0x20d0;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_BAD_HYPERPIPE_CONFIG_SGIX = 0x5b;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_FORMAT_EXT = 0x20d5;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_ID_MESA = 0x818e;
  /** <code>GLX_AMD_gpu_association</code> - CType: int */
  public static final int GLX_GPU_FASTEST_TARGET_GPUS_AMD = 0x21a2;
  /** <code>GLX_SGIX_hyperpipe</code> - CType: int */
  public static final int GLX_HYPERPIPE_STEREO_SGIX = 0x3;
  /** <code>GLX_EXT_texture_from_pixmap</code> - CType: int */
  public static final int GLX_TEXTURE_1D_EXT = 0x20db;
  /** <code>GLX_MESA_query_renderer</code> - CType: int */
  public static final int GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA = 0x818a;

  /** Entry point to C language function: <code> GLXContext glXCreateContextAttribsARB(Display *  dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *  attrib_list) </code> <br>Part of <code>GLX_ARB_create_context</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long glXCreateContextAttribsARB(long dpy, long config, long share_context, boolean direct, IntBuffer attrib_list);

  /** Entry point to C language function: <code> unsigned int glXGetGPUIDsAMD(unsigned int maxCount, unsigned int *  ids) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>
      @param ids a direct only {@link java.nio.IntBuffer}   */
  public int glXGetGPUIDsAMD(int maxCount, IntBuffer ids);

  /** Entry point to C language function: <code> int glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, void *  data) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>
      @param data a direct only {@link java.nio.Buffer}   */
  public int glXGetGPUInfoAMD(int id, int property, int dataType, int size, Buffer data);

  /** Entry point to C language function: <code> unsigned int glXGetContextGPUIDAMD(GLXContext ctx) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>   */
  public int glXGetContextGPUIDAMD(long ctx);

  /** Entry point to C language function: <code> GLXContext glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>   */
  public long glXCreateAssociatedContextAMD(int id, long share_list);

  /** Entry point to C language function: <code> GLXContext glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int *  attribList) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>
      @param attribList a direct only {@link java.nio.IntBuffer}   */
  public long glXCreateAssociatedContextAttribsAMD(int id, long share_context, IntBuffer attribList);

  /** Entry point to C language function: <code> Bool glXDeleteAssociatedContextAMD(GLXContext ctx) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>   */
  public boolean glXDeleteAssociatedContextAMD(long ctx);

  /** Entry point to C language function: <code> Bool glXMakeAssociatedContextCurrentAMD(GLXContext ctx) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>   */
  public boolean glXMakeAssociatedContextCurrentAMD(long ctx);

  /** Entry point to C language function: <code> GLXContext glXGetCurrentAssociatedContextAMD(void) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>   */
  public long glXGetCurrentAssociatedContextAMD();

  /** Entry point to C language function: <code> void glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) </code> <br>Part of <code>GLX_AMD_gpu_association</code><br>   */
  public void glXBlitContextFramebufferAMD(long dstCtx, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);

  /** Entry point to C language function: <code> Display *  glXGetCurrentDisplayEXT(void) </code> <br>Part of <code>GLX_EXT_import_context</code><br>   */
  public long glXGetCurrentDisplayEXT();

  /** Entry point to C language function: <code> int glXQueryContextInfoEXT(Display *  dpy, GLXContext context, int attribute, int *  value) </code> <br>Part of <code>GLX_EXT_import_context</code><br>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public int glXQueryContextInfoEXT(long dpy, long context, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> GLXContextID glXGetContextIDEXT(const GLXContext context) </code> <br>Part of <code>GLX_EXT_import_context</code><br>   */
  public long glXGetContextIDEXT(long context);

  /** Entry point to C language function: <code> GLXContext glXImportContextEXT(Display *  dpy, GLXContextID contextID) </code> <br>Part of <code>GLX_EXT_import_context</code><br>   */
  public long glXImportContextEXT(long dpy, long contextID);

  /** Entry point to C language function: <code> void glXFreeContextEXT(Display *  dpy, GLXContext context) </code> <br>Part of <code>GLX_EXT_import_context</code><br>   */
  public void glXFreeContextEXT(long dpy, long context);

  /** Entry point to C language function: <code> void glXBindTexImageEXT(Display *  dpy, GLXDrawable drawable, int buffer, const int *  attrib_list) </code> <br>Part of <code>GLX_EXT_texture_from_pixmap</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public void glXBindTexImageEXT(long dpy, long drawable, int buffer, IntBuffer attrib_list);

  /** Entry point to C language function: <code> void glXReleaseTexImageEXT(Display *  dpy, GLXDrawable drawable, int buffer) </code> <br>Part of <code>GLX_EXT_texture_from_pixmap</code><br>   */
  public void glXReleaseTexImageEXT(long dpy, long drawable, int buffer);

  /** Entry point to C language function: <code> unsigned int glXGetAGPOffsetMESA(const void *  pointer) </code> <br>Part of <code>GLX_MESA_agp_offset</code><br>
      @param pointer a direct only {@link java.nio.Buffer}   */
  public int glXGetAGPOffsetMESA(Buffer pointer);

  /** Entry point to C language function: <code> void glXCopySubBufferMESA(Display *  dpy, GLXDrawable drawable, int x, int y, int width, int height) </code> <br>Part of <code>GLX_MESA_copy_sub_buffer</code><br>   */
  public void glXCopySubBufferMESA(long dpy, long drawable, int x, int y, int width, int height);

  /** Entry point to C language function: <code> Bool glXQueryCurrentRendererIntegerMESA(int attribute, unsigned int *  value) </code> <br>Part of <code>GLX_MESA_query_renderer</code><br>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQueryCurrentRendererIntegerMESA(int attribute, IntBuffer value);

  /** Entry point to C language function: <code> const char *  glXQueryCurrentRendererStringMESA(int attribute) </code> <br>Part of <code>GLX_MESA_query_renderer</code><br>   */
  public ByteBuffer glXQueryCurrentRendererStringMESA(int attribute);

  /** Entry point to C language function: <code> Bool glXQueryRendererIntegerMESA(Display *  dpy, int screen, int renderer, int attribute, unsigned int *  value) </code> <br>Part of <code>GLX_MESA_query_renderer</code><br>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQueryRendererIntegerMESA(long dpy, int screen, int renderer, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> const char *  glXQueryRendererStringMESA(Display *  dpy, int screen, int renderer, int attribute) </code> <br>Part of <code>GLX_MESA_query_renderer</code><br>   */
  public ByteBuffer glXQueryRendererStringMESA(long dpy, int screen, int renderer, int attribute);

  /** Entry point to C language function: <code> Bool glXReleaseBuffersMESA(Display *  dpy, GLXDrawable drawable) </code> <br>Part of <code>GLX_MESA_release_buffers</code><br>   */
  public boolean glXReleaseBuffersMESA(long dpy, long drawable);

  /** Entry point to C language function: <code> Bool glXSet3DfxModeMESA(int mode) </code> <br>Part of <code>GLX_MESA_set_3dfx_mode</code><br>   */
  public boolean glXSet3DfxModeMESA(int mode);

  /** Entry point to C language function: <code> void glXCopyBufferSubDataNV(Display *  dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) </code> <br>Part of <code>GLX_NV_copy_buffer</code><br>   */
  public void glXCopyBufferSubDataNV(long dpy, long readCtx, long writeCtx, int readTarget, int writeTarget, long readOffset, long writeOffset, long size);

  /** Entry point to C language function: <code> void glXNamedCopyBufferSubDataNV(Display *  dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) </code> <br>Part of <code>GLX_NV_copy_buffer</code><br>   */
  public void glXNamedCopyBufferSubDataNV(long dpy, long readCtx, long writeCtx, int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size);

  /** Entry point to C language function: <code> void glXCopyImageSubDataNV(Display *  dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) </code> <br>Part of <code>GLX_NV_copy_image</code><br>   */
  public void glXCopyImageSubDataNV(long dpy, long srcCtx, int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, long dstCtx, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);

  /** Entry point to C language function: <code> Bool glXDelayBeforeSwapNV(Display *  dpy, GLXDrawable drawable, GLfloat seconds) </code> <br>Part of <code>GLX_NV_delay_before_swap</code><br>   */
  public boolean glXDelayBeforeSwapNV(long dpy, long drawable, float seconds);

  /** Entry point to C language function: <code> unsigned int *  glXEnumerateVideoDevicesNV(Display *  dpy, int screen, int *  nelements) </code> <br>Part of <code>GLX_NV_present_video</code><br>
      @param nelements a direct only {@link java.nio.IntBuffer}   */
  public IntBuffer glXEnumerateVideoDevicesNV(long dpy, int screen, IntBuffer nelements);

  /** Entry point to C language function: <code> int glXBindVideoDeviceNV(Display *  dpy, unsigned int video_slot, unsigned int video_device, const int *  attrib_list) </code> <br>Part of <code>GLX_NV_present_video</code><br>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public int glXBindVideoDeviceNV(long dpy, int video_slot, int video_device, IntBuffer attrib_list);

  /** Entry point to C language function: <code> Bool glXJoinSwapGroupNV(Display *  dpy, GLXDrawable drawable, GLuint group) </code> <br>Part of <code>GLX_NV_swap_group</code><br>   */
  public boolean glXJoinSwapGroupNV(long dpy, long drawable, int group);

  /** Entry point to C language function: <code> Bool glXBindSwapBarrierNV(Display *  dpy, GLuint group, GLuint barrier) </code> <br>Part of <code>GLX_NV_swap_group</code><br>   */
  public boolean glXBindSwapBarrierNV(long dpy, int group, int barrier);

  /** Entry point to C language function: <code> Bool glXQuerySwapGroupNV(Display *  dpy, GLXDrawable drawable, GLuint *  group, GLuint *  barrier) </code> <br>Part of <code>GLX_NV_swap_group</code><br>
      @param group a direct only {@link java.nio.IntBuffer}
      @param barrier a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQuerySwapGroupNV(long dpy, long drawable, IntBuffer group, IntBuffer barrier);

  /** Entry point to C language function: <code> Bool glXQueryMaxSwapGroupsNV(Display *  dpy, int screen, GLuint *  maxGroups, GLuint *  maxBarriers) </code> <br>Part of <code>GLX_NV_swap_group</code><br>
      @param maxGroups a direct only {@link java.nio.IntBuffer}
      @param maxBarriers a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQueryMaxSwapGroupsNV(long dpy, int screen, IntBuffer maxGroups, IntBuffer maxBarriers);

  /** Entry point to C language function: <code> Bool glXQueryFrameCountNV(Display *  dpy, int screen, GLuint *  count) </code> <br>Part of <code>GLX_NV_swap_group</code><br>
      @param count a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQueryFrameCountNV(long dpy, int screen, IntBuffer count);

  /** Entry point to C language function: <code> Bool glXResetFrameCountNV(Display *  dpy, int screen) </code> <br>Part of <code>GLX_NV_swap_group</code><br>   */
  public boolean glXResetFrameCountNV(long dpy, int screen);

  /** Entry point to C language function: <code> int glXBindVideoCaptureDeviceNV(Display *  dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device) </code> <br>Part of <code>GLX_NV_video_capture</code><br>   */
  public int glXBindVideoCaptureDeviceNV(long dpy, int video_capture_slot, long device);

  /** Entry point to C language function: <code> GLXVideoCaptureDeviceNV *  glXEnumerateVideoCaptureDevicesNV(Display *  dpy, int screen, int *  nelements) </code> <br>Part of <code>GLX_NV_video_capture</code><br>
      @param nelements a direct only {@link java.nio.IntBuffer}   */
  public PointerBuffer glXEnumerateVideoCaptureDevicesNV(long dpy, int screen, IntBuffer nelements);

  /** Entry point to C language function: <code> void glXLockVideoCaptureDeviceNV(Display *  dpy, GLXVideoCaptureDeviceNV device) </code> <br>Part of <code>GLX_NV_video_capture</code><br>   */
  public void glXLockVideoCaptureDeviceNV(long dpy, long device);

  /** Entry point to C language function: <code> int glXQueryVideoCaptureDeviceNV(Display *  dpy, GLXVideoCaptureDeviceNV device, int attribute, int *  value) </code> <br>Part of <code>GLX_NV_video_capture</code><br>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public int glXQueryVideoCaptureDeviceNV(long dpy, long device, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> void glXReleaseVideoCaptureDeviceNV(Display *  dpy, GLXVideoCaptureDeviceNV device) </code> <br>Part of <code>GLX_NV_video_capture</code><br>   */
  public void glXReleaseVideoCaptureDeviceNV(long dpy, long device);

  /** Entry point to C language function: <code> int glXGetVideoDeviceNV(Display *  dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *  pVideoDevice) </code> <br>Part of <code>GLX_NV_video_out</code><br>
      @param pVideoDevice a direct only {@link java.nio.IntBuffer}   */
  public int glXGetVideoDeviceNV(long dpy, int screen, int numVideoDevices, IntBuffer pVideoDevice);

  /** Entry point to C language function: <code> int glXReleaseVideoDeviceNV(Display *  dpy, int screen, GLXVideoDeviceNV VideoDevice) </code> <br>Part of <code>GLX_NV_video_out</code><br>   */
  public int glXReleaseVideoDeviceNV(long dpy, int screen, int VideoDevice);

  /** Entry point to C language function: <code> int glXBindVideoImageNV(Display *  dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer) </code> <br>Part of <code>GLX_NV_video_out</code><br>   */
  public int glXBindVideoImageNV(long dpy, int VideoDevice, long pbuf, int iVideoBuffer);

  /** Entry point to C language function: <code> int glXReleaseVideoImageNV(Display *  dpy, GLXPbuffer pbuf) </code> <br>Part of <code>GLX_NV_video_out</code><br>   */
  public int glXReleaseVideoImageNV(long dpy, long pbuf);

  /** Entry point to C language function: <code> int glXSendPbufferToVideoNV(Display *  dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *  pulCounterPbuffer, GLboolean bBlock) </code> <br>Part of <code>GLX_NV_video_out</code><br>
      @param pulCounterPbuffer a direct only {@link java.nio.LongBuffer}   */
  public int glXSendPbufferToVideoNV(long dpy, long pbuf, int iBufferType, LongBuffer pulCounterPbuffer, boolean bBlock);

  /** Entry point to C language function: <code> int glXGetVideoInfoNV(Display *  dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *  pulCounterOutputPbuffer, unsigned long *  pulCounterOutputVideo) </code> <br>Part of <code>GLX_NV_video_out</code><br>
      @param pulCounterOutputPbuffer a direct only {@link java.nio.LongBuffer}
      @param pulCounterOutputVideo a direct only {@link java.nio.LongBuffer}   */
  public int glXGetVideoInfoNV(long dpy, int screen, int VideoDevice, LongBuffer pulCounterOutputPbuffer, LongBuffer pulCounterOutputVideo);

  /** Entry point to C language function: <code> Bool glXGetSyncValuesOML(Display *  dpy, GLXDrawable drawable, int64_t *  ust, int64_t *  msc, int64_t *  sbc) </code> <br>Part of <code>GLX_OML_sync_control</code><br>
      @param ust a direct only {@link java.nio.LongBuffer}
      @param msc a direct only {@link java.nio.LongBuffer}
      @param sbc a direct only {@link java.nio.LongBuffer}   */
  public boolean glXGetSyncValuesOML(long dpy, long drawable, LongBuffer ust, LongBuffer msc, LongBuffer sbc);

  /** Entry point to C language function: <code> Bool glXGetMscRateOML(Display *  dpy, GLXDrawable drawable, int32_t *  numerator, int32_t *  denominator) </code> <br>Part of <code>GLX_OML_sync_control</code><br>
      @param numerator a direct only {@link java.nio.IntBuffer}
      @param denominator a direct only {@link java.nio.IntBuffer}   */
  public boolean glXGetMscRateOML(long dpy, long drawable, IntBuffer numerator, IntBuffer denominator);

  /** Entry point to C language function: <code> int64_t glXSwapBuffersMscOML(Display *  dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder) </code> <br>Part of <code>GLX_OML_sync_control</code><br>   */
  public long glXSwapBuffersMscOML(long dpy, long drawable, long target_msc, long divisor, long remainder);

  /** Entry point to C language function: <code> Bool glXWaitForMscOML(Display *  dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *  ust, int64_t *  msc, int64_t *  sbc) </code> <br>Part of <code>GLX_OML_sync_control</code><br>
      @param ust a direct only {@link java.nio.LongBuffer}
      @param msc a direct only {@link java.nio.LongBuffer}
      @param sbc a direct only {@link java.nio.LongBuffer}   */
  public boolean glXWaitForMscOML(long dpy, long drawable, long target_msc, long divisor, long remainder, LongBuffer ust, LongBuffer msc, LongBuffer sbc);

  /** Entry point to C language function: <code> Bool glXWaitForSbcOML(Display *  dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *  ust, int64_t *  msc, int64_t *  sbc) </code> <br>Part of <code>GLX_OML_sync_control</code><br>
      @param ust a direct only {@link java.nio.LongBuffer}
      @param msc a direct only {@link java.nio.LongBuffer}
      @param sbc a direct only {@link java.nio.LongBuffer}   */
  public boolean glXWaitForSbcOML(long dpy, long drawable, long target_sbc, LongBuffer ust, LongBuffer msc, LongBuffer sbc);

  /** Entry point to C language function: <code> void glXBindSwapBarrierSGIX(Display *  dpy, GLXDrawable drawable, int barrier) </code> <br>Part of <code>GLX_SGIX_swap_barrier</code><br>   */
  public void glXBindSwapBarrierSGIX(long dpy, long drawable, int barrier);

  /** Entry point to C language function: <code> Bool glXQueryMaxSwapBarriersSGIX(Display *  dpy, int screen, int *  max) </code> <br>Part of <code>GLX_SGIX_swap_barrier</code><br>
      @param max a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQueryMaxSwapBarriersSGIX(long dpy, int screen, IntBuffer max);

  /** Entry point to C language function: <code> void glXJoinSwapGroupSGIX(Display *  dpy, GLXDrawable drawable, GLXDrawable member) </code> <br>Part of <code>GLX_SGIX_swap_group</code><br>   */
  public void glXJoinSwapGroupSGIX(long dpy, long drawable, long member);

  /** Entry point to C language function: <code> int glXBindChannelToWindowSGIX(Display *  display, int screen, int channel, Window window) </code> <br>Part of <code>GLX_SGIX_video_resize</code><br>   */
  public int glXBindChannelToWindowSGIX(long display, int screen, int channel, long window);

  /** Entry point to C language function: <code> int glXChannelRectSGIX(Display *  display, int screen, int channel, int x, int y, int w, int h) </code> <br>Part of <code>GLX_SGIX_video_resize</code><br>   */
  public int glXChannelRectSGIX(long display, int screen, int channel, int x, int y, int w, int h);

  /** Entry point to C language function: <code> int glXQueryChannelRectSGIX(Display *  display, int screen, int channel, int *  dx, int *  dy, int *  dw, int *  dh) </code> <br>Part of <code>GLX_SGIX_video_resize</code><br>
      @param dx a direct only {@link java.nio.IntBuffer}
      @param dy a direct only {@link java.nio.IntBuffer}
      @param dw a direct only {@link java.nio.IntBuffer}
      @param dh a direct only {@link java.nio.IntBuffer}   */
  public int glXQueryChannelRectSGIX(long display, int screen, int channel, IntBuffer dx, IntBuffer dy, IntBuffer dw, IntBuffer dh);

  /** Entry point to C language function: <code> int glXQueryChannelDeltasSGIX(Display *  display, int screen, int channel, int *  x, int *  y, int *  w, int *  h) </code> <br>Part of <code>GLX_SGIX_video_resize</code><br>
      @param x a direct only {@link java.nio.IntBuffer}
      @param y a direct only {@link java.nio.IntBuffer}
      @param w a direct only {@link java.nio.IntBuffer}
      @param h a direct only {@link java.nio.IntBuffer}   */
  public int glXQueryChannelDeltasSGIX(long display, int screen, int channel, IntBuffer x, IntBuffer y, IntBuffer w, IntBuffer h);

  /** Entry point to C language function: <code> int glXChannelRectSyncSGIX(Display *  display, int screen, int channel, GLenum synctype) </code> <br>Part of <code>GLX_SGIX_video_resize</code><br>   */
  public int glXChannelRectSyncSGIX(long display, int screen, int channel, int synctype);

  /** Entry point to C language function: <code> void glXCushionSGI(Display *  dpy, Window window, float cushion) </code> <br>Part of <code>GLX_SGI_cushion</code><br>   */
  public void glXCushionSGI(long dpy, long window, float cushion);

  /** Entry point to C language function: <code> Bool glXMakeCurrentReadSGI(Display *  dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) </code> <br>Part of <code>GLX_SGI_make_current_read</code><br>   */
  public boolean glXMakeCurrentReadSGI(long dpy, long draw, long read, long ctx);

  /** Entry point to C language function: <code> GLXDrawable glXGetCurrentReadDrawableSGI(void) </code> <br>Part of <code>GLX_SGI_make_current_read</code><br>   */
  public long glXGetCurrentReadDrawableSGI();

  /** Entry point to C language function: <code> int glXSwapIntervalSGI(int interval) </code> <br>Part of <code>GLX_SGI_swap_control</code><br>   */
  public int glXSwapIntervalSGI(int interval);

  /** Entry point to C language function: <code> int glXGetVideoSyncSGI(unsigned int *  count) </code> <br>Part of <code>GLX_SGI_video_sync</code><br>
      @param count a direct only {@link java.nio.IntBuffer}   */
  public int glXGetVideoSyncSGI(IntBuffer count);

  /** Entry point to C language function: <code> int glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *  count) </code> <br>Part of <code>GLX_SGI_video_sync</code><br>
      @param count a direct only {@link java.nio.IntBuffer}   */
  public int glXWaitVideoSyncSGI(int divisor, int remainder, IntBuffer count);

  /** Entry point to C language function: <code> Status glXGetTransparentIndexSUN(Display *  dpy, Window overlay, Window underlay, long *  pTransparentIndex) </code> <br>Part of <code>GLX_SUN_get_transparent_index</code><br>
      @param pTransparentIndex a direct only {@link java.nio.LongBuffer}   */
  public int glXGetTransparentIndexSUN(long dpy, long overlay, long underlay, LongBuffer pTransparentIndex);


  // --- Begin CustomJavaCode .cfg declarations
      public boolean isFunctionAvailable(String glFunctionName);
      public boolean isExtensionAvailable(String glExtensionName);
  // ---- End CustomJavaCode .cfg declarations

} // end of class GLXExt
